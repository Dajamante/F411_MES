
F411-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006404  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a8c  08006a8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a94  08006a94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a94  08006a94  00016a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a88  20000070  08006b0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  08006b0c  00020af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126eb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d60  00000000  00000000  0003278b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000354f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00036490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019af3  00000000  00000000  000372e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e5a  00000000  00000000  00050ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009be08  00000000  00000000  00064c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100a3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049ec  00000000  00000000  00100a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800658c 	.word	0x0800658c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800658c 	.word	0x0800658c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_ADC1_Init+0xa0>)
 8000598:	4a23      	ldr	r2, [pc, #140]	; (8000628 <MX_ADC1_Init+0xa4>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_ADC1_Init+0xa0>)
 800059e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005c2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005d8:	2201      	movs	r2, #1
 80005da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ec:	f001 fa28 	bl	8001a40 <HAL_ADC_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80005f6:	f000 fef3 	bl	80013e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80005fa:	230e      	movs	r3, #14
 80005fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_ADC1_Init+0xa0>)
 800060c:	f001 fbba 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000616:	f000 fee3 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000008c 	.word	0x2000008c
 8000628:	40012000 	.word	0x40012000

0800062c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <HAL_ADC_MspInit+0xdc>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d157      	bne.n	80006fe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	4a2d      	ldr	r2, [pc, #180]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065c:	6453      	str	r3, [r2, #68]	; 0x44
 800065e:	4b2b      	ldr	r3, [pc, #172]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a26      	ldr	r2, [pc, #152]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b24      	ldr	r3, [pc, #144]	; (800070c <HAL_ADC_MspInit+0xe0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000686:	2310      	movs	r3, #16
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068a:	2303      	movs	r3, #3
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	481d      	ldr	r0, [pc, #116]	; (8000710 <HAL_ADC_MspInit+0xe4>)
 800069a:	f002 fb15 	bl	8002cc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <HAL_ADC_MspInit+0xec>)
 80006a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006e4:	f001 ff10 	bl	8002508 <HAL_DMA_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006ee:	f000 fe77 	bl	80013e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006f6:	639a      	str	r2, [r3, #56]	; 0x38
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40012000 	.word	0x40012000
 800070c:	40023800 	.word	0x40023800
 8000710:	40020800 	.word	0x40020800
 8000714:	200000d4 	.word	0x200000d4
 8000718:	40026410 	.word	0x40026410

0800071c <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	440b      	add	r3, r1
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	429a      	cmp	r2, r3
 8000740:	d114      	bne.n	800076c <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000742:	2301      	movs	r3, #1
 8000744:	60bb      	str	r3, [r7, #8]
		i++;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3301      	adds	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 800074c:	e00e      	b.n	800076c <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4413      	add	r3, r2
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	440b      	add	r3, r1
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	429a      	cmp	r2, r3
 8000760:	d001      	beq.n	8000766 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3301      	adds	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d11a      	bne.n	80007a8 <ConsoleCommandMatch+0x8c>
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b09      	cmp	r3, #9
 8000776:	d817      	bhi.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000778:	683a      	ldr	r2, [r7, #0]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000780:	2b20      	cmp	r3, #32
 8000782:	d011      	beq.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800078c:	2b0a      	cmp	r3, #10
 800078e:	d00b      	beq.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b0d      	cmp	r3, #13
 800079a:	d005      	beq.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1d2      	bne.n	800074e <ConsoleCommandMatch+0x32>
	}

	return result;
 80007a8:	68bb      	ldr	r3, [r7, #8]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b087      	sub	sp, #28
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	60f8      	str	r0, [r7, #12]
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80007ce:	e00d      	b.n	80007ec <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	441a      	add	r2, r3
 80007d6:	68f9      	ldr	r1, [r7, #12]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	440b      	add	r3, r1
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	701a      	strb	r2, [r3, #0]
		i++;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3ed      	bcc.n	80007d0 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80007f4:	e007      	b.n	8000806 <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	4413      	add	r3, r2
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3301      	adds	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	2bff      	cmp	r3, #255	; 0xff
 800080a:	d9f4      	bls.n	80007f6 <ConsoleResetBuffer+0x40>
	}
	return remaining;
 800080c:	693b      	ldr	r3, [r7, #16]
}
 800080e:	4618      	mov	r0, r3
 8000810:	371c      	adds	r7, #28
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082c:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800082e:	e002      	b.n	8000836 <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3301      	adds	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b0d      	cmp	r3, #13
 8000840:	d009      	beq.n	8000856 <ConsoleCommandEndline+0x3c>
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b0a      	cmp	r3, #10
 800084c:	d003      	beq.n	8000856 <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d3ec      	bcc.n	8000830 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	429a      	cmp	r2, r3
 800085c:	d201      	bcs.n	8000862 <ConsoleCommandEndline+0x48>
	{
		result = i;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000862:	68bb      	ldr	r3, [r7, #8]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000876:	f000 fc17 	bl	80010a8 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to El Consolo, your gateway to testing code and hardware.");
 800087a:	480f      	ldr	r0, [pc, #60]	; (80008b8 <ConsoleInit+0x48>)
 800087c:	f000 fc48 	bl	8001110 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000880:	480e      	ldr	r0, [pc, #56]	; (80008bc <ConsoleInit+0x4c>)
 8000882:	f000 fc45 	bl	8001110 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <ConsoleInit+0x50>)
 8000888:	f000 fc42 	bl	8001110 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <ConsoleInit+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e007      	b.n	80008a8 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <ConsoleInit+0x58>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2bff      	cmp	r3, #255	; 0xff
 80008ac:	d9f4      	bls.n	8000898 <ConsoleInit+0x28>
	}

}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	080065a4 	.word	0x080065a4
 80008bc:	080065e8 	.word	0x080065e8
 80008c0:	080065ec 	.word	0x080065ec
 80008c4:	20000234 	.word	0x20000234
 80008c8:	20000134 	.word	0x20000134

080008cc <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80008d2:	4b54      	ldr	r3, [pc, #336]	; (8000a24 <ConsoleProcess+0x158>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a54      	ldr	r2, [pc, #336]	; (8000a28 <ConsoleProcess+0x15c>)
 80008d8:	1898      	adds	r0, r3, r2
 80008da:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <ConsoleProcess+0x158>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80008e2:	463a      	mov	r2, r7
 80008e4:	4619      	mov	r1, r3
 80008e6:	f000 fbe6 	bl	80010b6 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <ConsoleProcess+0x2e>
 80008f0:	4b4e      	ldr	r3, [pc, #312]	; (8000a2c <ConsoleProcess+0x160>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 8091 	beq.w	8000a1c <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 80008fa:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <ConsoleProcess+0x160>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000900:	4b48      	ldr	r3, [pc, #288]	; (8000a24 <ConsoleProcess+0x158>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a46      	ldr	r2, [pc, #280]	; (8000a24 <ConsoleProcess+0x158>)
 800090a:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 800090c:	4b45      	ldr	r3, [pc, #276]	; (8000a24 <ConsoleProcess+0x158>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	4845      	ldr	r0, [pc, #276]	; (8000a28 <ConsoleProcess+0x15c>)
 8000914:	f7ff ff81 	bl	800081a <ConsoleCommandEndline>
 8000918:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db7d      	blt.n	8000a1c <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000920:	f000 fb7e 	bl	8001020 <ConsoleCommandsGetTable>
 8000924:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800092e:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000930:	e03d      	b.n	80009ae <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	4613      	mov	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	4413      	add	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	461a      	mov	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4938      	ldr	r1, [pc, #224]	; (8000a28 <ConsoleProcess+0x15c>)
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fee8 	bl	800071c <ConsoleCommandMatch>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d02a      	beq.n	80009a8 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4613      	mov	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	461a      	mov	r2, r3
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4413      	add	r3, r2
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4830      	ldr	r0, [pc, #192]	; (8000a28 <ConsoleProcess+0x15c>)
 8000966:	4798      	blx	r3
 8000968:	4603      	mov	r3, r0
 800096a:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d017      	beq.n	80009a2 <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 8000972:	482f      	ldr	r0, [pc, #188]	; (8000a30 <ConsoleProcess+0x164>)
 8000974:	f000 fbcc 	bl	8001110 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 8000978:	482b      	ldr	r0, [pc, #172]	; (8000a28 <ConsoleProcess+0x15c>)
 800097a:	f000 fbc9 	bl	8001110 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800097e:	482d      	ldr	r0, [pc, #180]	; (8000a34 <ConsoleProcess+0x168>)
 8000980:	f000 fbc6 	bl	8001110 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	4613      	mov	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	4413      	add	r3, r2
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	461a      	mov	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4413      	add	r3, r2
 8000994:	3308      	adds	r3, #8
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fbba 	bl	8001110 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 800099c:	4826      	ldr	r0, [pc, #152]	; (8000a38 <ConsoleProcess+0x16c>)
 800099e:	f000 fbb7 	bl	8001110 <ConsoleIoSendString>

					}
					found = cmdIndex;
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	e002      	b.n	80009ae <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3301      	adds	r3, #1
 80009ac:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	4613      	mov	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	4413      	add	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	461a      	mov	r2, r3
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <ConsoleProcess+0x100>
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009ca:	d0b2      	beq.n	8000932 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00d      	beq.n	80009ee <ConsoleProcess+0x122>
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009d8:	d109      	bne.n	80009ee <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <ConsoleProcess+0x158>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d905      	bls.n	80009ee <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 80009e2:	4816      	ldr	r0, [pc, #88]	; (8000a3c <ConsoleProcess+0x170>)
 80009e4:	f000 fb94 	bl	8001110 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <ConsoleProcess+0x16c>)
 80009ea:	f000 fb91 	bl	8001110 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <ConsoleProcess+0x158>)
 80009f0:	6819      	ldr	r1, [r3, #0]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	461a      	mov	r2, r3
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <ConsoleProcess+0x15c>)
 80009fa:	f7ff fedc 	bl	80007b6 <ConsoleResetBuffer>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <ConsoleProcess+0x158>)
 8000a02:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <ConsoleProcess+0x158>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf14      	ite	ne
 8000a0c:	2301      	movne	r3, #1
 8000a0e:	2300      	moveq	r3, #0
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <ConsoleProcess+0x160>)
 8000a14:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000a16:	480a      	ldr	r0, [pc, #40]	; (8000a40 <ConsoleProcess+0x174>)
 8000a18:	f000 fb7a 	bl	8001110 <ConsoleIoSendString>
		}
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000234 	.word	0x20000234
 8000a28:	20000134 	.word	0x20000134
 8000a2c:	20000238 	.word	0x20000238
 8000a30:	080065f0 	.word	0x080065f0
 8000a34:	080065f8 	.word	0x080065f8
 8000a38:	080065e8 	.word	0x080065e8
 8000a3c:	08006600 	.word	0x08006600
 8000a40:	080065ec 	.word	0x080065ec

08000a44 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000a5e:	e00b      	b.n	8000a78 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b20      	cmp	r3, #32
 8000a6a:	d102      	bne.n	8000a72 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000a78:	7afb      	ldrb	r3, [r7, #11]
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d002      	beq.n	8000a86 <ConsoleParamFindN+0x42>
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	2bff      	cmp	r3, #255	; 0xff
 8000a84:	d9ec      	bls.n	8000a60 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a8c:	d102      	bne.n	8000a94 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	75fb      	strb	r3, [r7, #23]
 8000a92:	e002      	b.n	8000a9a <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3724      	adds	r7, #36	; 0x24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000aba:	f107 021c 	add.w	r2, r7, #28
 8000abe:	7afb      	ldrb	r3, [r7, #11]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f7ff ffbe 	bl	8000a44 <ConsoleParamFindN>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	4413      	add	r3, r2
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000ae2:	e011      	b.n	8000b08 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000ae4:	f107 0214 	add.w	r2, r7, #20
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	4413      	add	r3, r2
 8000aec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000af0:	701a      	strb	r2, [r3, #0]
		i++;
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	3301      	adds	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000af8:	69fa      	ldr	r2, [r7, #28]
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	4413      	add	r3, r2
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000b08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b0c:	2b0a      	cmp	r3, #10
 8000b0e:	d00a      	beq.n	8000b26 <ConsoleReceiveParamInt16+0x7e>
 8000b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b14:	2b0d      	cmp	r3, #13
 8000b16:	d006      	beq.n	8000b26 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000b18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b1c:	2b20      	cmp	r3, #32
 8000b1e:	d002      	beq.n	8000b26 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	d9de      	bls.n	8000ae4 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d102      	bne.n	8000b32 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10e      	bne.n	8000b58 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 8000b3a:	f107 0214 	add.w	r2, r7, #20
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	4413      	add	r3, r2
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 fa62 	bl	8005014 <atoi>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000b58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000b7a:	f107 0218 	add.w	r2, r7, #24
 8000b7e:	7afb      	ldrb	r3, [r7, #11]
 8000b80:	4619      	mov	r1, r3
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff ff5e 	bl	8000a44 <ConsoleParamFindN>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000b8c:	7ffb      	ldrb	r3, [r7, #31]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d12c      	bne.n	8000bec <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
 8000b96:	e01e      	b.n	8000bd6 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000b98:	7ffb      	ldrb	r3, [r7, #31]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10d      	bne.n	8000bba <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	f107 0217 	add.w	r2, r7, #23
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f8c5 	bl	8000d40 <ConsoleUtilHexCharToInt>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000bba:	7ffb      	ldrb	r3, [r7, #31]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d107      	bne.n	8000bd0 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000bc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bcc:	4413      	add	r3, r2
 8000bce:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d9dd      	bls.n	8000b98 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000bdc:	7ffb      	ldrb	r3, [r7, #31]
 8000bde:	2b11      	cmp	r3, #17
 8000be0:	d101      	bne.n	8000be6 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000be2:	2300      	movs	r3, #0
 8000be4:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000bea:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c00:	2300      	movs	r3, #0
 8000c02:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e01b      	b.n	8000c42 <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000c0a:	7cfb      	ldrb	r3, [r7, #19]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d115      	bne.n	8000c3c <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000c10:	88fa      	ldrh	r2, [r7, #6]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f1c3 0303 	rsb	r3, r3, #3
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	fa42 f303 	asr.w	r3, r2, r3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	f003 030f 	and.w	r3, r3, #15
 8000c24:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000c26:	f107 020c 	add.w	r2, r7, #12
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	441a      	add	r2, r3
 8000c2e:	7cbb      	ldrb	r3, [r7, #18]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f8c5 	bl	8000dc2 <ConsoleUtilsIntToHexChar>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d9e0      	bls.n	8000c0a <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000c48:	f107 020c 	add.w	r2, r7, #12
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4413      	add	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fa59 	bl	8001110 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000c74:	2300      	movs	r3, #0
 8000c76:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da07      	bge.n	8000c92 <smallItoa+0x2a>
		isNegative = true;
 8000c82:	2301      	movs	r3, #1
 8000c84:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	425b      	negs	r3, r3
 8000c8a:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000c96:	e007      	b.n	8000ca8 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ca0:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f1      	bne.n	8000c98 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	4413      	add	r3, r2
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	fb93 f2f2 	sdiv	r2, r3, r2
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	fb01 f202 	mul.w	r2, r1, r2
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	440b      	add	r3, r1
 8000ce0:	3230      	adds	r2, #48	; 0x30
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cee:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	617a      	str	r2, [r7, #20]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1e6      	bne.n	8000cc8 <smallItoa+0x60>

	if (isNegative) {
 8000cfa:	7ffb      	ldrb	r3, [r7, #31]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	222d      	movs	r2, #45	; 0x2d
 8000d04:	701a      	strb	r2, [r3, #0]
	}
}
 8000d06:	bf00      	nop
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	f107 0108 	add.w	r1, r7, #8
 8000d24:	220a      	movs	r2, #10
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff9e 	bl	8000c68 <smallItoa>
	ConsoleIoSendString(out);
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f9ed 	bl	8001110 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b2f      	cmp	r3, #47	; 0x2f
 8000d54:	d908      	bls.n	8000d68 <ConsoleUtilHexCharToInt+0x28>
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b39      	cmp	r3, #57	; 0x39
 8000d5a:	d805      	bhi.n	8000d68 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	3b30      	subs	r3, #48	; 0x30
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e025      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b40      	cmp	r3, #64	; 0x40
 8000d6c:	d908      	bls.n	8000d80 <ConsoleUtilHexCharToInt+0x40>
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b46      	cmp	r3, #70	; 0x46
 8000d72:	d805      	bhi.n	8000d80 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	3b37      	subs	r3, #55	; 0x37
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e019      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b60      	cmp	r3, #96	; 0x60
 8000d84:	d908      	bls.n	8000d98 <ConsoleUtilHexCharToInt+0x58>
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b66      	cmp	r3, #102	; 0x66
 8000d8a:	d805      	bhi.n	8000d98 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	3b57      	subs	r3, #87	; 0x57
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e00d      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b0a      	cmp	r3, #10
 8000d9c:	d105      	bne.n	8000daa <ConsoleUtilHexCharToInt+0x6a>
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b0d      	cmp	r3, #13
 8000da2:	d102      	bne.n	8000daa <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b20      	cmp	r3, #32
 8000da8:	d102      	bne.n	8000db0 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000daa:	2311      	movs	r3, #17
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e001      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000db0:	2310      	movs	r3, #16
 8000db2:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	6039      	str	r1, [r7, #0]
 8000dcc:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b09      	cmp	r3, #9
 8000dd6:	d805      	bhi.n	8000de4 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	3330      	adds	r3, #48	; 0x30
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e00d      	b.n	8000e00 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b09      	cmp	r3, #9
 8000de8:	d908      	bls.n	8000dfc <ConsoleUtilsIntToHexChar+0x3a>
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d805      	bhi.n	8000dfc <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	3337      	adds	r3, #55	; 0x37
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	e001      	b.n	8000e00 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <ConsoleCommandComment>:
	{"sadc", &ConsoleCommandDumpMic, HELP("Stopping the ADC mic")},
	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000e30:	2308      	movs	r3, #8
 8000e32:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e01e      	b.n	8000e78 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000e3a:	4914      	ldr	r1, [pc, #80]	; (8000e8c <ConsoleCommandHelp+0x68>)
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f960 	bl	8001110 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <ConsoleCommandHelp+0x6c>)
 8000e52:	f000 f95d 	bl	8001110 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	3308      	adds	r3, #8
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <ConsoleCommandHelp+0x68>)
 8000e64:	4413      	add	r3, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f952 	bl	8001110 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <ConsoleCommandHelp+0x70>)
 8000e6e:	f000 f94f 	bl	8001110 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3db      	bcc.n	8000e3a <ConsoleCommandHelp+0x16>
	}
	return result;
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08006690 	.word	0x08006690
 8000e90:	0800663c 	.word	0x0800663c
 8000e94:	08006640 	.word	0x08006640

08000e98 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fdfd 	bl	8000aa8 <ConsoleReceiveParamInt16>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d116      	bne.n	8000ee6 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <ConsoleCommandParamExampleInt16+0x58>)
 8000eba:	f000 f929 	bl	8001110 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000ebe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff25 	bl	8000d12 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000ec8:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <ConsoleCommandParamExampleInt16+0x5c>)
 8000eca:	f000 f921 	bl	8001110 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000ece:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe8e 	bl	8000bf6 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <ConsoleCommandParamExampleInt16+0x60>)
 8000edc:	f000 f918 	bl	8001110 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <ConsoleCommandParamExampleInt16+0x64>)
 8000ee2:	f000 f915 	bl	8001110 <ConsoleIoSendString>
	}
	return result;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	08006644 	.word	0x08006644
 8000ef4:	08006654 	.word	0x08006654
 8000ef8:	0800665c 	.word	0x0800665c
 8000efc:	08006640 	.word	0x08006640

08000f00 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2101      	movs	r1, #1
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fe27 	bl	8000b64 <ConsoleReceiveParamHexUint16>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000f22:	f000 f8f5 	bl	8001110 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000f26:	89bb      	ldrh	r3, [r7, #12]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe64 	bl	8000bf6 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000f30:	f000 f8ee 	bl	8001110 <ConsoleIoSendString>
	}
	return result;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08006660 	.word	0x08006660
 8000f44:	08006640 	.word	0x08006640

08000f48 <ConsoleCommandStartMic>:


static eCommandResult_T ConsoleCommandStartMic(const char buffer[]){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result;
    IGNORE_UNUSED_VARIABLE(buffer);
	if(COMMAND_SUCCESS == result){
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d108      	bne.n	8000f68 <ConsoleCommandStartMic+0x20>

		HAL_TIM_Base_Start(&htim3);
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <ConsoleCommandStartMic+0x2c>)
 8000f58:	f002 fd46 	bl	80039e8 <HAL_TIM_Base_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcBuf, ADCBUFLEN);
 8000f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f60:	4905      	ldr	r1, [pc, #20]	; (8000f78 <ConsoleCommandStartMic+0x30>)
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <ConsoleCommandStartMic+0x34>)
 8000f64:	f000 fdb0 	bl	8001ac8 <HAL_ADC_Start_DMA>

	}

	return result;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000a58 	.word	0x20000a58
 8000f78:	2000023c 	.word	0x2000023c
 8000f7c:	2000008c 	.word	0x2000008c

08000f80 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < ADCBUFLEN; i++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e00d      	b.n	8000faa <HAL_ADC_ConvCpltCallback+0x2a>
			//ConsoleIoSendString("ADC is: ");
			ConsoleSendParamInt16(adcBuf[i]);
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff feba 	bl	8000d12 <ConsoleSendParamInt16>
			ConsoleIoSendString(" ");
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <HAL_ADC_ConvCpltCallback+0x4c>)
 8000fa0:	f000 f8b6 	bl	8001110 <ConsoleIoSendString>
	for(int i = 0; i < ADCBUFLEN; i++){
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fb0:	dbed      	blt.n	8000f8e <HAL_ADC_ConvCpltCallback+0xe>
		}
	HAL_ADC_Stop_DMA(&hadc1);
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <HAL_ADC_ConvCpltCallback+0x50>)
 8000fb4:	f000 fe78 	bl	8001ca8 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim3);
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000fba:	f002 fd6f 	bl	8003a9c <HAL_TIM_Base_Stop>

}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000023c 	.word	0x2000023c
 8000fcc:	08006670 	.word	0x08006670
 8000fd0:	2000008c 	.word	0x2000008c
 8000fd4:	20000a58 	.word	0x20000a58

08000fd8 <ConsoleCommandDumpMic>:
static eCommandResult_T ConsoleCommandDumpMic(const char buffer[]){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    IGNORE_UNUSED_VARIABLE(buffer);

	HAL_ADC_Stop_DMA(&hadc1);
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <ConsoleCommandDumpMic+0x18>)
 8000fe2:	f000 fe61 	bl	8001ca8 <HAL_ADC_Stop_DMA>

	return COMMAND_SUCCESS;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000008c 	.word	0x2000008c

08000ff4 <ConsoleCommandVer>:


static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <ConsoleCommandVer+0x24>)
 8001002:	f000 f885 	bl	8001110 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <ConsoleCommandVer+0x28>)
 8001008:	f000 f882 	bl	8001110 <ConsoleIoSendString>
	return result;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	08006674 	.word	0x08006674
 800101c:	08006640 	.word	0x08006640

08001020 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <ConsoleCommandsGetTable+0x10>)
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	08006690 	.word	0x08006690

08001034 <_read>:
#include <string.h>
#include <stdlib.h>

// Retargetting write and read:

int _read(int file, char *result, size_t len){
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;

	int retcode = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

	if (len != 0){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d012      	beq.n	8001070 <_read+0x3c>
		status = HAL_UART_Receive(&huart2, (uint8_t *) result, len, HAL_MAX_DELAY);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <_read+0x48>)
 8001056:	f003 fc58 	bl	800490a <HAL_UART_Receive>
 800105a:	4603      	mov	r3, r0
 800105c:	74fb      	strb	r3, [r7, #19]

		if (status == HAL_OK){
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_read+0x36>

			retcode = len;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e002      	b.n	8001070 <_read+0x3c>
		} else {
			retcode = -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800106e:	617b      	str	r3, [r7, #20]
		}
	}

	return retcode;
 8001070:	697b      	ldr	r3, [r7, #20]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000aa0 	.word	0x20000aa0

08001080 <_write>:

int _write(int file, char *outgoing, int len){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) outgoing, len, 100);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	b29a      	uxth	r2, r3
 8001090:	2364      	movs	r3, #100	; 0x64
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <_write+0x24>)
 8001096:	f003 fba6 	bl	80047e6 <HAL_UART_Transmit>
	return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000aa0 	.word	0x20000aa0

080010a8 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 80010ac:	f000 fbba 	bl	8001824 <MX_USART2_UART_Init>
	return CONSOLE_SUCCESS;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <ConsoleIoReceive>:
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
    uint32_t i = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
    char ch;

    ch = getchar();
 80010c6:	f003 ffaf 	bl	8005028 <getchar>
 80010ca:	4603      	mov	r3, r0
 80010cc:	74fb      	strb	r3, [r7, #19]
    while ( ( '\n' != ch ) && ( i < bufferLength ) )
 80010ce:	e00f      	b.n	80010f0 <ConsoleIoReceive+0x3a>
    {
        buffer[i] = (uint8_t) ch;
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4413      	add	r3, r2
 80010d6:	7cfa      	ldrb	r2, [r7, #19]
 80010d8:	701a      	strb	r2, [r3, #0]
        i++;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
        printf("%c", ch);
 80010e0:	7cfb      	ldrb	r3, [r7, #19]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fff6 	bl	80050d4 <putchar>
        ch = getchar();
 80010e8:	f003 ff9e 	bl	8005028 <getchar>
 80010ec:	4603      	mov	r3, r0
 80010ee:	74fb      	strb	r3, [r7, #19]
    while ( ( '\n' != ch ) && ( i < bufferLength ) )
 80010f0:	7cfb      	ldrb	r3, [r7, #19]
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d003      	beq.n	80010fe <ConsoleIoReceive+0x48>
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d3e8      	bcc.n	80010d0 <ConsoleIoReceive+0x1a>
    }
    *readLength = i;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	601a      	str	r2, [r3, #0]
    return CONSOLE_SUCCESS;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <ConsoleIoSendString+0x1c>)
 800111c:	f003 ffc2 	bl	80050a4 <iprintf>
	return CONSOLE_SUCCESS;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	0800668c 	.word	0x0800668c

08001130 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == BUTTON_Pin){
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d10b      	bne.n	8001158 <HAL_GPIO_EXTI_Callback+0x28>
		//int val = (int) HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
		//printf("Val %d\n", val);
		if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 1){
 8001140:	2101      	movs	r1, #1
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <HAL_GPIO_EXTI_Callback+0x30>)
 8001144:	f001 ff44 	bl	8002fd0 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d104      	bne.n	8001158 <HAL_GPIO_EXTI_Callback+0x28>
			HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 800114e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001152:	4804      	ldr	r0, [pc, #16]	; (8001164 <HAL_GPIO_EXTI_Callback+0x34>)
 8001154:	f001 ff6d 	bl	8003032 <HAL_GPIO_TogglePin>
		}
	}
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020000 	.word	0x40020000
 8001164:	40020c00 	.word	0x40020c00

08001168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_DMA_Init+0x3c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2038      	movs	r0, #56	; 0x38
 8001190:	f001 f983 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001194:	2038      	movs	r0, #56	; 0x38
 8001196:	f001 f99c 	bl	80024d2 <HAL_NVIC_EnableIRQ>

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <MX_GPIO_Init+0x100>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a38      	ldr	r2, [pc, #224]	; (80012a8 <MX_GPIO_Init+0x100>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <MX_GPIO_Init+0x100>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <MX_GPIO_Init+0x100>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <MX_GPIO_Init+0x100>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <MX_GPIO_Init+0x100>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <MX_GPIO_Init+0x100>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a2a      	ldr	r2, [pc, #168]	; (80012a8 <MX_GPIO_Init+0x100>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <MX_GPIO_Init+0x100>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_GPIO_Init+0x100>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <MX_GPIO_Init+0x100>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_GPIO_Init+0x100>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_GPIO_Init+0x100>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <MX_GPIO_Init+0x100>)
 8001238:	f043 0308 	orr.w	r3, r3, #8
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_GPIO_Init+0x100>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001250:	4816      	ldr	r0, [pc, #88]	; (80012ac <MX_GPIO_Init+0x104>)
 8001252:	f001 fed5 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001256:	2301      	movs	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4811      	ldr	r0, [pc, #68]	; (80012b0 <MX_GPIO_Init+0x108>)
 800126c:	f001 fd2c 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <MX_GPIO_Init+0x104>)
 800128a:	f001 fd1d 	bl	8002cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2006      	movs	r0, #6
 8001294:	f001 f901 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001298:	2006      	movs	r0, #6
 800129a:	f001 f91a 	bl	80024d2 <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40020000 	.word	0x40020000

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b8:	f000 fb50 	bl	800195c <HAL_Init>

  /* USER CODE BEGIN Init */
  ConsoleInit();
 80012bc:	f7ff fad8 	bl	8000870 <ConsoleInit>
  // Sets the read buf to zero to not wait indefinitely
  setvbuf(stdin, NULL, _IONBF, 0);
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <main+0x54>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6858      	ldr	r0, [r3, #4]
 80012c6:	2300      	movs	r3, #0
 80012c8:	2202      	movs	r2, #2
 80012ca:	2100      	movs	r1, #0
 80012cc:	f003 ff18 	bl	8005100 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f81e 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f7ff ff68 	bl	80011a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012d8:	f7ff ff46 	bl	8001168 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012dc:	f000 faa2 	bl	8001824 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80012e0:	f7ff f950 	bl	8000584 <MX_ADC1_Init>
  MX_TIM2_Init();
 80012e4:	f000 f96e 	bl	80015c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012e8:	f000 f9e0 	bl	80016ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012ec:	4807      	ldr	r0, [pc, #28]	; (800130c <main+0x58>)
 80012ee:	f002 fbfd 	bl	8003aec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012f2:	2108      	movs	r1, #8
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <main+0x58>)
 80012f6:	f002 fcb5 	bl	8003c64 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 2);
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <main+0x58>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2202      	movs	r2, #2
 8001300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     ConsoleProcess();
 8001302:	f7ff fae3 	bl	80008cc <ConsoleProcess>
 8001306:	e7fc      	b.n	8001302 <main+0x4e>
 8001308:	2000000c 	.word	0x2000000c
 800130c:	20000a10 	.word	0x20000a10

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b094      	sub	sp, #80	; 0x50
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	2230      	movs	r2, #48	; 0x30
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f003 feb8 	bl	8005094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <SystemClock_Config+0xc8>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <SystemClock_Config+0xc8>)
 800133e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <SystemClock_Config+0xc8>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <SystemClock_Config+0xcc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <SystemClock_Config+0xcc>)
 800135a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <SystemClock_Config+0xcc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136c:	2302      	movs	r3, #2
 800136e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001374:	2310      	movs	r3, #16
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001378:	2302      	movs	r3, #2
 800137a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800137c:	2300      	movs	r3, #0
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001380:	2308      	movs	r3, #8
 8001382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001384:	2350      	movs	r3, #80	; 0x50
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001388:	2302      	movs	r3, #2
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800138c:	2304      	movs	r3, #4
 800138e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fe7f 	bl	8003098 <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013a0:	f000 f81e 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2302      	movs	r3, #2
 80013aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	2102      	movs	r1, #2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 f8e1 	bl	8003588 <HAL_RCC_ClockConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013cc:	f000 f808 	bl	80013e0 <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3750      	adds	r7, #80	; 0x50
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_MspInit+0x58>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <HAL_MspInit+0x58>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_MspInit+0x58>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_MspInit+0x58>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_MspInit+0x58>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_MspInit+0x58>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2005      	movs	r0, #5
 8001430:	f001 f833 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001434:	2005      	movs	r0, #5
 8001436:	f001 f84c 	bl	80024d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 fab4 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f001 fdda 	bl	8003068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <DMA2_Stream0_IRQHandler+0x10>)
 80014be:	f001 f999 	bl	80027f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000d4 	.word	0x200000d4

080014cc <_close>:
	}
	return len;
}

int _close(int file)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	return -1;
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f4:	605a      	str	r2, [r3, #4]
	return 0;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_isatty>:

int _isatty(int file)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	return 1;
 800150c:	2301      	movs	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800151a:	b480      	push	{r7}
 800151c:	b085      	sub	sp, #20
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
	return 0;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f003 fd5a 	bl	800501c <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20020000 	.word	0x20020000
 8001594:	00000400 	.word	0x00000400
 8001598:	20000a0c 	.word	0x20000a0c
 800159c:	20000af8 	.word	0x20000af8

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08e      	sub	sp, #56	; 0x38
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	f107 0320 	add.w	r3, r7, #32
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f4:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <MX_TIM2_Init+0xe4>)
 80015f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10 -1 ;
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <MX_TIM2_Init+0xe4>)
 80015fe:	2209      	movs	r2, #9
 8001600:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_TIM2_Init+0xe4>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4-1;
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <MX_TIM2_Init+0xe4>)
 800160a:	2203      	movs	r2, #3
 800160c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_TIM2_Init+0xe4>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_TIM2_Init+0xe4>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800161a:	4823      	ldr	r0, [pc, #140]	; (80016a8 <MX_TIM2_Init+0xe4>)
 800161c:	f002 f994 	bl	8003948 <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001626:	f7ff fedb 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001634:	4619      	mov	r1, r3
 8001636:	481c      	ldr	r0, [pc, #112]	; (80016a8 <MX_TIM2_Init+0xe4>)
 8001638:	f002 fc86 	bl	8003f48 <HAL_TIM_ConfigClockSource>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001642:	f7ff fecd 	bl	80013e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_TIM2_Init+0xe4>)
 8001648:	f002 fab2 	bl	8003bb0 <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001652:	f7ff fec5 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	4619      	mov	r1, r3
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <MX_TIM2_Init+0xe4>)
 8001666:	f003 f803 	bl	8004670 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001670:	f7ff feb6 	bl	80013e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	; 0x60
 8001676:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2208      	movs	r2, #8
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM2_Init+0xe4>)
 800168c:	f002 fb9a 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001696:	f7ff fea3 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM2_Init+0xe4>)
 800169c:	f000 f88a 	bl	80017b4 <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3738      	adds	r7, #56	; 0x38
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000a10 	.word	0x20000a10

080016ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM3_Init+0x94>)
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <MX_TIM3_Init+0x98>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_TIM3_Init+0x94>)
 80016d0:	224f      	movs	r2, #79	; 0x4f
 80016d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM3_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MX_TIM3_Init+0x94>)
 80016dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_TIM3_Init+0x94>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_TIM3_Init+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ee:	4814      	ldr	r0, [pc, #80]	; (8001740 <MX_TIM3_Init+0x94>)
 80016f0:	f002 f92a 	bl	8003948 <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016fa:	f7ff fe71 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001702:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <MX_TIM3_Init+0x94>)
 800170c:	f002 fc1c 	bl	8003f48 <HAL_TIM_ConfigClockSource>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001716:	f7ff fe63 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800171a:	2320      	movs	r3, #32
 800171c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001722:	463b      	mov	r3, r7
 8001724:	4619      	mov	r1, r3
 8001726:	4806      	ldr	r0, [pc, #24]	; (8001740 <MX_TIM3_Init+0x94>)
 8001728:	f002 ffa2 	bl	8004670 <HAL_TIMEx_MasterConfigSynchronization>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001732:	f7ff fe55 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000a58 	.word	0x20000a58
 8001744:	40000400 	.word	0x40000400

08001748 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_TIM_Base_MspInit+0x64>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <HAL_TIM_Base_MspInit+0x64>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_TIM_Base_MspInit+0x64>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001776:	e012      	b.n	800179e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <HAL_TIM_Base_MspInit+0x68>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10d      	bne.n	800179e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_TIM_Base_MspInit+0x64>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_TIM_Base_MspInit+0x64>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_TIM_Base_MspInit+0x64>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40000400 	.word	0x40000400

080017b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d4:	d11e      	bne.n	8001814 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_TIM_MspPostInit+0x68>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_TIM_MspPostInit+0x68>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_TIM_MspPostInit+0x68>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001804:	2301      	movs	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <HAL_TIM_MspPostInit+0x6c>)
 8001810:	f001 fa5a 	bl	8002cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400

08001824 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <MX_USART2_UART_Init+0x50>)
 800182c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 8001830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 800184a:	220c      	movs	r2, #12
 800184c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_USART2_UART_Init+0x4c>)
 800185c:	f002 ff76 	bl	800474c <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001866:	f7ff fdbb 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000aa0 	.word	0x20000aa0
 8001874:	40004400 	.word	0x40004400

08001878 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_UART_MspInit+0x84>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12b      	bne.n	80018f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_UART_MspInit+0x88>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_UART_MspInit+0x88>)
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_UART_MspInit+0x88>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_UART_MspInit+0x88>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <HAL_UART_MspInit+0x88>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_UART_MspInit+0x88>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d2:	230c      	movs	r3, #12
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <HAL_UART_MspInit+0x8c>)
 80018ee:	f001 f9eb 	bl	8002cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40004400 	.word	0x40004400
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000

08001908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001940 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800190e:	490e      	ldr	r1, [pc, #56]	; (8001948 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001924:	4c0b      	ldr	r4, [pc, #44]	; (8001954 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001932:	f7ff fe35 	bl	80015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001936:	f003 fb89 	bl	800504c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193a:	f7ff fcbb 	bl	80012b4 <main>
  bx  lr    
 800193e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800194c:	08006a9c 	.word	0x08006a9c
  ldr r2, =_sbss
 8001950:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001954:	20000af8 	.word	0x20000af8

08001958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC_IRQHandler>
	...

0800195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_Init+0x40>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_Init+0x40>)
 8001972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x40>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 fd7d 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	200f      	movs	r0, #15
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fd2c 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fd95 	bl	80024ee <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019dc:	f000 fd5d 	bl	800249a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000004 	.word	0x20000004

08001a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000ae4 	.word	0x20000ae4

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000ae4 	.word	0x20000ae4

08001a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e033      	b.n	8001abe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fde4 	bl	800062c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d118      	bne.n	8001ab0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a86:	f023 0302 	bic.w	r3, r3, #2
 8001a8a:	f043 0202 	orr.w	r2, r3, #2
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 faa8 	bl	8001fe8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f023 0303 	bic.w	r3, r3, #3
 8001aa6:	f043 0201 	orr.w	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40
 8001aae:	e001      	b.n	8001ab4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Start_DMA+0x1e>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e0ce      	b.n	8001c84 <HAL_ADC_Start_DMA+0x1bc>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d018      	beq.n	8001b2e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0c:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <HAL_ADC_Start_DMA+0x1c4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a5f      	ldr	r2, [pc, #380]	; (8001c90 <HAL_ADC_Start_DMA+0x1c8>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9a      	lsrs	r2, r3, #18
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b20:	e002      	b.n	8001b28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f9      	bne.n	8001b22 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3c:	d107      	bne.n	8001b4e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	f040 8086 	bne.w	8001c6a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9c:	d106      	bne.n	8001bac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f023 0206 	bic.w	r2, r3, #6
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44
 8001baa:	e002      	b.n	8001bb2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bba:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_ADC_Start_DMA+0x1cc>)
 8001bbc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	4a35      	ldr	r2, [pc, #212]	; (8001c98 <HAL_ADC_Start_DMA+0x1d0>)
 8001bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	4a34      	ldr	r2, [pc, #208]	; (8001c9c <HAL_ADC_Start_DMA+0x1d4>)
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <HAL_ADC_Start_DMA+0x1d8>)
 8001bd4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bde:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bfe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	334c      	adds	r3, #76	; 0x4c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f000 fd28 	bl	8002664 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10f      	bne.n	8001c40 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d129      	bne.n	8001c82 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	e020      	b.n	8001c82 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_ADC_Start_DMA+0x1dc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d11b      	bne.n	8001c82 <HAL_ADC_Start_DMA+0x1ba>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d114      	bne.n	8001c82 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	e00b      	b.n	8001c82 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0210 	orr.w	r2, r3, #16
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f043 0201 	orr.w	r2, r3, #1
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	431bde83 	.word	0x431bde83
 8001c94:	40012300 	.word	0x40012300
 8001c98:	080021e1 	.word	0x080021e1
 8001c9c:	0800229b 	.word	0x0800229b
 8001ca0:	080022b7 	.word	0x080022b7
 8001ca4:	40012000 	.word	0x40012000

08001ca8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Stop_DMA+0x1a>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e048      	b.n	8001d54 <HAL_ADC_Stop_DMA+0xac>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d130      	bne.n	8001d4a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cf6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d10f      	bne.n	8001d26 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fd02 	bl	8002714 <HAL_DMA_Abort>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d34:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1c>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e113      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x244>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d925      	bls.n	8001dfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68d9      	ldr	r1, [r3, #12]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68d9      	ldr	r1, [r3, #12]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	4603      	mov	r3, r0
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4403      	add	r3, r0
 8001dee:	3b1e      	subs	r3, #30
 8001df0:	409a      	lsls	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	e022      	b.n	8001e42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6919      	ldr	r1, [r3, #16]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	2207      	movs	r2, #7
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6919      	ldr	r1, [r3, #16]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4403      	add	r3, r0
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d824      	bhi.n	8001e94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b05      	subs	r3, #5
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	400a      	ands	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b05      	subs	r3, #5
 8001e86:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
 8001e92:	e04c      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d824      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b23      	subs	r3, #35	; 0x23
 8001eae:	221f      	movs	r2, #31
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	400a      	ands	r2, r1
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b23      	subs	r3, #35	; 0x23
 8001ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee4:	e023      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b41      	subs	r3, #65	; 0x41
 8001ef8:	221f      	movs	r2, #31
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	400a      	ands	r2, r1
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b41      	subs	r3, #65	; 0x41
 8001f22:	fa00 f203 	lsl.w	r2, r0, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f2e:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <HAL_ADC_ConfigChannel+0x250>)
 8001f30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a28      	ldr	r2, [pc, #160]	; (8001fd8 <HAL_ADC_ConfigChannel+0x254>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d10f      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1d8>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b12      	cmp	r3, #18
 8001f42:	d10b      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_ADC_ConfigChannel+0x254>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d12b      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x23a>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_ADC_ConfigChannel+0x258>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d003      	beq.n	8001f78 <HAL_ADC_ConfigChannel+0x1f4>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b11      	cmp	r3, #17
 8001f76:	d122      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <HAL_ADC_ConfigChannel+0x258>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d111      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_ADC_ConfigChannel+0x25c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <HAL_ADC_ConfigChannel+0x260>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	0c9a      	lsrs	r2, r3, #18
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb0:	e002      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f9      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40012300 	.word	0x40012300
 8001fd8:	40012000 	.word	0x40012000
 8001fdc:	10000012 	.word	0x10000012
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	431bde83 	.word	0x431bde83

08001fe8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ff0:	4b79      	ldr	r3, [pc, #484]	; (80021d8 <ADC_Init+0x1f0>)
 8001ff2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	431a      	orrs	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800201c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	021a      	lsls	r2, r3, #8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002062:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6899      	ldr	r1, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	4a58      	ldr	r2, [pc, #352]	; (80021dc <ADC_Init+0x1f4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800208e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6899      	ldr	r1, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6899      	ldr	r1, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	e00f      	b.n	80020e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0202 	bic.w	r2, r2, #2
 80020f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7e1b      	ldrb	r3, [r3, #24]
 8002100:	005a      	lsls	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01b      	beq.n	800214c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002122:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002132:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	3b01      	subs	r3, #1
 8002140:	035a      	lsls	r2, r3, #13
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	e007      	b.n	800215c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	3b01      	subs	r3, #1
 8002178:	051a      	lsls	r2, r3, #20
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6899      	ldr	r1, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800219e:	025a      	lsls	r2, r3, #9
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6899      	ldr	r1, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	029a      	lsls	r2, r3, #10
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	609a      	str	r2, [r3, #8]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	40012300 	.word	0x40012300
 80021dc:	0f000001 	.word	0x0f000001

080021e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d13c      	bne.n	8002274 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d12b      	bne.n	800226c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002218:	2b00      	cmp	r3, #0
 800221a:	d127      	bne.n	800226c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002234:	2b00      	cmp	r3, #0
 8002236:	d119      	bne.n	800226c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0220 	bic.w	r2, r2, #32
 8002246:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7fe fe87 	bl	8000f80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002272:	e00e      	b.n	8002292 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7ff fd75 	bl	8001d70 <HAL_ADC_ErrorCallback>
}
 8002286:	e004      	b.n	8002292 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7ff fd57 	bl	8001d5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2240      	movs	r2, #64	; 0x40
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f043 0204 	orr.w	r2, r3, #4
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f7ff fd4a 	bl	8001d70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800230c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002316:	4a04      	ldr	r2, [pc, #16]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0b      	blt.n	8002372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4907      	ldr	r1, [pc, #28]	; (8002380 <__NVIC_EnableIRQ+0x38>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2001      	movs	r0, #1
 800236a:	fa00 f202 	lsl.w	r2, r0, r2
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100

08002384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	db0a      	blt.n	80023ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	490c      	ldr	r1, [pc, #48]	; (80023d0 <__NVIC_SetPriority+0x4c>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ac:	e00a      	b.n	80023c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4908      	ldr	r1, [pc, #32]	; (80023d4 <__NVIC_SetPriority+0x50>)
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	3b04      	subs	r3, #4
 80023bc:	0112      	lsls	r2, r2, #4
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	440b      	add	r3, r1
 80023c2:	761a      	strb	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f1c3 0307 	rsb	r3, r3, #7
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	bf28      	it	cs
 80023f6:	2304      	movcs	r3, #4
 80023f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d902      	bls.n	8002408 <NVIC_EncodePriority+0x30>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3b03      	subs	r3, #3
 8002406:	e000      	b.n	800240a <NVIC_EncodePriority+0x32>
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	401a      	ands	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	43d9      	mvns	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	4313      	orrs	r3, r2
         );
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002450:	d301      	bcc.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <SysTick_Config+0x40>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	210f      	movs	r1, #15
 8002460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002464:	f7ff ff8e 	bl	8002384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SysTick_Config+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <SysTick_Config+0x40>)
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff29 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff ff3e 	bl	800232c <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff8e 	bl	80023d8 <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5d 	bl	8002384 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff31 	bl	8002348 <__NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ffa2 	bl	8002440 <SysTick_Config>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff fa88 	bl	8001a28 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e099      	b.n	8002658 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002544:	e00f      	b.n	8002566 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002546:	f7ff fa6f 	bl	8001a28 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b05      	cmp	r3, #5
 8002552:	d908      	bls.n	8002566 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2203      	movs	r2, #3
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e078      	b.n	8002658 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e8      	bne.n	8002546 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4b38      	ldr	r3, [pc, #224]	; (8002660 <HAL_DMA_Init+0x158>)
 8002580:	4013      	ands	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002592:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d107      	bne.n	80025d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	4313      	orrs	r3, r2
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f023 0307 	bic.w	r3, r3, #7
 80025e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d117      	bne.n	800262a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00e      	beq.n	800262a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fadf 	bl	8002bd0 <DMA_CheckFifoParam>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2240      	movs	r2, #64	; 0x40
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002626:	2301      	movs	r3, #1
 8002628:	e016      	b.n	8002658 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa96 	bl	8002b64 <DMA_CalcBaseAndBitshift>
 8002638:	4603      	mov	r3, r0
 800263a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002640:	223f      	movs	r2, #63	; 0x3f
 8002642:	409a      	lsls	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	f010803f 	.word	0xf010803f

08002664 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_DMA_Start_IT+0x26>
 8002686:	2302      	movs	r3, #2
 8002688:	e040      	b.n	800270c <HAL_DMA_Start_IT+0xa8>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d12f      	bne.n	80026fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa28 	bl	8002b08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	223f      	movs	r2, #63	; 0x3f
 80026be:	409a      	lsls	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0216 	orr.w	r2, r2, #22
 80026d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0208 	orr.w	r2, r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e005      	b.n	800270a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002706:	2302      	movs	r3, #2
 8002708:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800270a:	7dfb      	ldrb	r3, [r7, #23]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002722:	f7ff f981 	bl	8001a28 <HAL_GetTick>
 8002726:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d008      	beq.n	8002746 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2280      	movs	r2, #128	; 0x80
 8002738:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e052      	b.n	80027ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0216 	bic.w	r2, r2, #22
 8002754:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002764:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <HAL_DMA_Abort+0x62>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0208 	bic.w	r2, r2, #8
 8002784:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002796:	e013      	b.n	80027c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002798:	f7ff f946 	bl	8001a28 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d90c      	bls.n	80027c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2203      	movs	r2, #3
 80027b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e015      	b.n	80027ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1e4      	bne.n	8002798 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d2:	223f      	movs	r2, #63	; 0x3f
 80027d4:	409a      	lsls	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002800:	4b8e      	ldr	r3, [pc, #568]	; (8002a3c <HAL_DMA_IRQHandler+0x248>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a8e      	ldr	r2, [pc, #568]	; (8002a40 <HAL_DMA_IRQHandler+0x24c>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	2208      	movs	r2, #8
 8002820:	409a      	lsls	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01a      	beq.n	8002860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0204 	bic.w	r2, r2, #4
 8002846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	2208      	movs	r2, #8
 800284e:	409a      	lsls	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2201      	movs	r2, #1
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2201      	movs	r2, #1
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0202 	orr.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	2204      	movs	r2, #4
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	2204      	movs	r2, #4
 80028ba:	409a      	lsls	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	f043 0204 	orr.w	r2, r3, #4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2210      	movs	r2, #16
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d043      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d03c      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	2210      	movs	r2, #16
 80028f0:	409a      	lsls	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d018      	beq.n	8002936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d024      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
 8002922:	e01f      	b.n	8002964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01b      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
 8002934:	e016      	b.n	8002964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0208 	bic.w	r2, r2, #8
 8002952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	2220      	movs	r2, #32
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 808f 	beq.w	8002a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8087 	beq.w	8002a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	2220      	movs	r2, #32
 800298c:	409a      	lsls	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b05      	cmp	r3, #5
 800299c:	d136      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0216 	bic.w	r2, r2, #22
 80029ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <HAL_DMA_IRQHandler+0x1da>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0208 	bic.w	r2, r2, #8
 80029dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	223f      	movs	r2, #63	; 0x3f
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d07e      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
        }
        return;
 8002a0a:	e079      	b.n	8002b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d031      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
 8002a38:	e02c      	b.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
 8002a3a:	bf00      	nop
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d023      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
 8002a54:	e01e      	b.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10f      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0210 	bic.w	r2, r2, #16
 8002a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d032      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d022      	beq.n	8002aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2205      	movs	r2, #5
 8002aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d307      	bcc.n	8002adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f2      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x2cc>
 8002ada:	e000      	b.n	8002ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
 8002afe:	e000      	b.n	8002b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b00:	bf00      	nop
    }
  }
}
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d108      	bne.n	8002b48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b46:	e007      	b.n	8002b58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3b10      	subs	r3, #16
 8002b74:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <DMA_CalcBaseAndBitshift+0x68>)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d909      	bls.n	8002ba6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b9a:	f023 0303 	bic.w	r3, r3, #3
 8002b9e:	1d1a      	adds	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ba4:	e007      	b.n	8002bb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	aaaaaaab 	.word	0xaaaaaaab
 8002bcc:	080068e8 	.word	0x080068e8

08002bd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11f      	bne.n	8002c2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d856      	bhi.n	8002c9e <DMA_CheckFifoParam+0xce>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <DMA_CheckFifoParam+0x28>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c1b 	.word	0x08002c1b
 8002c00:	08002c09 	.word	0x08002c09
 8002c04:	08002c9f 	.word	0x08002c9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d046      	beq.n	8002ca2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e043      	b.n	8002ca2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c22:	d140      	bne.n	8002ca6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e03d      	b.n	8002ca6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c32:	d121      	bne.n	8002c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d837      	bhi.n	8002caa <DMA_CheckFifoParam+0xda>
 8002c3a:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <DMA_CheckFifoParam+0x70>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c57 	.word	0x08002c57
 8002c48:	08002c51 	.word	0x08002c51
 8002c4c:	08002c69 	.word	0x08002c69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      break;
 8002c54:	e030      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d025      	beq.n	8002cae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c66:	e022      	b.n	8002cae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c70:	d11f      	bne.n	8002cb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c76:	e01c      	b.n	8002cb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d903      	bls.n	8002c86 <DMA_CheckFifoParam+0xb6>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d003      	beq.n	8002c8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c84:	e018      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8a:	e015      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00e      	beq.n	8002cb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9c:	e00b      	b.n	8002cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e00a      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e008      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e006      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e004      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e002      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e159      	b.n	8002f98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	f040 8148 	bne.w	8002f92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d005      	beq.n	8002d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d130      	bne.n	8002d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	2203      	movs	r2, #3
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d50:	2201      	movs	r2, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 0201 	and.w	r2, r3, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d017      	beq.n	8002db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d123      	bne.n	8002e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	08da      	lsrs	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3208      	adds	r2, #8
 8002dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0203 	and.w	r2, r3, #3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a2 	beq.w	8002f92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b57      	ldr	r3, [pc, #348]	; (8002fb0 <HAL_GPIO_Init+0x2e8>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	4a56      	ldr	r2, [pc, #344]	; (8002fb0 <HAL_GPIO_Init+0x2e8>)
 8002e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5e:	4b54      	ldr	r3, [pc, #336]	; (8002fb0 <HAL_GPIO_Init+0x2e8>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e6a:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_GPIO_Init+0x2ec>)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	220f      	movs	r2, #15
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a49      	ldr	r2, [pc, #292]	; (8002fb8 <HAL_GPIO_Init+0x2f0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d019      	beq.n	8002eca <HAL_GPIO_Init+0x202>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a48      	ldr	r2, [pc, #288]	; (8002fbc <HAL_GPIO_Init+0x2f4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_GPIO_Init+0x1fe>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a47      	ldr	r2, [pc, #284]	; (8002fc0 <HAL_GPIO_Init+0x2f8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_GPIO_Init+0x1fa>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a46      	ldr	r2, [pc, #280]	; (8002fc4 <HAL_GPIO_Init+0x2fc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <HAL_GPIO_Init+0x1f6>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a45      	ldr	r2, [pc, #276]	; (8002fc8 <HAL_GPIO_Init+0x300>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_GPIO_Init+0x1f2>
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	e008      	b.n	8002ecc <HAL_GPIO_Init+0x204>
 8002eba:	2307      	movs	r3, #7
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x204>
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e004      	b.n	8002ecc <HAL_GPIO_Init+0x204>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e002      	b.n	8002ecc <HAL_GPIO_Init+0x204>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_GPIO_Init+0x204>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	f002 0203 	and.w	r2, r2, #3
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	4093      	lsls	r3, r2
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002edc:	4935      	ldr	r1, [pc, #212]	; (8002fb4 <HAL_GPIO_Init+0x2ec>)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eea:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f0e:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f38:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f3e:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f62:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f68:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f8c:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <HAL_GPIO_Init+0x304>)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3301      	adds	r3, #1
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b0f      	cmp	r3, #15
 8002f9c:	f67f aea2 	bls.w	8002ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	3724      	adds	r7, #36	; 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	40020400 	.word	0x40020400
 8002fc0:	40020800 	.word	0x40020800
 8002fc4:	40020c00 	.word	0x40020c00
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40013c00 	.word	0x40013c00

08002fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
 8002fec:	e001      	b.n	8002ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
 800300c:	4613      	mov	r3, r2
 800300e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003010:	787b      	ldrb	r3, [r7, #1]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800301c:	e003      	b.n	8003026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	041a      	lsls	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003044:	887a      	ldrh	r2, [r7, #2]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	041a      	lsls	r2, r3, #16
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43d9      	mvns	r1, r3
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	400b      	ands	r3, r1
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	619a      	str	r2, [r3, #24]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d006      	beq.n	800308c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe f852 	bl	8001130 <HAL_GPIO_EXTI_Callback>
  }
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40013c00 	.word	0x40013c00

08003098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e267      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d075      	beq.n	80031a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030b6:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d00c      	beq.n	80030dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c2:	4b85      	ldr	r3, [pc, #532]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d112      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b82      	ldr	r3, [pc, #520]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	4b7e      	ldr	r3, [pc, #504]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05b      	beq.n	80031a0 <HAL_RCC_OscConfig+0x108>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d157      	bne.n	80031a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e242      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x74>
 80030fe:	4b76      	ldr	r3, [pc, #472]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x98>
 8003116:	4b70      	ldr	r3, [pc, #448]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6f      	ldr	r2, [pc, #444]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b6d      	ldr	r3, [pc, #436]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6c      	ldr	r2, [pc, #432]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 8003130:	4b69      	ldr	r3, [pc, #420]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a68      	ldr	r2, [pc, #416]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a65      	ldr	r2, [pc, #404]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fe fc6a 	bl	8001a28 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe fc66 	bl	8001a28 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e207      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b5b      	ldr	r3, [pc, #364]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xc0>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe fc56 	bl	8001a28 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe fc52 	bl	8001a28 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1f3      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	4b51      	ldr	r3, [pc, #324]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0xe8>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d063      	beq.n	8003276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b44      	ldr	r3, [pc, #272]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x152>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1c7      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4937      	ldr	r1, [pc, #220]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x244>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fc0b 	bl	8001a28 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003216:	f7fe fc07 	bl	8001a28 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1a8      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4925      	ldr	r1, [pc, #148]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCC_OscConfig+0x244>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fbea 	bl	8001a28 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003258:	f7fe fbe6 	bl	8001a28 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e187      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d036      	beq.n	80032f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_RCC_OscConfig+0x248>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fe fbca 	bl	8001a28 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003298:	f7fe fbc6 	bl	8001a28 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e167      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_OscConfig+0x240>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x200>
 80032b6:	e01b      	b.n	80032f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_OscConfig+0x248>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032be:	f7fe fbb3 	bl	8001a28 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	e00e      	b.n	80032e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fe fbaf 	bl	8001a28 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d907      	bls.n	80032e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e150      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
 80032d8:	40023800 	.word	0x40023800
 80032dc:	42470000 	.word	0x42470000
 80032e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	4b88      	ldr	r3, [pc, #544]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ea      	bne.n	80032c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8097 	beq.w	800342c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b81      	ldr	r3, [pc, #516]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	4b7d      	ldr	r3, [pc, #500]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a7c      	ldr	r2, [pc, #496]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b77      	ldr	r3, [pc, #476]	; (800350c <HAL_RCC_OscConfig+0x474>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333a:	4b74      	ldr	r3, [pc, #464]	; (800350c <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a73      	ldr	r2, [pc, #460]	; (800350c <HAL_RCC_OscConfig+0x474>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7fe fb6f 	bl	8001a28 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334e:	f7fe fb6b 	bl	8001a28 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e10c      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b6a      	ldr	r3, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x474>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x2ea>
 8003374:	4b64      	ldr	r3, [pc, #400]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a63      	ldr	r2, [pc, #396]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
 8003380:	e01c      	b.n	80033bc <HAL_RCC_OscConfig+0x324>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b05      	cmp	r3, #5
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x30c>
 800338a:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a5e      	ldr	r2, [pc, #376]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5b      	ldr	r2, [pc, #364]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0x324>
 80033a4:	4b58      	ldr	r3, [pc, #352]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	4b55      	ldr	r3, [pc, #340]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a54      	ldr	r2, [pc, #336]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0304 	bic.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe fb30 	bl	8001a28 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fe fb2c 	bl	8001a28 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0cb      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	4b49      	ldr	r3, [pc, #292]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ee      	beq.n	80033cc <HAL_RCC_OscConfig+0x334>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f0:	f7fe fb1a 	bl	8001a28 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fe fb16 	bl	8001a28 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0b5      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340e:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ee      	bne.n	80033f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003420:	4b39      	ldr	r3, [pc, #228]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80a1 	beq.w	8003578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003436:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b08      	cmp	r3, #8
 8003440:	d05c      	beq.n	80034fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d141      	bne.n	80034ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <HAL_RCC_OscConfig+0x478>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe faea 	bl	8001a28 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe fae6 	bl	8001a28 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e087      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	3b01      	subs	r3, #1
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	491b      	ldr	r1, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x478>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe fabf 	bl	8001a28 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fabb 	bl	8001a28 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e05c      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x416>
 80034cc:	e054      	b.n	8003578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_OscConfig+0x478>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe faa8 	bl	8001a28 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe faa4 	bl	8001a28 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e045      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x470>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x444>
 80034fa:	e03d      	b.n	8003578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e038      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
 8003508:	40023800 	.word	0x40023800
 800350c:	40007000 	.word	0x40007000
 8003510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x4ec>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d028      	beq.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d121      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d11a      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	3b01      	subs	r3, #1
 800355e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d107      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800

08003588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0cc      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b68      	ldr	r3, [pc, #416]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d90c      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b65      	ldr	r3, [pc, #404]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0b8      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035dc:	4b59      	ldr	r3, [pc, #356]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a58      	ldr	r2, [pc, #352]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b50      	ldr	r3, [pc, #320]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	494d      	ldr	r1, [pc, #308]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d044      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d119      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e07f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d003      	beq.n	8003646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	2b03      	cmp	r3, #3
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4b3f      	ldr	r3, [pc, #252]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e067      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4934      	ldr	r1, [pc, #208]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003678:	f7fe f9d6 	bl	8001a28 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7fe f9d2 	bl	8001a28 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e04f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 020c 	and.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1eb      	bne.n	8003680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d20c      	bcs.n	80036d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e032      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4916      	ldr	r1, [pc, #88]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	490e      	ldr	r1, [pc, #56]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800370e:	f000 f821 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8003712:	4602      	mov	r2, r0
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	490a      	ldr	r1, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	5ccb      	ldrb	r3, [r1, r3]
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	4a09      	ldr	r2, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe f936 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023c00 	.word	0x40023c00
 8003744:	40023800 	.word	0x40023800
 8003748:	080068d0 	.word	0x080068d0
 800374c:	20000000 	.word	0x20000000
 8003750:	20000004 	.word	0x20000004

08003754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b090      	sub	sp, #64	; 0x40
 800375a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
 8003760:	2300      	movs	r3, #0
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003764:	2300      	movs	r3, #0
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376c:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d00d      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x40>
 8003778:	2b08      	cmp	r3, #8
 800377a:	f200 80a1 	bhi.w	80038c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x34>
 8003782:	2b04      	cmp	r3, #4
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x3a>
 8003786:	e09b      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800378a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800378c:	e09b      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378e:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_GetSysClockFreq+0x188>)
 8003790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003792:	e098      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003794:	4b4f      	ldr	r3, [pc, #316]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800379c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379e:	4b4d      	ldr	r3, [pc, #308]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d028      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037aa:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	2200      	movs	r2, #0
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	627a      	str	r2, [r7, #36]	; 0x24
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037bc:	2100      	movs	r1, #0
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_GetSysClockFreq+0x188>)
 80037c0:	fb03 f201 	mul.w	r2, r3, r1
 80037c4:	2300      	movs	r3, #0
 80037c6:	fb00 f303 	mul.w	r3, r0, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	4a43      	ldr	r2, [pc, #268]	; (80038dc <HAL_RCC_GetSysClockFreq+0x188>)
 80037ce:	fba0 1202 	umull	r1, r2, r0, r2
 80037d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d4:	460a      	mov	r2, r1
 80037d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80037d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037da:	4413      	add	r3, r2
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e0:	2200      	movs	r2, #0
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	61fa      	str	r2, [r7, #28]
 80037e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037ee:	f7fc fd47 	bl	8000280 <__aeabi_uldivmod>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4613      	mov	r3, r2
 80037f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037fa:	e053      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fc:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	2200      	movs	r2, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	617a      	str	r2, [r7, #20]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800380e:	f04f 0b00 	mov.w	fp, #0
 8003812:	4652      	mov	r2, sl
 8003814:	465b      	mov	r3, fp
 8003816:	f04f 0000 	mov.w	r0, #0
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	0159      	lsls	r1, r3, #5
 8003820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003824:	0150      	lsls	r0, r2, #5
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	ebb2 080a 	subs.w	r8, r2, sl
 800382e:	eb63 090b 	sbc.w	r9, r3, fp
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800383e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003842:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003846:	ebb2 0408 	subs.w	r4, r2, r8
 800384a:	eb63 0509 	sbc.w	r5, r3, r9
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	00eb      	lsls	r3, r5, #3
 8003858:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385c:	00e2      	lsls	r2, r4, #3
 800385e:	4614      	mov	r4, r2
 8003860:	461d      	mov	r5, r3
 8003862:	eb14 030a 	adds.w	r3, r4, sl
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	eb45 030b 	adc.w	r3, r5, fp
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387a:	4629      	mov	r1, r5
 800387c:	028b      	lsls	r3, r1, #10
 800387e:	4621      	mov	r1, r4
 8003880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003884:	4621      	mov	r1, r4
 8003886:	028a      	lsls	r2, r1, #10
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388e:	2200      	movs	r2, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	60fa      	str	r2, [r7, #12]
 8003894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003898:	f7fc fcf2 	bl	8000280 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	3301      	adds	r3, #1
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038be:	e002      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80038c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3740      	adds	r7, #64	; 0x40
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	017d7840 	.word	0x017d7840

080038e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038fc:	f7ff fff0 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0a9b      	lsrs	r3, r3, #10
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <HAL_RCC_GetPCLK1Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	080068e0 	.word	0x080068e0

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003924:	f7ff ffdc 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0b5b      	lsrs	r3, r3, #13
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	080068e0 	.word	0x080068e0

08003948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e041      	b.n	80039de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd feea 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f000 fba6 	bl	80040d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d001      	beq.n	8003a00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e03c      	b.n	8003a7a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <HAL_TIM_Base_Start+0xa0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <HAL_TIM_Base_Start+0x5c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1a:	d013      	beq.n	8003a44 <HAL_TIM_Base_Start+0x5c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1a      	ldr	r2, [pc, #104]	; (8003a8c <HAL_TIM_Base_Start+0xa4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <HAL_TIM_Base_Start+0x5c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <HAL_TIM_Base_Start+0xa8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_TIM_Base_Start+0x5c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <HAL_TIM_Base_Start+0xac>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_TIM_Base_Start+0x5c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_TIM_Base_Start+0xb0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d111      	bne.n	8003a68 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d010      	beq.n	8003a78 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a66:	e007      	b.n	8003a78 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40014000 	.word	0x40014000

08003a9c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a1a      	ldr	r2, [r3, #32]
 8003aaa:	f241 1311 	movw	r3, #4369	; 0x1111
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10f      	bne.n	8003ad4 <HAL_TIM_Base_Stop+0x38>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6a1a      	ldr	r2, [r3, #32]
 8003aba:	f240 4344 	movw	r3, #1092	; 0x444
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_Base_Stop+0x38>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d001      	beq.n	8003b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e044      	b.n	8003b8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <HAL_TIM_Base_Start_IT+0xb0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x6c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2e:	d013      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x6c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x6c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x6c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a17      	ldr	r2, [pc, #92]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x6c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a16      	ldr	r2, [pc, #88]	; (8003bac <HAL_TIM_Base_Start_IT+0xc0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d111      	bne.n	8003b7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d010      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	e007      	b.n	8003b8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40000c00 	.word	0x40000c00
 8003bac:	40014000 	.word	0x40014000

08003bb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e041      	b.n	8003c46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f839 	bl	8003c4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f000 fa72 	bl	80040d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_TIM_PWM_Start+0x24>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e022      	b.n	8003cce <HAL_TIM_PWM_Start+0x6a>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d109      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0x3e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	bf14      	ite	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	e015      	b.n	8003cce <HAL_TIM_PWM_Start+0x6a>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d109      	bne.n	8003cbc <HAL_TIM_PWM_Start+0x58>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	bf14      	ite	ne
 8003cb4:	2301      	movne	r3, #1
 8003cb6:	2300      	moveq	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e008      	b.n	8003cce <HAL_TIM_PWM_Start+0x6a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e068      	b.n	8003da8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0x82>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ce4:	e013      	b.n	8003d0e <HAL_TIM_PWM_Start+0xaa>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d104      	bne.n	8003cf6 <HAL_TIM_PWM_Start+0x92>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf4:	e00b      	b.n	8003d0e <HAL_TIM_PWM_Start+0xaa>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_PWM_Start+0xa2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d04:	e003      	b.n	8003d0e <HAL_TIM_PWM_Start+0xaa>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2201      	movs	r2, #1
 8003d14:	6839      	ldr	r1, [r7, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fc84 	bl	8004624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <HAL_TIM_PWM_Start+0x14c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d107      	bne.n	8003d36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <HAL_TIM_PWM_Start+0x14c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x10e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d48:	d013      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x10e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <HAL_TIM_PWM_Start+0x150>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x10e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_TIM_PWM_Start+0x154>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x10e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <HAL_TIM_PWM_Start+0x158>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x10e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <HAL_TIM_PWM_Start+0x15c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d111      	bne.n	8003d96 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b06      	cmp	r3, #6
 8003d82:	d010      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d94:	e007      	b.n	8003da6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40014000 	.word	0x40014000

08003dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e0ae      	b.n	8003f40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0c      	cmp	r3, #12
 8003dee:	f200 809f 	bhi.w	8003f30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003f31 	.word	0x08003f31
 8003e00:	08003f31 	.word	0x08003f31
 8003e04:	08003f31 	.word	0x08003f31
 8003e08:	08003e6d 	.word	0x08003e6d
 8003e0c:	08003f31 	.word	0x08003f31
 8003e10:	08003f31 	.word	0x08003f31
 8003e14:	08003f31 	.word	0x08003f31
 8003e18:	08003eaf 	.word	0x08003eaf
 8003e1c:	08003f31 	.word	0x08003f31
 8003e20:	08003f31 	.word	0x08003f31
 8003e24:	08003f31 	.word	0x08003f31
 8003e28:	08003eef 	.word	0x08003eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f9d0 	bl	80041d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6999      	ldr	r1, [r3, #24]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	619a      	str	r2, [r3, #24]
      break;
 8003e6a:	e064      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fa16 	bl	80042a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6999      	ldr	r1, [r3, #24]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	021a      	lsls	r2, r3, #8
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	619a      	str	r2, [r3, #24]
      break;
 8003eac:	e043      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fa61 	bl	800437c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0208 	orr.w	r2, r2, #8
 8003ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0204 	bic.w	r2, r2, #4
 8003ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	61da      	str	r2, [r3, #28]
      break;
 8003eec:	e023      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 faab 	bl	8004450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	021a      	lsls	r2, r3, #8
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	61da      	str	r2, [r3, #28]
      break;
 8003f2e:	e002      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
      break;
 8003f34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_TIM_ConfigClockSource+0x1c>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e0b4      	b.n	80040ce <HAL_TIM_ConfigClockSource+0x186>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9c:	d03e      	beq.n	800401c <HAL_TIM_ConfigClockSource+0xd4>
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa2:	f200 8087 	bhi.w	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003faa:	f000 8086 	beq.w	80040ba <HAL_TIM_ConfigClockSource+0x172>
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	d87f      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb4:	2b70      	cmp	r3, #112	; 0x70
 8003fb6:	d01a      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0xa6>
 8003fb8:	2b70      	cmp	r3, #112	; 0x70
 8003fba:	d87b      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fbc:	2b60      	cmp	r3, #96	; 0x60
 8003fbe:	d050      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x11a>
 8003fc0:	2b60      	cmp	r3, #96	; 0x60
 8003fc2:	d877      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc4:	2b50      	cmp	r3, #80	; 0x50
 8003fc6:	d03c      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0xfa>
 8003fc8:	2b50      	cmp	r3, #80	; 0x50
 8003fca:	d873      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d058      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x13a>
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d86f      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b30      	cmp	r3, #48	; 0x30
 8003fd6:	d064      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fd8:	2b30      	cmp	r3, #48	; 0x30
 8003fda:	d86b      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d060      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d867      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d05c      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d05a      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fec:	e062      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6899      	ldr	r1, [r3, #8]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f000 faf1 	bl	80045e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	609a      	str	r2, [r3, #8]
      break;
 800401a:	e04f      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6899      	ldr	r1, [r3, #8]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f000 fada 	bl	80045e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403e:	609a      	str	r2, [r3, #8]
      break;
 8004040:	e03c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	461a      	mov	r2, r3
 8004050:	f000 fa4e 	bl	80044f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2150      	movs	r1, #80	; 0x50
 800405a:	4618      	mov	r0, r3
 800405c:	f000 faa7 	bl	80045ae <TIM_ITRx_SetConfig>
      break;
 8004060:	e02c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f000 fa6d 	bl	800454e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2160      	movs	r1, #96	; 0x60
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fa97 	bl	80045ae <TIM_ITRx_SetConfig>
      break;
 8004080:	e01c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	461a      	mov	r2, r3
 8004090:	f000 fa2e 	bl	80044f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2140      	movs	r1, #64	; 0x40
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fa87 	bl	80045ae <TIM_ITRx_SetConfig>
      break;
 80040a0:	e00c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f000 fa7e 	bl	80045ae <TIM_ITRx_SetConfig>
      break;
 80040b2:	e003      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
      break;
 80040b8:	e000      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a34      	ldr	r2, [pc, #208]	; (80041bc <TIM_Base_SetConfig+0xe4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00f      	beq.n	8004110 <TIM_Base_SetConfig+0x38>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f6:	d00b      	beq.n	8004110 <TIM_Base_SetConfig+0x38>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a31      	ldr	r2, [pc, #196]	; (80041c0 <TIM_Base_SetConfig+0xe8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d007      	beq.n	8004110 <TIM_Base_SetConfig+0x38>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a30      	ldr	r2, [pc, #192]	; (80041c4 <TIM_Base_SetConfig+0xec>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_Base_SetConfig+0x38>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a2f      	ldr	r2, [pc, #188]	; (80041c8 <TIM_Base_SetConfig+0xf0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d108      	bne.n	8004122 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a25      	ldr	r2, [pc, #148]	; (80041bc <TIM_Base_SetConfig+0xe4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01b      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004130:	d017      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <TIM_Base_SetConfig+0xe8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a21      	ldr	r2, [pc, #132]	; (80041c4 <TIM_Base_SetConfig+0xec>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00f      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <TIM_Base_SetConfig+0xf0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00b      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <TIM_Base_SetConfig+0xf4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <TIM_Base_SetConfig+0xf8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <TIM_Base_SetConfig+0xfc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d108      	bne.n	8004174 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a08      	ldr	r2, [pc, #32]	; (80041bc <TIM_Base_SetConfig+0xe4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d103      	bne.n	80041a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	615a      	str	r2, [r3, #20]
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40014400 	.word	0x40014400
 80041d4:	40014800 	.word	0x40014800

080041d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f023 0302 	bic.w	r3, r3, #2
 8004220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <TIM_OC1_SetConfig+0xc8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d10c      	bne.n	800424e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0308 	bic.w	r3, r3, #8
 800423a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <TIM_OC1_SetConfig+0xc8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d111      	bne.n	800427a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800425c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	621a      	str	r2, [r3, #32]
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40010000 	.word	0x40010000

080042a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f023 0210 	bic.w	r2, r3, #16
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f023 0320 	bic.w	r3, r3, #32
 80042ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <TIM_OC2_SetConfig+0xd4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d10d      	bne.n	8004320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <TIM_OC2_SetConfig+0xd4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d113      	bne.n	8004350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800432e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40010000 	.word	0x40010000

0800437c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a1d      	ldr	r2, [pc, #116]	; (800444c <TIM_OC3_SetConfig+0xd0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10d      	bne.n	80043f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <TIM_OC3_SetConfig+0xd0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d113      	bne.n	8004426 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800440c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	621a      	str	r2, [r3, #32]
}
 8004440:	bf00      	nop
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	40010000 	.word	0x40010000

08004450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800449a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	031b      	lsls	r3, r3, #12
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a10      	ldr	r2, [pc, #64]	; (80044ec <TIM_OC4_SetConfig+0x9c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d109      	bne.n	80044c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40010000 	.word	0x40010000

080044f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f023 0201 	bic.w	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800451a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f023 030a 	bic.w	r3, r3, #10
 800452c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800454e:	b480      	push	{r7}
 8004550:	b087      	sub	sp, #28
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f023 0210 	bic.w	r2, r3, #16
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800458a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f043 0307 	orr.w	r3, r3, #7
 80045d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	609a      	str	r2, [r3, #8]
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	021a      	lsls	r2, r3, #8
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	431a      	orrs	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4313      	orrs	r3, r2
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	bf00      	nop
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	2201      	movs	r2, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1a      	ldr	r2, [r3, #32]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	43db      	mvns	r3, r3
 8004646:	401a      	ands	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	fa01 f303 	lsl.w	r3, r1, r3
 800465c:	431a      	orrs	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004684:	2302      	movs	r3, #2
 8004686:	e050      	b.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d018      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d013      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a18      	ldr	r2, [pc, #96]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a16      	ldr	r2, [pc, #88]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d009      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a15      	ldr	r2, [pc, #84]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a13      	ldr	r2, [pc, #76]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d10c      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4313      	orrs	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40010000 	.word	0x40010000
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40000c00 	.word	0x40000c00
 8004748:	40014000 	.word	0x40014000

0800474c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e03f      	b.n	80047de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fd f880 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2224      	movs	r2, #36	; 0x24
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800478e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f9cb 	bl	8004b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b08a      	sub	sp, #40	; 0x28
 80047ea:	af02      	add	r7, sp, #8
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	4613      	mov	r3, r2
 80047f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b20      	cmp	r3, #32
 8004804:	d17c      	bne.n	8004900 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_UART_Transmit+0x2c>
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e075      	b.n	8004902 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_UART_Transmit+0x3e>
 8004820:	2302      	movs	r3, #2
 8004822:	e06e      	b.n	8004902 <HAL_UART_Transmit+0x11c>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2221      	movs	r2, #33	; 0x21
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800483a:	f7fd f8f5 	bl	8001a28 <HAL_GetTick>
 800483e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004854:	d108      	bne.n	8004868 <HAL_UART_Transmit+0x82>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e003      	b.n	8004870 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004878:	e02a      	b.n	80048d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2200      	movs	r2, #0
 8004882:	2180      	movs	r1, #128	; 0x80
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f8e2 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e036      	b.n	8004902 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	3302      	adds	r3, #2
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	e007      	b.n	80048c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	3301      	adds	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1cf      	bne.n	800487a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2140      	movs	r1, #64	; 0x40
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f8b2 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e006      	b.n	8004902 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	e000      	b.n	8004902 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004900:	2302      	movs	r3, #2
  }
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b08a      	sub	sp, #40	; 0x28
 800490e:	af02      	add	r7, sp, #8
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	f040 808c 	bne.w	8004a44 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Receive+0x2e>
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e084      	b.n	8004a46 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_UART_Receive+0x40>
 8004946:	2302      	movs	r3, #2
 8004948:	e07d      	b.n	8004a46 <HAL_UART_Receive+0x13c>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2222      	movs	r2, #34	; 0x22
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004966:	f7fd f85f 	bl	8001a28 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004980:	d108      	bne.n	8004994 <HAL_UART_Receive+0x8a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e003      	b.n	800499c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80049a4:	e043      	b.n	8004a2e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2120      	movs	r1, #32
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f84c 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e042      	b.n	8004a46 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	3302      	adds	r3, #2
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e01f      	b.n	8004a20 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e8:	d007      	beq.n	80049fa <HAL_UART_Receive+0xf0>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <HAL_UART_Receive+0xfe>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	e008      	b.n	8004a1a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1b6      	bne.n	80049a6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e000      	b.n	8004a46 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
  }
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b090      	sub	sp, #64	; 0x40
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5e:	e050      	b.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a66:	d04c      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a6e:	f7fc ffdb 	bl	8001a28 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d241      	bcs.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a9e:	637a      	str	r2, [r7, #52]	; 0x34
 8004aa0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e5      	bne.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3314      	adds	r3, #20
 8004ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3314      	adds	r3, #20
 8004ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad2:	623a      	str	r2, [r7, #32]
 8004ad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	69f9      	ldr	r1, [r7, #28]
 8004ad8:	6a3a      	ldr	r2, [r7, #32]
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e5      	bne.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e00f      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	bf0c      	ite	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	2300      	movne	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d09f      	beq.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3740      	adds	r7, #64	; 0x40
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b30:	b0c0      	sub	sp, #256	; 0x100
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	68d9      	ldr	r1, [r3, #12]
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	ea40 0301 	orr.w	r3, r0, r1
 8004b54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b84:	f021 010c 	bic.w	r1, r1, #12
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b92:	430b      	orrs	r3, r1
 8004b94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba6:	6999      	ldr	r1, [r3, #24]
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	ea40 0301 	orr.w	r3, r0, r1
 8004bb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4b8f      	ldr	r3, [pc, #572]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d005      	beq.n	8004bcc <UART_SetConfig+0xa0>
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b8d      	ldr	r3, [pc, #564]	; (8004dfc <UART_SetConfig+0x2d0>)
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d104      	bne.n	8004bd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bcc:	f7fe fea8 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8004bd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bd4:	e003      	b.n	8004bde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bd6:	f7fe fe8f 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 8004bda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be8:	f040 810c 	bne.w	8004e04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bfe:	4622      	mov	r2, r4
 8004c00:	462b      	mov	r3, r5
 8004c02:	1891      	adds	r1, r2, r2
 8004c04:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c06:	415b      	adcs	r3, r3
 8004c08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c0e:	4621      	mov	r1, r4
 8004c10:	eb12 0801 	adds.w	r8, r2, r1
 8004c14:	4629      	mov	r1, r5
 8004c16:	eb43 0901 	adc.w	r9, r3, r1
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2e:	4690      	mov	r8, r2
 8004c30:	4699      	mov	r9, r3
 8004c32:	4623      	mov	r3, r4
 8004c34:	eb18 0303 	adds.w	r3, r8, r3
 8004c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	eb49 0303 	adc.w	r3, r9, r3
 8004c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	18db      	adds	r3, r3, r3
 8004c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c60:	4613      	mov	r3, r2
 8004c62:	eb42 0303 	adc.w	r3, r2, r3
 8004c66:	657b      	str	r3, [r7, #84]	; 0x54
 8004c68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c70:	f7fb fb06 	bl	8000280 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4b61      	ldr	r3, [pc, #388]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	011c      	lsls	r4, r3, #4
 8004c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	1891      	adds	r1, r2, r2
 8004c9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c9c:	415b      	adcs	r3, r3
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	eb12 0a01 	adds.w	sl, r2, r1
 8004caa:	4649      	mov	r1, r9
 8004cac:	eb43 0b01 	adc.w	fp, r3, r1
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cc4:	4692      	mov	sl, r2
 8004cc6:	469b      	mov	fp, r3
 8004cc8:	4643      	mov	r3, r8
 8004cca:	eb1a 0303 	adds.w	r3, sl, r3
 8004cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	eb4b 0303 	adc.w	r3, fp, r3
 8004cd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ce8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004cec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	18db      	adds	r3, r3, r3
 8004cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	eb42 0303 	adc.w	r3, r2, r3
 8004cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d06:	f7fb fabb 	bl	8000280 <__aeabi_uldivmod>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004d12:	fba3 2301 	umull	r2, r3, r3, r1
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	2264      	movs	r2, #100	; 0x64
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	1acb      	subs	r3, r1, r3
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004d28:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d34:	441c      	add	r4, r3
 8004d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d48:	4642      	mov	r2, r8
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	1891      	adds	r1, r2, r2
 8004d4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d50:	415b      	adcs	r3, r3
 8004d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d58:	4641      	mov	r1, r8
 8004d5a:	1851      	adds	r1, r2, r1
 8004d5c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d5e:	4649      	mov	r1, r9
 8004d60:	414b      	adcs	r3, r1
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d70:	4659      	mov	r1, fp
 8004d72:	00cb      	lsls	r3, r1, #3
 8004d74:	4651      	mov	r1, sl
 8004d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	00ca      	lsls	r2, r1, #3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	4619      	mov	r1, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	4642      	mov	r2, r8
 8004d86:	189b      	adds	r3, r3, r2
 8004d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	460a      	mov	r2, r1
 8004d90:	eb42 0303 	adc.w	r3, r2, r3
 8004d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004da4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004da8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dac:	460b      	mov	r3, r1
 8004dae:	18db      	adds	r3, r3, r3
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db2:	4613      	mov	r3, r2
 8004db4:	eb42 0303 	adc.w	r3, r2, r3
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dc2:	f7fb fa5d 	bl	8000280 <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	2164      	movs	r1, #100	; 0x64
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	3332      	adds	r3, #50	; 0x32
 8004dde:	4a08      	ldr	r2, [pc, #32]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004de0:	fba2 2303 	umull	r2, r3, r2, r3
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	f003 0207 	and.w	r2, r3, #7
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4422      	add	r2, r4
 8004df2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004df4:	e105      	b.n	8005002 <UART_SetConfig+0x4d6>
 8004df6:	bf00      	nop
 8004df8:	40011000 	.word	0x40011000
 8004dfc:	40011400 	.word	0x40011400
 8004e00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e16:	4642      	mov	r2, r8
 8004e18:	464b      	mov	r3, r9
 8004e1a:	1891      	adds	r1, r2, r2
 8004e1c:	6239      	str	r1, [r7, #32]
 8004e1e:	415b      	adcs	r3, r3
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
 8004e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e26:	4641      	mov	r1, r8
 8004e28:	1854      	adds	r4, r2, r1
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	eb43 0501 	adc.w	r5, r3, r1
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	00eb      	lsls	r3, r5, #3
 8004e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e3e:	00e2      	lsls	r2, r4, #3
 8004e40:	4614      	mov	r4, r2
 8004e42:	461d      	mov	r5, r3
 8004e44:	4643      	mov	r3, r8
 8004e46:	18e3      	adds	r3, r4, r3
 8004e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	eb45 0303 	adc.w	r3, r5, r3
 8004e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e72:	4629      	mov	r1, r5
 8004e74:	008b      	lsls	r3, r1, #2
 8004e76:	4621      	mov	r1, r4
 8004e78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	008a      	lsls	r2, r1, #2
 8004e80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e84:	f7fb f9fc 	bl	8000280 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4b60      	ldr	r3, [pc, #384]	; (8005010 <UART_SetConfig+0x4e4>)
 8004e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	011c      	lsls	r4, r3, #4
 8004e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ea0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ea4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	464b      	mov	r3, r9
 8004eac:	1891      	adds	r1, r2, r2
 8004eae:	61b9      	str	r1, [r7, #24]
 8004eb0:	415b      	adcs	r3, r3
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb8:	4641      	mov	r1, r8
 8004eba:	1851      	adds	r1, r2, r1
 8004ebc:	6139      	str	r1, [r7, #16]
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	414b      	adcs	r3, r1
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	00cb      	lsls	r3, r1, #3
 8004ed4:	4651      	mov	r1, sl
 8004ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eda:	4651      	mov	r1, sl
 8004edc:	00ca      	lsls	r2, r1, #3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004eec:	464b      	mov	r3, r9
 8004eee:	460a      	mov	r2, r1
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f10:	4649      	mov	r1, r9
 8004f12:	008b      	lsls	r3, r1, #2
 8004f14:	4641      	mov	r1, r8
 8004f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	008a      	lsls	r2, r1, #2
 8004f1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f22:	f7fb f9ad 	bl	8000280 <__aeabi_uldivmod>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4b39      	ldr	r3, [pc, #228]	; (8005010 <UART_SetConfig+0x4e4>)
 8004f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	2164      	movs	r1, #100	; 0x64
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	3332      	adds	r3, #50	; 0x32
 8004f3e:	4a34      	ldr	r2, [pc, #208]	; (8005010 <UART_SetConfig+0x4e4>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4a:	441c      	add	r4, r3
 8004f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f50:	2200      	movs	r2, #0
 8004f52:	673b      	str	r3, [r7, #112]	; 0x70
 8004f54:	677a      	str	r2, [r7, #116]	; 0x74
 8004f56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f5a:	4642      	mov	r2, r8
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	1891      	adds	r1, r2, r2
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	415b      	adcs	r3, r3
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f6a:	4641      	mov	r1, r8
 8004f6c:	1851      	adds	r1, r2, r1
 8004f6e:	6039      	str	r1, [r7, #0]
 8004f70:	4649      	mov	r1, r9
 8004f72:	414b      	adcs	r3, r1
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f82:	4659      	mov	r1, fp
 8004f84:	00cb      	lsls	r3, r1, #3
 8004f86:	4651      	mov	r1, sl
 8004f88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f8c:	4651      	mov	r1, sl
 8004f8e:	00ca      	lsls	r2, r1, #3
 8004f90:	4610      	mov	r0, r2
 8004f92:	4619      	mov	r1, r3
 8004f94:	4603      	mov	r3, r0
 8004f96:	4642      	mov	r2, r8
 8004f98:	189b      	adds	r3, r3, r2
 8004f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	eb42 0303 	adc.w	r3, r2, r3
 8004fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	663b      	str	r3, [r7, #96]	; 0x60
 8004fb0:	667a      	str	r2, [r7, #100]	; 0x64
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	008b      	lsls	r3, r1, #2
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc8:	4641      	mov	r1, r8
 8004fca:	008a      	lsls	r2, r1, #2
 8004fcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fd0:	f7fb f956 	bl	8000280 <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <UART_SetConfig+0x4e4>)
 8004fda:	fba3 1302 	umull	r1, r3, r3, r2
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	2164      	movs	r1, #100	; 0x64
 8004fe2:	fb01 f303 	mul.w	r3, r1, r3
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	3332      	adds	r3, #50	; 0x32
 8004fec:	4a08      	ldr	r2, [pc, #32]	; (8005010 <UART_SetConfig+0x4e4>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	f003 020f 	and.w	r2, r3, #15
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4422      	add	r2, r4
 8005000:	609a      	str	r2, [r3, #8]
}
 8005002:	bf00      	nop
 8005004:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005008:	46bd      	mov	sp, r7
 800500a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800500e:	bf00      	nop
 8005010:	51eb851f 	.word	0x51eb851f

08005014 <atoi>:
 8005014:	220a      	movs	r2, #10
 8005016:	2100      	movs	r1, #0
 8005018:	f000 b9ba 	b.w	8005390 <strtol>

0800501c <__errno>:
 800501c:	4b01      	ldr	r3, [pc, #4]	; (8005024 <__errno+0x8>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	2000000c 	.word	0x2000000c

08005028 <getchar>:
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <getchar+0x20>)
 800502a:	b510      	push	{r4, lr}
 800502c:	681c      	ldr	r4, [r3, #0]
 800502e:	b124      	cbz	r4, 800503a <getchar+0x12>
 8005030:	69a3      	ldr	r3, [r4, #24]
 8005032:	b913      	cbnz	r3, 800503a <getchar+0x12>
 8005034:	4620      	mov	r0, r4
 8005036:	f000 fae1 	bl	80055fc <__sinit>
 800503a:	6861      	ldr	r1, [r4, #4]
 800503c:	4620      	mov	r0, r4
 800503e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005042:	f000 bb95 	b.w	8005770 <_getc_r>
 8005046:	bf00      	nop
 8005048:	2000000c 	.word	0x2000000c

0800504c <__libc_init_array>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4d0d      	ldr	r5, [pc, #52]	; (8005084 <__libc_init_array+0x38>)
 8005050:	4c0d      	ldr	r4, [pc, #52]	; (8005088 <__libc_init_array+0x3c>)
 8005052:	1b64      	subs	r4, r4, r5
 8005054:	10a4      	asrs	r4, r4, #2
 8005056:	2600      	movs	r6, #0
 8005058:	42a6      	cmp	r6, r4
 800505a:	d109      	bne.n	8005070 <__libc_init_array+0x24>
 800505c:	4d0b      	ldr	r5, [pc, #44]	; (800508c <__libc_init_array+0x40>)
 800505e:	4c0c      	ldr	r4, [pc, #48]	; (8005090 <__libc_init_array+0x44>)
 8005060:	f001 fa94 	bl	800658c <_init>
 8005064:	1b64      	subs	r4, r4, r5
 8005066:	10a4      	asrs	r4, r4, #2
 8005068:	2600      	movs	r6, #0
 800506a:	42a6      	cmp	r6, r4
 800506c:	d105      	bne.n	800507a <__libc_init_array+0x2e>
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	f855 3b04 	ldr.w	r3, [r5], #4
 8005074:	4798      	blx	r3
 8005076:	3601      	adds	r6, #1
 8005078:	e7ee      	b.n	8005058 <__libc_init_array+0xc>
 800507a:	f855 3b04 	ldr.w	r3, [r5], #4
 800507e:	4798      	blx	r3
 8005080:	3601      	adds	r6, #1
 8005082:	e7f2      	b.n	800506a <__libc_init_array+0x1e>
 8005084:	08006a94 	.word	0x08006a94
 8005088:	08006a94 	.word	0x08006a94
 800508c:	08006a94 	.word	0x08006a94
 8005090:	08006a98 	.word	0x08006a98

08005094 <memset>:
 8005094:	4402      	add	r2, r0
 8005096:	4603      	mov	r3, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	f803 1b01 	strb.w	r1, [r3], #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <iprintf>:
 80050a4:	b40f      	push	{r0, r1, r2, r3}
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <iprintf+0x2c>)
 80050a8:	b513      	push	{r0, r1, r4, lr}
 80050aa:	681c      	ldr	r4, [r3, #0]
 80050ac:	b124      	cbz	r4, 80050b8 <iprintf+0x14>
 80050ae:	69a3      	ldr	r3, [r4, #24]
 80050b0:	b913      	cbnz	r3, 80050b8 <iprintf+0x14>
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 faa2 	bl	80055fc <__sinit>
 80050b8:	ab05      	add	r3, sp, #20
 80050ba:	9a04      	ldr	r2, [sp, #16]
 80050bc:	68a1      	ldr	r1, [r4, #8]
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 fd0f 	bl	8005ae4 <_vfiprintf_r>
 80050c6:	b002      	add	sp, #8
 80050c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050cc:	b004      	add	sp, #16
 80050ce:	4770      	bx	lr
 80050d0:	2000000c 	.word	0x2000000c

080050d4 <putchar>:
 80050d4:	4b09      	ldr	r3, [pc, #36]	; (80050fc <putchar+0x28>)
 80050d6:	b513      	push	{r0, r1, r4, lr}
 80050d8:	681c      	ldr	r4, [r3, #0]
 80050da:	4601      	mov	r1, r0
 80050dc:	b134      	cbz	r4, 80050ec <putchar+0x18>
 80050de:	69a3      	ldr	r3, [r4, #24]
 80050e0:	b923      	cbnz	r3, 80050ec <putchar+0x18>
 80050e2:	9001      	str	r0, [sp, #4]
 80050e4:	4620      	mov	r0, r4
 80050e6:	f000 fa89 	bl	80055fc <__sinit>
 80050ea:	9901      	ldr	r1, [sp, #4]
 80050ec:	68a2      	ldr	r2, [r4, #8]
 80050ee:	4620      	mov	r0, r4
 80050f0:	b002      	add	sp, #8
 80050f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f6:	f000 bfb9 	b.w	800606c <_putc_r>
 80050fa:	bf00      	nop
 80050fc:	2000000c 	.word	0x2000000c

08005100 <setvbuf>:
 8005100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005104:	461d      	mov	r5, r3
 8005106:	4b5d      	ldr	r3, [pc, #372]	; (800527c <setvbuf+0x17c>)
 8005108:	681f      	ldr	r7, [r3, #0]
 800510a:	4604      	mov	r4, r0
 800510c:	460e      	mov	r6, r1
 800510e:	4690      	mov	r8, r2
 8005110:	b127      	cbz	r7, 800511c <setvbuf+0x1c>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	b913      	cbnz	r3, 800511c <setvbuf+0x1c>
 8005116:	4638      	mov	r0, r7
 8005118:	f000 fa70 	bl	80055fc <__sinit>
 800511c:	4b58      	ldr	r3, [pc, #352]	; (8005280 <setvbuf+0x180>)
 800511e:	429c      	cmp	r4, r3
 8005120:	d167      	bne.n	80051f2 <setvbuf+0xf2>
 8005122:	687c      	ldr	r4, [r7, #4]
 8005124:	f1b8 0f02 	cmp.w	r8, #2
 8005128:	d006      	beq.n	8005138 <setvbuf+0x38>
 800512a:	f1b8 0f01 	cmp.w	r8, #1
 800512e:	f200 809f 	bhi.w	8005270 <setvbuf+0x170>
 8005132:	2d00      	cmp	r5, #0
 8005134:	f2c0 809c 	blt.w	8005270 <setvbuf+0x170>
 8005138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800513a:	07db      	lsls	r3, r3, #31
 800513c:	d405      	bmi.n	800514a <setvbuf+0x4a>
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	0598      	lsls	r0, r3, #22
 8005142:	d402      	bmi.n	800514a <setvbuf+0x4a>
 8005144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005146:	f000 fb54 	bl	80057f2 <__retarget_lock_acquire_recursive>
 800514a:	4621      	mov	r1, r4
 800514c:	4638      	mov	r0, r7
 800514e:	f000 f9af 	bl	80054b0 <_fflush_r>
 8005152:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005154:	b141      	cbz	r1, 8005168 <setvbuf+0x68>
 8005156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800515a:	4299      	cmp	r1, r3
 800515c:	d002      	beq.n	8005164 <setvbuf+0x64>
 800515e:	4638      	mov	r0, r7
 8005160:	f000 fbb6 	bl	80058d0 <_free_r>
 8005164:	2300      	movs	r3, #0
 8005166:	6363      	str	r3, [r4, #52]	; 0x34
 8005168:	2300      	movs	r3, #0
 800516a:	61a3      	str	r3, [r4, #24]
 800516c:	6063      	str	r3, [r4, #4]
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	0619      	lsls	r1, r3, #24
 8005172:	d503      	bpl.n	800517c <setvbuf+0x7c>
 8005174:	6921      	ldr	r1, [r4, #16]
 8005176:	4638      	mov	r0, r7
 8005178:	f000 fbaa 	bl	80058d0 <_free_r>
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005182:	f023 0303 	bic.w	r3, r3, #3
 8005186:	f1b8 0f02 	cmp.w	r8, #2
 800518a:	81a3      	strh	r3, [r4, #12]
 800518c:	d06c      	beq.n	8005268 <setvbuf+0x168>
 800518e:	ab01      	add	r3, sp, #4
 8005190:	466a      	mov	r2, sp
 8005192:	4621      	mov	r1, r4
 8005194:	4638      	mov	r0, r7
 8005196:	f000 fb2e 	bl	80057f6 <__swhatbuf_r>
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	4318      	orrs	r0, r3
 800519e:	81a0      	strh	r0, [r4, #12]
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	d130      	bne.n	8005206 <setvbuf+0x106>
 80051a4:	9d00      	ldr	r5, [sp, #0]
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 fb8a 	bl	80058c0 <malloc>
 80051ac:	4606      	mov	r6, r0
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d155      	bne.n	800525e <setvbuf+0x15e>
 80051b2:	f8dd 9000 	ldr.w	r9, [sp]
 80051b6:	45a9      	cmp	r9, r5
 80051b8:	d14a      	bne.n	8005250 <setvbuf+0x150>
 80051ba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051be:	2200      	movs	r2, #0
 80051c0:	60a2      	str	r2, [r4, #8]
 80051c2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80051c6:	6022      	str	r2, [r4, #0]
 80051c8:	6122      	str	r2, [r4, #16]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d0:	6162      	str	r2, [r4, #20]
 80051d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051d4:	f043 0302 	orr.w	r3, r3, #2
 80051d8:	07d2      	lsls	r2, r2, #31
 80051da:	81a3      	strh	r3, [r4, #12]
 80051dc:	d405      	bmi.n	80051ea <setvbuf+0xea>
 80051de:	f413 7f00 	tst.w	r3, #512	; 0x200
 80051e2:	d102      	bne.n	80051ea <setvbuf+0xea>
 80051e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051e6:	f000 fb05 	bl	80057f4 <__retarget_lock_release_recursive>
 80051ea:	4628      	mov	r0, r5
 80051ec:	b003      	add	sp, #12
 80051ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051f2:	4b24      	ldr	r3, [pc, #144]	; (8005284 <setvbuf+0x184>)
 80051f4:	429c      	cmp	r4, r3
 80051f6:	d101      	bne.n	80051fc <setvbuf+0xfc>
 80051f8:	68bc      	ldr	r4, [r7, #8]
 80051fa:	e793      	b.n	8005124 <setvbuf+0x24>
 80051fc:	4b22      	ldr	r3, [pc, #136]	; (8005288 <setvbuf+0x188>)
 80051fe:	429c      	cmp	r4, r3
 8005200:	bf08      	it	eq
 8005202:	68fc      	ldreq	r4, [r7, #12]
 8005204:	e78e      	b.n	8005124 <setvbuf+0x24>
 8005206:	2e00      	cmp	r6, #0
 8005208:	d0cd      	beq.n	80051a6 <setvbuf+0xa6>
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	b913      	cbnz	r3, 8005214 <setvbuf+0x114>
 800520e:	4638      	mov	r0, r7
 8005210:	f000 f9f4 	bl	80055fc <__sinit>
 8005214:	f1b8 0f01 	cmp.w	r8, #1
 8005218:	bf08      	it	eq
 800521a:	89a3      	ldrheq	r3, [r4, #12]
 800521c:	6026      	str	r6, [r4, #0]
 800521e:	bf04      	itt	eq
 8005220:	f043 0301 	orreq.w	r3, r3, #1
 8005224:	81a3      	strheq	r3, [r4, #12]
 8005226:	89a2      	ldrh	r2, [r4, #12]
 8005228:	f012 0308 	ands.w	r3, r2, #8
 800522c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005230:	d01c      	beq.n	800526c <setvbuf+0x16c>
 8005232:	07d3      	lsls	r3, r2, #31
 8005234:	bf41      	itttt	mi
 8005236:	2300      	movmi	r3, #0
 8005238:	426d      	negmi	r5, r5
 800523a:	60a3      	strmi	r3, [r4, #8]
 800523c:	61a5      	strmi	r5, [r4, #24]
 800523e:	bf58      	it	pl
 8005240:	60a5      	strpl	r5, [r4, #8]
 8005242:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005244:	f015 0501 	ands.w	r5, r5, #1
 8005248:	d115      	bne.n	8005276 <setvbuf+0x176>
 800524a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800524e:	e7c8      	b.n	80051e2 <setvbuf+0xe2>
 8005250:	4648      	mov	r0, r9
 8005252:	f000 fb35 	bl	80058c0 <malloc>
 8005256:	4606      	mov	r6, r0
 8005258:	2800      	cmp	r0, #0
 800525a:	d0ae      	beq.n	80051ba <setvbuf+0xba>
 800525c:	464d      	mov	r5, r9
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	e7d0      	b.n	800520a <setvbuf+0x10a>
 8005268:	2500      	movs	r5, #0
 800526a:	e7a8      	b.n	80051be <setvbuf+0xbe>
 800526c:	60a3      	str	r3, [r4, #8]
 800526e:	e7e8      	b.n	8005242 <setvbuf+0x142>
 8005270:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005274:	e7b9      	b.n	80051ea <setvbuf+0xea>
 8005276:	2500      	movs	r5, #0
 8005278:	e7b7      	b.n	80051ea <setvbuf+0xea>
 800527a:	bf00      	nop
 800527c:	2000000c 	.word	0x2000000c
 8005280:	08006a18 	.word	0x08006a18
 8005284:	08006a38 	.word	0x08006a38
 8005288:	080069f8 	.word	0x080069f8

0800528c <_strtol_l.constprop.0>:
 800528c:	2b01      	cmp	r3, #1
 800528e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005292:	d001      	beq.n	8005298 <_strtol_l.constprop.0+0xc>
 8005294:	2b24      	cmp	r3, #36	; 0x24
 8005296:	d906      	bls.n	80052a6 <_strtol_l.constprop.0+0x1a>
 8005298:	f7ff fec0 	bl	800501c <__errno>
 800529c:	2316      	movs	r3, #22
 800529e:	6003      	str	r3, [r0, #0]
 80052a0:	2000      	movs	r0, #0
 80052a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800538c <_strtol_l.constprop.0+0x100>
 80052aa:	460d      	mov	r5, r1
 80052ac:	462e      	mov	r6, r5
 80052ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80052b6:	f017 0708 	ands.w	r7, r7, #8
 80052ba:	d1f7      	bne.n	80052ac <_strtol_l.constprop.0+0x20>
 80052bc:	2c2d      	cmp	r4, #45	; 0x2d
 80052be:	d132      	bne.n	8005326 <_strtol_l.constprop.0+0x9a>
 80052c0:	782c      	ldrb	r4, [r5, #0]
 80052c2:	2701      	movs	r7, #1
 80052c4:	1cb5      	adds	r5, r6, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d05b      	beq.n	8005382 <_strtol_l.constprop.0+0xf6>
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d109      	bne.n	80052e2 <_strtol_l.constprop.0+0x56>
 80052ce:	2c30      	cmp	r4, #48	; 0x30
 80052d0:	d107      	bne.n	80052e2 <_strtol_l.constprop.0+0x56>
 80052d2:	782c      	ldrb	r4, [r5, #0]
 80052d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80052d8:	2c58      	cmp	r4, #88	; 0x58
 80052da:	d14d      	bne.n	8005378 <_strtol_l.constprop.0+0xec>
 80052dc:	786c      	ldrb	r4, [r5, #1]
 80052de:	2310      	movs	r3, #16
 80052e0:	3502      	adds	r5, #2
 80052e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80052e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80052ea:	f04f 0c00 	mov.w	ip, #0
 80052ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80052f2:	4666      	mov	r6, ip
 80052f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80052f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80052fc:	f1be 0f09 	cmp.w	lr, #9
 8005300:	d816      	bhi.n	8005330 <_strtol_l.constprop.0+0xa4>
 8005302:	4674      	mov	r4, lr
 8005304:	42a3      	cmp	r3, r4
 8005306:	dd24      	ble.n	8005352 <_strtol_l.constprop.0+0xc6>
 8005308:	f1bc 0f00 	cmp.w	ip, #0
 800530c:	db1e      	blt.n	800534c <_strtol_l.constprop.0+0xc0>
 800530e:	45b1      	cmp	r9, r6
 8005310:	d31c      	bcc.n	800534c <_strtol_l.constprop.0+0xc0>
 8005312:	d101      	bne.n	8005318 <_strtol_l.constprop.0+0x8c>
 8005314:	45a2      	cmp	sl, r4
 8005316:	db19      	blt.n	800534c <_strtol_l.constprop.0+0xc0>
 8005318:	fb06 4603 	mla	r6, r6, r3, r4
 800531c:	f04f 0c01 	mov.w	ip, #1
 8005320:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005324:	e7e8      	b.n	80052f8 <_strtol_l.constprop.0+0x6c>
 8005326:	2c2b      	cmp	r4, #43	; 0x2b
 8005328:	bf04      	itt	eq
 800532a:	782c      	ldrbeq	r4, [r5, #0]
 800532c:	1cb5      	addeq	r5, r6, #2
 800532e:	e7ca      	b.n	80052c6 <_strtol_l.constprop.0+0x3a>
 8005330:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005334:	f1be 0f19 	cmp.w	lr, #25
 8005338:	d801      	bhi.n	800533e <_strtol_l.constprop.0+0xb2>
 800533a:	3c37      	subs	r4, #55	; 0x37
 800533c:	e7e2      	b.n	8005304 <_strtol_l.constprop.0+0x78>
 800533e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005342:	f1be 0f19 	cmp.w	lr, #25
 8005346:	d804      	bhi.n	8005352 <_strtol_l.constprop.0+0xc6>
 8005348:	3c57      	subs	r4, #87	; 0x57
 800534a:	e7db      	b.n	8005304 <_strtol_l.constprop.0+0x78>
 800534c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005350:	e7e6      	b.n	8005320 <_strtol_l.constprop.0+0x94>
 8005352:	f1bc 0f00 	cmp.w	ip, #0
 8005356:	da05      	bge.n	8005364 <_strtol_l.constprop.0+0xd8>
 8005358:	2322      	movs	r3, #34	; 0x22
 800535a:	6003      	str	r3, [r0, #0]
 800535c:	4646      	mov	r6, r8
 800535e:	b942      	cbnz	r2, 8005372 <_strtol_l.constprop.0+0xe6>
 8005360:	4630      	mov	r0, r6
 8005362:	e79e      	b.n	80052a2 <_strtol_l.constprop.0+0x16>
 8005364:	b107      	cbz	r7, 8005368 <_strtol_l.constprop.0+0xdc>
 8005366:	4276      	negs	r6, r6
 8005368:	2a00      	cmp	r2, #0
 800536a:	d0f9      	beq.n	8005360 <_strtol_l.constprop.0+0xd4>
 800536c:	f1bc 0f00 	cmp.w	ip, #0
 8005370:	d000      	beq.n	8005374 <_strtol_l.constprop.0+0xe8>
 8005372:	1e69      	subs	r1, r5, #1
 8005374:	6011      	str	r1, [r2, #0]
 8005376:	e7f3      	b.n	8005360 <_strtol_l.constprop.0+0xd4>
 8005378:	2430      	movs	r4, #48	; 0x30
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1b1      	bne.n	80052e2 <_strtol_l.constprop.0+0x56>
 800537e:	2308      	movs	r3, #8
 8005380:	e7af      	b.n	80052e2 <_strtol_l.constprop.0+0x56>
 8005382:	2c30      	cmp	r4, #48	; 0x30
 8005384:	d0a5      	beq.n	80052d2 <_strtol_l.constprop.0+0x46>
 8005386:	230a      	movs	r3, #10
 8005388:	e7ab      	b.n	80052e2 <_strtol_l.constprop.0+0x56>
 800538a:	bf00      	nop
 800538c:	080068f5 	.word	0x080068f5

08005390 <strtol>:
 8005390:	4613      	mov	r3, r2
 8005392:	460a      	mov	r2, r1
 8005394:	4601      	mov	r1, r0
 8005396:	4802      	ldr	r0, [pc, #8]	; (80053a0 <strtol+0x10>)
 8005398:	6800      	ldr	r0, [r0, #0]
 800539a:	f7ff bf77 	b.w	800528c <_strtol_l.constprop.0>
 800539e:	bf00      	nop
 80053a0:	2000000c 	.word	0x2000000c

080053a4 <__sflush_r>:
 80053a4:	898a      	ldrh	r2, [r1, #12]
 80053a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053aa:	4605      	mov	r5, r0
 80053ac:	0710      	lsls	r0, r2, #28
 80053ae:	460c      	mov	r4, r1
 80053b0:	d458      	bmi.n	8005464 <__sflush_r+0xc0>
 80053b2:	684b      	ldr	r3, [r1, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dc05      	bgt.n	80053c4 <__sflush_r+0x20>
 80053b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	dc02      	bgt.n	80053c4 <__sflush_r+0x20>
 80053be:	2000      	movs	r0, #0
 80053c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053c6:	2e00      	cmp	r6, #0
 80053c8:	d0f9      	beq.n	80053be <__sflush_r+0x1a>
 80053ca:	2300      	movs	r3, #0
 80053cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053d0:	682f      	ldr	r7, [r5, #0]
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	d032      	beq.n	800543c <__sflush_r+0x98>
 80053d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	075a      	lsls	r2, r3, #29
 80053dc:	d505      	bpl.n	80053ea <__sflush_r+0x46>
 80053de:	6863      	ldr	r3, [r4, #4]
 80053e0:	1ac0      	subs	r0, r0, r3
 80053e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053e4:	b10b      	cbz	r3, 80053ea <__sflush_r+0x46>
 80053e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053e8:	1ac0      	subs	r0, r0, r3
 80053ea:	2300      	movs	r3, #0
 80053ec:	4602      	mov	r2, r0
 80053ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053f0:	6a21      	ldr	r1, [r4, #32]
 80053f2:	4628      	mov	r0, r5
 80053f4:	47b0      	blx	r6
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	d106      	bne.n	800540a <__sflush_r+0x66>
 80053fc:	6829      	ldr	r1, [r5, #0]
 80053fe:	291d      	cmp	r1, #29
 8005400:	d82c      	bhi.n	800545c <__sflush_r+0xb8>
 8005402:	4a2a      	ldr	r2, [pc, #168]	; (80054ac <__sflush_r+0x108>)
 8005404:	40ca      	lsrs	r2, r1
 8005406:	07d6      	lsls	r6, r2, #31
 8005408:	d528      	bpl.n	800545c <__sflush_r+0xb8>
 800540a:	2200      	movs	r2, #0
 800540c:	6062      	str	r2, [r4, #4]
 800540e:	04d9      	lsls	r1, r3, #19
 8005410:	6922      	ldr	r2, [r4, #16]
 8005412:	6022      	str	r2, [r4, #0]
 8005414:	d504      	bpl.n	8005420 <__sflush_r+0x7c>
 8005416:	1c42      	adds	r2, r0, #1
 8005418:	d101      	bne.n	800541e <__sflush_r+0x7a>
 800541a:	682b      	ldr	r3, [r5, #0]
 800541c:	b903      	cbnz	r3, 8005420 <__sflush_r+0x7c>
 800541e:	6560      	str	r0, [r4, #84]	; 0x54
 8005420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005422:	602f      	str	r7, [r5, #0]
 8005424:	2900      	cmp	r1, #0
 8005426:	d0ca      	beq.n	80053be <__sflush_r+0x1a>
 8005428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800542c:	4299      	cmp	r1, r3
 800542e:	d002      	beq.n	8005436 <__sflush_r+0x92>
 8005430:	4628      	mov	r0, r5
 8005432:	f000 fa4d 	bl	80058d0 <_free_r>
 8005436:	2000      	movs	r0, #0
 8005438:	6360      	str	r0, [r4, #52]	; 0x34
 800543a:	e7c1      	b.n	80053c0 <__sflush_r+0x1c>
 800543c:	6a21      	ldr	r1, [r4, #32]
 800543e:	2301      	movs	r3, #1
 8005440:	4628      	mov	r0, r5
 8005442:	47b0      	blx	r6
 8005444:	1c41      	adds	r1, r0, #1
 8005446:	d1c7      	bne.n	80053d8 <__sflush_r+0x34>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0c4      	beq.n	80053d8 <__sflush_r+0x34>
 800544e:	2b1d      	cmp	r3, #29
 8005450:	d001      	beq.n	8005456 <__sflush_r+0xb2>
 8005452:	2b16      	cmp	r3, #22
 8005454:	d101      	bne.n	800545a <__sflush_r+0xb6>
 8005456:	602f      	str	r7, [r5, #0]
 8005458:	e7b1      	b.n	80053be <__sflush_r+0x1a>
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	e7ad      	b.n	80053c0 <__sflush_r+0x1c>
 8005464:	690f      	ldr	r7, [r1, #16]
 8005466:	2f00      	cmp	r7, #0
 8005468:	d0a9      	beq.n	80053be <__sflush_r+0x1a>
 800546a:	0793      	lsls	r3, r2, #30
 800546c:	680e      	ldr	r6, [r1, #0]
 800546e:	bf08      	it	eq
 8005470:	694b      	ldreq	r3, [r1, #20]
 8005472:	600f      	str	r7, [r1, #0]
 8005474:	bf18      	it	ne
 8005476:	2300      	movne	r3, #0
 8005478:	eba6 0807 	sub.w	r8, r6, r7
 800547c:	608b      	str	r3, [r1, #8]
 800547e:	f1b8 0f00 	cmp.w	r8, #0
 8005482:	dd9c      	ble.n	80053be <__sflush_r+0x1a>
 8005484:	6a21      	ldr	r1, [r4, #32]
 8005486:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005488:	4643      	mov	r3, r8
 800548a:	463a      	mov	r2, r7
 800548c:	4628      	mov	r0, r5
 800548e:	47b0      	blx	r6
 8005490:	2800      	cmp	r0, #0
 8005492:	dc06      	bgt.n	80054a2 <__sflush_r+0xfe>
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800549a:	81a3      	strh	r3, [r4, #12]
 800549c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a0:	e78e      	b.n	80053c0 <__sflush_r+0x1c>
 80054a2:	4407      	add	r7, r0
 80054a4:	eba8 0800 	sub.w	r8, r8, r0
 80054a8:	e7e9      	b.n	800547e <__sflush_r+0xda>
 80054aa:	bf00      	nop
 80054ac:	20400001 	.word	0x20400001

080054b0 <_fflush_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	690b      	ldr	r3, [r1, #16]
 80054b4:	4605      	mov	r5, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	b913      	cbnz	r3, 80054c0 <_fflush_r+0x10>
 80054ba:	2500      	movs	r5, #0
 80054bc:	4628      	mov	r0, r5
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	b118      	cbz	r0, 80054ca <_fflush_r+0x1a>
 80054c2:	6983      	ldr	r3, [r0, #24]
 80054c4:	b90b      	cbnz	r3, 80054ca <_fflush_r+0x1a>
 80054c6:	f000 f899 	bl	80055fc <__sinit>
 80054ca:	4b14      	ldr	r3, [pc, #80]	; (800551c <_fflush_r+0x6c>)
 80054cc:	429c      	cmp	r4, r3
 80054ce:	d11b      	bne.n	8005508 <_fflush_r+0x58>
 80054d0:	686c      	ldr	r4, [r5, #4]
 80054d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0ef      	beq.n	80054ba <_fflush_r+0xa>
 80054da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054dc:	07d0      	lsls	r0, r2, #31
 80054de:	d404      	bmi.n	80054ea <_fflush_r+0x3a>
 80054e0:	0599      	lsls	r1, r3, #22
 80054e2:	d402      	bmi.n	80054ea <_fflush_r+0x3a>
 80054e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054e6:	f000 f984 	bl	80057f2 <__retarget_lock_acquire_recursive>
 80054ea:	4628      	mov	r0, r5
 80054ec:	4621      	mov	r1, r4
 80054ee:	f7ff ff59 	bl	80053a4 <__sflush_r>
 80054f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054f4:	07da      	lsls	r2, r3, #31
 80054f6:	4605      	mov	r5, r0
 80054f8:	d4e0      	bmi.n	80054bc <_fflush_r+0xc>
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	059b      	lsls	r3, r3, #22
 80054fe:	d4dd      	bmi.n	80054bc <_fflush_r+0xc>
 8005500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005502:	f000 f977 	bl	80057f4 <__retarget_lock_release_recursive>
 8005506:	e7d9      	b.n	80054bc <_fflush_r+0xc>
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <_fflush_r+0x70>)
 800550a:	429c      	cmp	r4, r3
 800550c:	d101      	bne.n	8005512 <_fflush_r+0x62>
 800550e:	68ac      	ldr	r4, [r5, #8]
 8005510:	e7df      	b.n	80054d2 <_fflush_r+0x22>
 8005512:	4b04      	ldr	r3, [pc, #16]	; (8005524 <_fflush_r+0x74>)
 8005514:	429c      	cmp	r4, r3
 8005516:	bf08      	it	eq
 8005518:	68ec      	ldreq	r4, [r5, #12]
 800551a:	e7da      	b.n	80054d2 <_fflush_r+0x22>
 800551c:	08006a18 	.word	0x08006a18
 8005520:	08006a38 	.word	0x08006a38
 8005524:	080069f8 	.word	0x080069f8

08005528 <fflush>:
 8005528:	4601      	mov	r1, r0
 800552a:	b920      	cbnz	r0, 8005536 <fflush+0xe>
 800552c:	4b04      	ldr	r3, [pc, #16]	; (8005540 <fflush+0x18>)
 800552e:	4905      	ldr	r1, [pc, #20]	; (8005544 <fflush+0x1c>)
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	f000 b8fe 	b.w	8005732 <_fwalk_reent>
 8005536:	4b04      	ldr	r3, [pc, #16]	; (8005548 <fflush+0x20>)
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	f7ff bfb9 	b.w	80054b0 <_fflush_r>
 800553e:	bf00      	nop
 8005540:	080068f0 	.word	0x080068f0
 8005544:	080054b1 	.word	0x080054b1
 8005548:	2000000c 	.word	0x2000000c

0800554c <std>:
 800554c:	2300      	movs	r3, #0
 800554e:	b510      	push	{r4, lr}
 8005550:	4604      	mov	r4, r0
 8005552:	e9c0 3300 	strd	r3, r3, [r0]
 8005556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800555a:	6083      	str	r3, [r0, #8]
 800555c:	8181      	strh	r1, [r0, #12]
 800555e:	6643      	str	r3, [r0, #100]	; 0x64
 8005560:	81c2      	strh	r2, [r0, #14]
 8005562:	6183      	str	r3, [r0, #24]
 8005564:	4619      	mov	r1, r3
 8005566:	2208      	movs	r2, #8
 8005568:	305c      	adds	r0, #92	; 0x5c
 800556a:	f7ff fd93 	bl	8005094 <memset>
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <std+0x38>)
 8005570:	6263      	str	r3, [r4, #36]	; 0x24
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <std+0x3c>)
 8005574:	62a3      	str	r3, [r4, #40]	; 0x28
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <std+0x40>)
 8005578:	62e3      	str	r3, [r4, #44]	; 0x2c
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <std+0x44>)
 800557c:	6224      	str	r4, [r4, #32]
 800557e:	6323      	str	r3, [r4, #48]	; 0x30
 8005580:	bd10      	pop	{r4, pc}
 8005582:	bf00      	nop
 8005584:	08006175 	.word	0x08006175
 8005588:	08006197 	.word	0x08006197
 800558c:	080061cf 	.word	0x080061cf
 8005590:	080061f3 	.word	0x080061f3

08005594 <_cleanup_r>:
 8005594:	4901      	ldr	r1, [pc, #4]	; (800559c <_cleanup_r+0x8>)
 8005596:	f000 b8cc 	b.w	8005732 <_fwalk_reent>
 800559a:	bf00      	nop
 800559c:	080054b1 	.word	0x080054b1

080055a0 <__sfmoreglue>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	2268      	movs	r2, #104	; 0x68
 80055a4:	1e4d      	subs	r5, r1, #1
 80055a6:	4355      	muls	r5, r2
 80055a8:	460e      	mov	r6, r1
 80055aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055ae:	f000 f9fb 	bl	80059a8 <_malloc_r>
 80055b2:	4604      	mov	r4, r0
 80055b4:	b140      	cbz	r0, 80055c8 <__sfmoreglue+0x28>
 80055b6:	2100      	movs	r1, #0
 80055b8:	e9c0 1600 	strd	r1, r6, [r0]
 80055bc:	300c      	adds	r0, #12
 80055be:	60a0      	str	r0, [r4, #8]
 80055c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055c4:	f7ff fd66 	bl	8005094 <memset>
 80055c8:	4620      	mov	r0, r4
 80055ca:	bd70      	pop	{r4, r5, r6, pc}

080055cc <__sfp_lock_acquire>:
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <__sfp_lock_acquire+0x8>)
 80055ce:	f000 b910 	b.w	80057f2 <__retarget_lock_acquire_recursive>
 80055d2:	bf00      	nop
 80055d4:	20000ae9 	.word	0x20000ae9

080055d8 <__sfp_lock_release>:
 80055d8:	4801      	ldr	r0, [pc, #4]	; (80055e0 <__sfp_lock_release+0x8>)
 80055da:	f000 b90b 	b.w	80057f4 <__retarget_lock_release_recursive>
 80055de:	bf00      	nop
 80055e0:	20000ae9 	.word	0x20000ae9

080055e4 <__sinit_lock_acquire>:
 80055e4:	4801      	ldr	r0, [pc, #4]	; (80055ec <__sinit_lock_acquire+0x8>)
 80055e6:	f000 b904 	b.w	80057f2 <__retarget_lock_acquire_recursive>
 80055ea:	bf00      	nop
 80055ec:	20000aea 	.word	0x20000aea

080055f0 <__sinit_lock_release>:
 80055f0:	4801      	ldr	r0, [pc, #4]	; (80055f8 <__sinit_lock_release+0x8>)
 80055f2:	f000 b8ff 	b.w	80057f4 <__retarget_lock_release_recursive>
 80055f6:	bf00      	nop
 80055f8:	20000aea 	.word	0x20000aea

080055fc <__sinit>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	4604      	mov	r4, r0
 8005600:	f7ff fff0 	bl	80055e4 <__sinit_lock_acquire>
 8005604:	69a3      	ldr	r3, [r4, #24]
 8005606:	b11b      	cbz	r3, 8005610 <__sinit+0x14>
 8005608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800560c:	f7ff bff0 	b.w	80055f0 <__sinit_lock_release>
 8005610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005614:	6523      	str	r3, [r4, #80]	; 0x50
 8005616:	4b13      	ldr	r3, [pc, #76]	; (8005664 <__sinit+0x68>)
 8005618:	4a13      	ldr	r2, [pc, #76]	; (8005668 <__sinit+0x6c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	62a2      	str	r2, [r4, #40]	; 0x28
 800561e:	42a3      	cmp	r3, r4
 8005620:	bf04      	itt	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	61a3      	streq	r3, [r4, #24]
 8005626:	4620      	mov	r0, r4
 8005628:	f000 f820 	bl	800566c <__sfp>
 800562c:	6060      	str	r0, [r4, #4]
 800562e:	4620      	mov	r0, r4
 8005630:	f000 f81c 	bl	800566c <__sfp>
 8005634:	60a0      	str	r0, [r4, #8]
 8005636:	4620      	mov	r0, r4
 8005638:	f000 f818 	bl	800566c <__sfp>
 800563c:	2200      	movs	r2, #0
 800563e:	60e0      	str	r0, [r4, #12]
 8005640:	2104      	movs	r1, #4
 8005642:	6860      	ldr	r0, [r4, #4]
 8005644:	f7ff ff82 	bl	800554c <std>
 8005648:	68a0      	ldr	r0, [r4, #8]
 800564a:	2201      	movs	r2, #1
 800564c:	2109      	movs	r1, #9
 800564e:	f7ff ff7d 	bl	800554c <std>
 8005652:	68e0      	ldr	r0, [r4, #12]
 8005654:	2202      	movs	r2, #2
 8005656:	2112      	movs	r1, #18
 8005658:	f7ff ff78 	bl	800554c <std>
 800565c:	2301      	movs	r3, #1
 800565e:	61a3      	str	r3, [r4, #24]
 8005660:	e7d2      	b.n	8005608 <__sinit+0xc>
 8005662:	bf00      	nop
 8005664:	080068f0 	.word	0x080068f0
 8005668:	08005595 	.word	0x08005595

0800566c <__sfp>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	4607      	mov	r7, r0
 8005670:	f7ff ffac 	bl	80055cc <__sfp_lock_acquire>
 8005674:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <__sfp+0x84>)
 8005676:	681e      	ldr	r6, [r3, #0]
 8005678:	69b3      	ldr	r3, [r6, #24]
 800567a:	b913      	cbnz	r3, 8005682 <__sfp+0x16>
 800567c:	4630      	mov	r0, r6
 800567e:	f7ff ffbd 	bl	80055fc <__sinit>
 8005682:	3648      	adds	r6, #72	; 0x48
 8005684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005688:	3b01      	subs	r3, #1
 800568a:	d503      	bpl.n	8005694 <__sfp+0x28>
 800568c:	6833      	ldr	r3, [r6, #0]
 800568e:	b30b      	cbz	r3, 80056d4 <__sfp+0x68>
 8005690:	6836      	ldr	r6, [r6, #0]
 8005692:	e7f7      	b.n	8005684 <__sfp+0x18>
 8005694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005698:	b9d5      	cbnz	r5, 80056d0 <__sfp+0x64>
 800569a:	4b16      	ldr	r3, [pc, #88]	; (80056f4 <__sfp+0x88>)
 800569c:	60e3      	str	r3, [r4, #12]
 800569e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056a2:	6665      	str	r5, [r4, #100]	; 0x64
 80056a4:	f000 f8a4 	bl	80057f0 <__retarget_lock_init_recursive>
 80056a8:	f7ff ff96 	bl	80055d8 <__sfp_lock_release>
 80056ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056b4:	6025      	str	r5, [r4, #0]
 80056b6:	61a5      	str	r5, [r4, #24]
 80056b8:	2208      	movs	r2, #8
 80056ba:	4629      	mov	r1, r5
 80056bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056c0:	f7ff fce8 	bl	8005094 <memset>
 80056c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056cc:	4620      	mov	r0, r4
 80056ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d0:	3468      	adds	r4, #104	; 0x68
 80056d2:	e7d9      	b.n	8005688 <__sfp+0x1c>
 80056d4:	2104      	movs	r1, #4
 80056d6:	4638      	mov	r0, r7
 80056d8:	f7ff ff62 	bl	80055a0 <__sfmoreglue>
 80056dc:	4604      	mov	r4, r0
 80056de:	6030      	str	r0, [r6, #0]
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d1d5      	bne.n	8005690 <__sfp+0x24>
 80056e4:	f7ff ff78 	bl	80055d8 <__sfp_lock_release>
 80056e8:	230c      	movs	r3, #12
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	e7ee      	b.n	80056cc <__sfp+0x60>
 80056ee:	bf00      	nop
 80056f0:	080068f0 	.word	0x080068f0
 80056f4:	ffff0001 	.word	0xffff0001

080056f8 <_fwalk>:
 80056f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fc:	460f      	mov	r7, r1
 80056fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005702:	2600      	movs	r6, #0
 8005704:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8005708:	f1b8 0801 	subs.w	r8, r8, #1
 800570c:	d505      	bpl.n	800571a <_fwalk+0x22>
 800570e:	6824      	ldr	r4, [r4, #0]
 8005710:	2c00      	cmp	r4, #0
 8005712:	d1f7      	bne.n	8005704 <_fwalk+0xc>
 8005714:	4630      	mov	r0, r6
 8005716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800571a:	89ab      	ldrh	r3, [r5, #12]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d906      	bls.n	800572e <_fwalk+0x36>
 8005720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005724:	3301      	adds	r3, #1
 8005726:	d002      	beq.n	800572e <_fwalk+0x36>
 8005728:	4628      	mov	r0, r5
 800572a:	47b8      	blx	r7
 800572c:	4306      	orrs	r6, r0
 800572e:	3568      	adds	r5, #104	; 0x68
 8005730:	e7ea      	b.n	8005708 <_fwalk+0x10>

08005732 <_fwalk_reent>:
 8005732:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005736:	4606      	mov	r6, r0
 8005738:	4688      	mov	r8, r1
 800573a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800573e:	2700      	movs	r7, #0
 8005740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005744:	f1b9 0901 	subs.w	r9, r9, #1
 8005748:	d505      	bpl.n	8005756 <_fwalk_reent+0x24>
 800574a:	6824      	ldr	r4, [r4, #0]
 800574c:	2c00      	cmp	r4, #0
 800574e:	d1f7      	bne.n	8005740 <_fwalk_reent+0xe>
 8005750:	4638      	mov	r0, r7
 8005752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005756:	89ab      	ldrh	r3, [r5, #12]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d907      	bls.n	800576c <_fwalk_reent+0x3a>
 800575c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005760:	3301      	adds	r3, #1
 8005762:	d003      	beq.n	800576c <_fwalk_reent+0x3a>
 8005764:	4629      	mov	r1, r5
 8005766:	4630      	mov	r0, r6
 8005768:	47c0      	blx	r8
 800576a:	4307      	orrs	r7, r0
 800576c:	3568      	adds	r5, #104	; 0x68
 800576e:	e7e9      	b.n	8005744 <_fwalk_reent+0x12>

08005770 <_getc_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	460c      	mov	r4, r1
 8005774:	4605      	mov	r5, r0
 8005776:	b118      	cbz	r0, 8005780 <_getc_r+0x10>
 8005778:	6983      	ldr	r3, [r0, #24]
 800577a:	b90b      	cbnz	r3, 8005780 <_getc_r+0x10>
 800577c:	f7ff ff3e 	bl	80055fc <__sinit>
 8005780:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <_getc_r+0x74>)
 8005782:	429c      	cmp	r4, r3
 8005784:	d11e      	bne.n	80057c4 <_getc_r+0x54>
 8005786:	686c      	ldr	r4, [r5, #4]
 8005788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800578a:	07d8      	lsls	r0, r3, #31
 800578c:	d405      	bmi.n	800579a <_getc_r+0x2a>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	0599      	lsls	r1, r3, #22
 8005792:	d402      	bmi.n	800579a <_getc_r+0x2a>
 8005794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005796:	f000 f82c 	bl	80057f2 <__retarget_lock_acquire_recursive>
 800579a:	6863      	ldr	r3, [r4, #4]
 800579c:	3b01      	subs	r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	6063      	str	r3, [r4, #4]
 80057a2:	da19      	bge.n	80057d8 <_getc_r+0x68>
 80057a4:	4628      	mov	r0, r5
 80057a6:	4621      	mov	r1, r4
 80057a8:	f000 fca8 	bl	80060fc <__srget_r>
 80057ac:	4605      	mov	r5, r0
 80057ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057b0:	07da      	lsls	r2, r3, #31
 80057b2:	d405      	bmi.n	80057c0 <_getc_r+0x50>
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	059b      	lsls	r3, r3, #22
 80057b8:	d402      	bmi.n	80057c0 <_getc_r+0x50>
 80057ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057bc:	f000 f81a 	bl	80057f4 <__retarget_lock_release_recursive>
 80057c0:	4628      	mov	r0, r5
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <_getc_r+0x78>)
 80057c6:	429c      	cmp	r4, r3
 80057c8:	d101      	bne.n	80057ce <_getc_r+0x5e>
 80057ca:	68ac      	ldr	r4, [r5, #8]
 80057cc:	e7dc      	b.n	8005788 <_getc_r+0x18>
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <_getc_r+0x7c>)
 80057d0:	429c      	cmp	r4, r3
 80057d2:	bf08      	it	eq
 80057d4:	68ec      	ldreq	r4, [r5, #12]
 80057d6:	e7d7      	b.n	8005788 <_getc_r+0x18>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	6022      	str	r2, [r4, #0]
 80057de:	781d      	ldrb	r5, [r3, #0]
 80057e0:	e7e5      	b.n	80057ae <_getc_r+0x3e>
 80057e2:	bf00      	nop
 80057e4:	08006a18 	.word	0x08006a18
 80057e8:	08006a38 	.word	0x08006a38
 80057ec:	080069f8 	.word	0x080069f8

080057f0 <__retarget_lock_init_recursive>:
 80057f0:	4770      	bx	lr

080057f2 <__retarget_lock_acquire_recursive>:
 80057f2:	4770      	bx	lr

080057f4 <__retarget_lock_release_recursive>:
 80057f4:	4770      	bx	lr

080057f6 <__swhatbuf_r>:
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	460e      	mov	r6, r1
 80057fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057fe:	2900      	cmp	r1, #0
 8005800:	b096      	sub	sp, #88	; 0x58
 8005802:	4614      	mov	r4, r2
 8005804:	461d      	mov	r5, r3
 8005806:	da08      	bge.n	800581a <__swhatbuf_r+0x24>
 8005808:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	602a      	str	r2, [r5, #0]
 8005810:	061a      	lsls	r2, r3, #24
 8005812:	d410      	bmi.n	8005836 <__swhatbuf_r+0x40>
 8005814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005818:	e00e      	b.n	8005838 <__swhatbuf_r+0x42>
 800581a:	466a      	mov	r2, sp
 800581c:	f000 fdd0 	bl	80063c0 <_fstat_r>
 8005820:	2800      	cmp	r0, #0
 8005822:	dbf1      	blt.n	8005808 <__swhatbuf_r+0x12>
 8005824:	9a01      	ldr	r2, [sp, #4]
 8005826:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800582a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800582e:	425a      	negs	r2, r3
 8005830:	415a      	adcs	r2, r3
 8005832:	602a      	str	r2, [r5, #0]
 8005834:	e7ee      	b.n	8005814 <__swhatbuf_r+0x1e>
 8005836:	2340      	movs	r3, #64	; 0x40
 8005838:	2000      	movs	r0, #0
 800583a:	6023      	str	r3, [r4, #0]
 800583c:	b016      	add	sp, #88	; 0x58
 800583e:	bd70      	pop	{r4, r5, r6, pc}

08005840 <__smakebuf_r>:
 8005840:	898b      	ldrh	r3, [r1, #12]
 8005842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005844:	079d      	lsls	r5, r3, #30
 8005846:	4606      	mov	r6, r0
 8005848:	460c      	mov	r4, r1
 800584a:	d507      	bpl.n	800585c <__smakebuf_r+0x1c>
 800584c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	6123      	str	r3, [r4, #16]
 8005854:	2301      	movs	r3, #1
 8005856:	6163      	str	r3, [r4, #20]
 8005858:	b002      	add	sp, #8
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	ab01      	add	r3, sp, #4
 800585e:	466a      	mov	r2, sp
 8005860:	f7ff ffc9 	bl	80057f6 <__swhatbuf_r>
 8005864:	9900      	ldr	r1, [sp, #0]
 8005866:	4605      	mov	r5, r0
 8005868:	4630      	mov	r0, r6
 800586a:	f000 f89d 	bl	80059a8 <_malloc_r>
 800586e:	b948      	cbnz	r0, 8005884 <__smakebuf_r+0x44>
 8005870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005874:	059a      	lsls	r2, r3, #22
 8005876:	d4ef      	bmi.n	8005858 <__smakebuf_r+0x18>
 8005878:	f023 0303 	bic.w	r3, r3, #3
 800587c:	f043 0302 	orr.w	r3, r3, #2
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	e7e3      	b.n	800584c <__smakebuf_r+0xc>
 8005884:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <__smakebuf_r+0x7c>)
 8005886:	62b3      	str	r3, [r6, #40]	; 0x28
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	6020      	str	r0, [r4, #0]
 800588c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	9b00      	ldr	r3, [sp, #0]
 8005894:	6163      	str	r3, [r4, #20]
 8005896:	9b01      	ldr	r3, [sp, #4]
 8005898:	6120      	str	r0, [r4, #16]
 800589a:	b15b      	cbz	r3, 80058b4 <__smakebuf_r+0x74>
 800589c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a0:	4630      	mov	r0, r6
 80058a2:	f000 fd9f 	bl	80063e4 <_isatty_r>
 80058a6:	b128      	cbz	r0, 80058b4 <__smakebuf_r+0x74>
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	f023 0303 	bic.w	r3, r3, #3
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	89a0      	ldrh	r0, [r4, #12]
 80058b6:	4305      	orrs	r5, r0
 80058b8:	81a5      	strh	r5, [r4, #12]
 80058ba:	e7cd      	b.n	8005858 <__smakebuf_r+0x18>
 80058bc:	08005595 	.word	0x08005595

080058c0 <malloc>:
 80058c0:	4b02      	ldr	r3, [pc, #8]	; (80058cc <malloc+0xc>)
 80058c2:	4601      	mov	r1, r0
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	f000 b86f 	b.w	80059a8 <_malloc_r>
 80058ca:	bf00      	nop
 80058cc:	2000000c 	.word	0x2000000c

080058d0 <_free_r>:
 80058d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058d2:	2900      	cmp	r1, #0
 80058d4:	d044      	beq.n	8005960 <_free_r+0x90>
 80058d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058da:	9001      	str	r0, [sp, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f1a1 0404 	sub.w	r4, r1, #4
 80058e2:	bfb8      	it	lt
 80058e4:	18e4      	addlt	r4, r4, r3
 80058e6:	f000 fd9f 	bl	8006428 <__malloc_lock>
 80058ea:	4a1e      	ldr	r2, [pc, #120]	; (8005964 <_free_r+0x94>)
 80058ec:	9801      	ldr	r0, [sp, #4]
 80058ee:	6813      	ldr	r3, [r2, #0]
 80058f0:	b933      	cbnz	r3, 8005900 <_free_r+0x30>
 80058f2:	6063      	str	r3, [r4, #4]
 80058f4:	6014      	str	r4, [r2, #0]
 80058f6:	b003      	add	sp, #12
 80058f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058fc:	f000 bd9a 	b.w	8006434 <__malloc_unlock>
 8005900:	42a3      	cmp	r3, r4
 8005902:	d908      	bls.n	8005916 <_free_r+0x46>
 8005904:	6825      	ldr	r5, [r4, #0]
 8005906:	1961      	adds	r1, r4, r5
 8005908:	428b      	cmp	r3, r1
 800590a:	bf01      	itttt	eq
 800590c:	6819      	ldreq	r1, [r3, #0]
 800590e:	685b      	ldreq	r3, [r3, #4]
 8005910:	1949      	addeq	r1, r1, r5
 8005912:	6021      	streq	r1, [r4, #0]
 8005914:	e7ed      	b.n	80058f2 <_free_r+0x22>
 8005916:	461a      	mov	r2, r3
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b10b      	cbz	r3, 8005920 <_free_r+0x50>
 800591c:	42a3      	cmp	r3, r4
 800591e:	d9fa      	bls.n	8005916 <_free_r+0x46>
 8005920:	6811      	ldr	r1, [r2, #0]
 8005922:	1855      	adds	r5, r2, r1
 8005924:	42a5      	cmp	r5, r4
 8005926:	d10b      	bne.n	8005940 <_free_r+0x70>
 8005928:	6824      	ldr	r4, [r4, #0]
 800592a:	4421      	add	r1, r4
 800592c:	1854      	adds	r4, r2, r1
 800592e:	42a3      	cmp	r3, r4
 8005930:	6011      	str	r1, [r2, #0]
 8005932:	d1e0      	bne.n	80058f6 <_free_r+0x26>
 8005934:	681c      	ldr	r4, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	6053      	str	r3, [r2, #4]
 800593a:	4421      	add	r1, r4
 800593c:	6011      	str	r1, [r2, #0]
 800593e:	e7da      	b.n	80058f6 <_free_r+0x26>
 8005940:	d902      	bls.n	8005948 <_free_r+0x78>
 8005942:	230c      	movs	r3, #12
 8005944:	6003      	str	r3, [r0, #0]
 8005946:	e7d6      	b.n	80058f6 <_free_r+0x26>
 8005948:	6825      	ldr	r5, [r4, #0]
 800594a:	1961      	adds	r1, r4, r5
 800594c:	428b      	cmp	r3, r1
 800594e:	bf04      	itt	eq
 8005950:	6819      	ldreq	r1, [r3, #0]
 8005952:	685b      	ldreq	r3, [r3, #4]
 8005954:	6063      	str	r3, [r4, #4]
 8005956:	bf04      	itt	eq
 8005958:	1949      	addeq	r1, r1, r5
 800595a:	6021      	streq	r1, [r4, #0]
 800595c:	6054      	str	r4, [r2, #4]
 800595e:	e7ca      	b.n	80058f6 <_free_r+0x26>
 8005960:	b003      	add	sp, #12
 8005962:	bd30      	pop	{r4, r5, pc}
 8005964:	20000aec 	.word	0x20000aec

08005968 <sbrk_aligned>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	4e0e      	ldr	r6, [pc, #56]	; (80059a4 <sbrk_aligned+0x3c>)
 800596c:	460c      	mov	r4, r1
 800596e:	6831      	ldr	r1, [r6, #0]
 8005970:	4605      	mov	r5, r0
 8005972:	b911      	cbnz	r1, 800597a <sbrk_aligned+0x12>
 8005974:	f000 fbee 	bl	8006154 <_sbrk_r>
 8005978:	6030      	str	r0, [r6, #0]
 800597a:	4621      	mov	r1, r4
 800597c:	4628      	mov	r0, r5
 800597e:	f000 fbe9 	bl	8006154 <_sbrk_r>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d00a      	beq.n	800599c <sbrk_aligned+0x34>
 8005986:	1cc4      	adds	r4, r0, #3
 8005988:	f024 0403 	bic.w	r4, r4, #3
 800598c:	42a0      	cmp	r0, r4
 800598e:	d007      	beq.n	80059a0 <sbrk_aligned+0x38>
 8005990:	1a21      	subs	r1, r4, r0
 8005992:	4628      	mov	r0, r5
 8005994:	f000 fbde 	bl	8006154 <_sbrk_r>
 8005998:	3001      	adds	r0, #1
 800599a:	d101      	bne.n	80059a0 <sbrk_aligned+0x38>
 800599c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80059a0:	4620      	mov	r0, r4
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	20000af0 	.word	0x20000af0

080059a8 <_malloc_r>:
 80059a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ac:	1ccd      	adds	r5, r1, #3
 80059ae:	f025 0503 	bic.w	r5, r5, #3
 80059b2:	3508      	adds	r5, #8
 80059b4:	2d0c      	cmp	r5, #12
 80059b6:	bf38      	it	cc
 80059b8:	250c      	movcc	r5, #12
 80059ba:	2d00      	cmp	r5, #0
 80059bc:	4607      	mov	r7, r0
 80059be:	db01      	blt.n	80059c4 <_malloc_r+0x1c>
 80059c0:	42a9      	cmp	r1, r5
 80059c2:	d905      	bls.n	80059d0 <_malloc_r+0x28>
 80059c4:	230c      	movs	r3, #12
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	2600      	movs	r6, #0
 80059ca:	4630      	mov	r0, r6
 80059cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d0:	4e2e      	ldr	r6, [pc, #184]	; (8005a8c <_malloc_r+0xe4>)
 80059d2:	f000 fd29 	bl	8006428 <__malloc_lock>
 80059d6:	6833      	ldr	r3, [r6, #0]
 80059d8:	461c      	mov	r4, r3
 80059da:	bb34      	cbnz	r4, 8005a2a <_malloc_r+0x82>
 80059dc:	4629      	mov	r1, r5
 80059de:	4638      	mov	r0, r7
 80059e0:	f7ff ffc2 	bl	8005968 <sbrk_aligned>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	4604      	mov	r4, r0
 80059e8:	d14d      	bne.n	8005a86 <_malloc_r+0xde>
 80059ea:	6834      	ldr	r4, [r6, #0]
 80059ec:	4626      	mov	r6, r4
 80059ee:	2e00      	cmp	r6, #0
 80059f0:	d140      	bne.n	8005a74 <_malloc_r+0xcc>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	4631      	mov	r1, r6
 80059f6:	4638      	mov	r0, r7
 80059f8:	eb04 0803 	add.w	r8, r4, r3
 80059fc:	f000 fbaa 	bl	8006154 <_sbrk_r>
 8005a00:	4580      	cmp	r8, r0
 8005a02:	d13a      	bne.n	8005a7a <_malloc_r+0xd2>
 8005a04:	6821      	ldr	r1, [r4, #0]
 8005a06:	3503      	adds	r5, #3
 8005a08:	1a6d      	subs	r5, r5, r1
 8005a0a:	f025 0503 	bic.w	r5, r5, #3
 8005a0e:	3508      	adds	r5, #8
 8005a10:	2d0c      	cmp	r5, #12
 8005a12:	bf38      	it	cc
 8005a14:	250c      	movcc	r5, #12
 8005a16:	4629      	mov	r1, r5
 8005a18:	4638      	mov	r0, r7
 8005a1a:	f7ff ffa5 	bl	8005968 <sbrk_aligned>
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d02b      	beq.n	8005a7a <_malloc_r+0xd2>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	442b      	add	r3, r5
 8005a26:	6023      	str	r3, [r4, #0]
 8005a28:	e00e      	b.n	8005a48 <_malloc_r+0xa0>
 8005a2a:	6822      	ldr	r2, [r4, #0]
 8005a2c:	1b52      	subs	r2, r2, r5
 8005a2e:	d41e      	bmi.n	8005a6e <_malloc_r+0xc6>
 8005a30:	2a0b      	cmp	r2, #11
 8005a32:	d916      	bls.n	8005a62 <_malloc_r+0xba>
 8005a34:	1961      	adds	r1, r4, r5
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	6025      	str	r5, [r4, #0]
 8005a3a:	bf18      	it	ne
 8005a3c:	6059      	strne	r1, [r3, #4]
 8005a3e:	6863      	ldr	r3, [r4, #4]
 8005a40:	bf08      	it	eq
 8005a42:	6031      	streq	r1, [r6, #0]
 8005a44:	5162      	str	r2, [r4, r5]
 8005a46:	604b      	str	r3, [r1, #4]
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f104 060b 	add.w	r6, r4, #11
 8005a4e:	f000 fcf1 	bl	8006434 <__malloc_unlock>
 8005a52:	f026 0607 	bic.w	r6, r6, #7
 8005a56:	1d23      	adds	r3, r4, #4
 8005a58:	1af2      	subs	r2, r6, r3
 8005a5a:	d0b6      	beq.n	80059ca <_malloc_r+0x22>
 8005a5c:	1b9b      	subs	r3, r3, r6
 8005a5e:	50a3      	str	r3, [r4, r2]
 8005a60:	e7b3      	b.n	80059ca <_malloc_r+0x22>
 8005a62:	6862      	ldr	r2, [r4, #4]
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	bf0c      	ite	eq
 8005a68:	6032      	streq	r2, [r6, #0]
 8005a6a:	605a      	strne	r2, [r3, #4]
 8005a6c:	e7ec      	b.n	8005a48 <_malloc_r+0xa0>
 8005a6e:	4623      	mov	r3, r4
 8005a70:	6864      	ldr	r4, [r4, #4]
 8005a72:	e7b2      	b.n	80059da <_malloc_r+0x32>
 8005a74:	4634      	mov	r4, r6
 8005a76:	6876      	ldr	r6, [r6, #4]
 8005a78:	e7b9      	b.n	80059ee <_malloc_r+0x46>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	603b      	str	r3, [r7, #0]
 8005a7e:	4638      	mov	r0, r7
 8005a80:	f000 fcd8 	bl	8006434 <__malloc_unlock>
 8005a84:	e7a1      	b.n	80059ca <_malloc_r+0x22>
 8005a86:	6025      	str	r5, [r4, #0]
 8005a88:	e7de      	b.n	8005a48 <_malloc_r+0xa0>
 8005a8a:	bf00      	nop
 8005a8c:	20000aec 	.word	0x20000aec

08005a90 <__sfputc_r>:
 8005a90:	6893      	ldr	r3, [r2, #8]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	b410      	push	{r4}
 8005a98:	6093      	str	r3, [r2, #8]
 8005a9a:	da08      	bge.n	8005aae <__sfputc_r+0x1e>
 8005a9c:	6994      	ldr	r4, [r2, #24]
 8005a9e:	42a3      	cmp	r3, r4
 8005aa0:	db01      	blt.n	8005aa6 <__sfputc_r+0x16>
 8005aa2:	290a      	cmp	r1, #10
 8005aa4:	d103      	bne.n	8005aae <__sfputc_r+0x1e>
 8005aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aaa:	f000 bba7 	b.w	80061fc <__swbuf_r>
 8005aae:	6813      	ldr	r3, [r2, #0]
 8005ab0:	1c58      	adds	r0, r3, #1
 8005ab2:	6010      	str	r0, [r2, #0]
 8005ab4:	7019      	strb	r1, [r3, #0]
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <__sfputs_r>:
 8005abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	460f      	mov	r7, r1
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	18d5      	adds	r5, r2, r3
 8005ac8:	42ac      	cmp	r4, r5
 8005aca:	d101      	bne.n	8005ad0 <__sfputs_r+0x12>
 8005acc:	2000      	movs	r0, #0
 8005ace:	e007      	b.n	8005ae0 <__sfputs_r+0x22>
 8005ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad4:	463a      	mov	r2, r7
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f7ff ffda 	bl	8005a90 <__sfputc_r>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d1f3      	bne.n	8005ac8 <__sfputs_r+0xa>
 8005ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ae4 <_vfiprintf_r>:
 8005ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	460d      	mov	r5, r1
 8005aea:	b09d      	sub	sp, #116	; 0x74
 8005aec:	4614      	mov	r4, r2
 8005aee:	4698      	mov	r8, r3
 8005af0:	4606      	mov	r6, r0
 8005af2:	b118      	cbz	r0, 8005afc <_vfiprintf_r+0x18>
 8005af4:	6983      	ldr	r3, [r0, #24]
 8005af6:	b90b      	cbnz	r3, 8005afc <_vfiprintf_r+0x18>
 8005af8:	f7ff fd80 	bl	80055fc <__sinit>
 8005afc:	4b89      	ldr	r3, [pc, #548]	; (8005d24 <_vfiprintf_r+0x240>)
 8005afe:	429d      	cmp	r5, r3
 8005b00:	d11b      	bne.n	8005b3a <_vfiprintf_r+0x56>
 8005b02:	6875      	ldr	r5, [r6, #4]
 8005b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b06:	07d9      	lsls	r1, r3, #31
 8005b08:	d405      	bmi.n	8005b16 <_vfiprintf_r+0x32>
 8005b0a:	89ab      	ldrh	r3, [r5, #12]
 8005b0c:	059a      	lsls	r2, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_vfiprintf_r+0x32>
 8005b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b12:	f7ff fe6e 	bl	80057f2 <__retarget_lock_acquire_recursive>
 8005b16:	89ab      	ldrh	r3, [r5, #12]
 8005b18:	071b      	lsls	r3, r3, #28
 8005b1a:	d501      	bpl.n	8005b20 <_vfiprintf_r+0x3c>
 8005b1c:	692b      	ldr	r3, [r5, #16]
 8005b1e:	b9eb      	cbnz	r3, 8005b5c <_vfiprintf_r+0x78>
 8005b20:	4629      	mov	r1, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	f000 fbce 	bl	80062c4 <__swsetup_r>
 8005b28:	b1c0      	cbz	r0, 8005b5c <_vfiprintf_r+0x78>
 8005b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b2c:	07dc      	lsls	r4, r3, #31
 8005b2e:	d50e      	bpl.n	8005b4e <_vfiprintf_r+0x6a>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b34:	b01d      	add	sp, #116	; 0x74
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	4b7b      	ldr	r3, [pc, #492]	; (8005d28 <_vfiprintf_r+0x244>)
 8005b3c:	429d      	cmp	r5, r3
 8005b3e:	d101      	bne.n	8005b44 <_vfiprintf_r+0x60>
 8005b40:	68b5      	ldr	r5, [r6, #8]
 8005b42:	e7df      	b.n	8005b04 <_vfiprintf_r+0x20>
 8005b44:	4b79      	ldr	r3, [pc, #484]	; (8005d2c <_vfiprintf_r+0x248>)
 8005b46:	429d      	cmp	r5, r3
 8005b48:	bf08      	it	eq
 8005b4a:	68f5      	ldreq	r5, [r6, #12]
 8005b4c:	e7da      	b.n	8005b04 <_vfiprintf_r+0x20>
 8005b4e:	89ab      	ldrh	r3, [r5, #12]
 8005b50:	0598      	lsls	r0, r3, #22
 8005b52:	d4ed      	bmi.n	8005b30 <_vfiprintf_r+0x4c>
 8005b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b56:	f7ff fe4d 	bl	80057f4 <__retarget_lock_release_recursive>
 8005b5a:	e7e9      	b.n	8005b30 <_vfiprintf_r+0x4c>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b60:	2320      	movs	r3, #32
 8005b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b6a:	2330      	movs	r3, #48	; 0x30
 8005b6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d30 <_vfiprintf_r+0x24c>
 8005b70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b74:	f04f 0901 	mov.w	r9, #1
 8005b78:	4623      	mov	r3, r4
 8005b7a:	469a      	mov	sl, r3
 8005b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b80:	b10a      	cbz	r2, 8005b86 <_vfiprintf_r+0xa2>
 8005b82:	2a25      	cmp	r2, #37	; 0x25
 8005b84:	d1f9      	bne.n	8005b7a <_vfiprintf_r+0x96>
 8005b86:	ebba 0b04 	subs.w	fp, sl, r4
 8005b8a:	d00b      	beq.n	8005ba4 <_vfiprintf_r+0xc0>
 8005b8c:	465b      	mov	r3, fp
 8005b8e:	4622      	mov	r2, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7ff ff93 	bl	8005abe <__sfputs_r>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f000 80aa 	beq.w	8005cf2 <_vfiprintf_r+0x20e>
 8005b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba0:	445a      	add	r2, fp
 8005ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80a2 	beq.w	8005cf2 <_vfiprintf_r+0x20e>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb8:	f10a 0a01 	add.w	sl, sl, #1
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	9307      	str	r3, [sp, #28]
 8005bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8005bc6:	4654      	mov	r4, sl
 8005bc8:	2205      	movs	r2, #5
 8005bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bce:	4858      	ldr	r0, [pc, #352]	; (8005d30 <_vfiprintf_r+0x24c>)
 8005bd0:	f7fa fb06 	bl	80001e0 <memchr>
 8005bd4:	9a04      	ldr	r2, [sp, #16]
 8005bd6:	b9d8      	cbnz	r0, 8005c10 <_vfiprintf_r+0x12c>
 8005bd8:	06d1      	lsls	r1, r2, #27
 8005bda:	bf44      	itt	mi
 8005bdc:	2320      	movmi	r3, #32
 8005bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005be2:	0713      	lsls	r3, r2, #28
 8005be4:	bf44      	itt	mi
 8005be6:	232b      	movmi	r3, #43	; 0x2b
 8005be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bec:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf2:	d015      	beq.n	8005c20 <_vfiprintf_r+0x13c>
 8005bf4:	9a07      	ldr	r2, [sp, #28]
 8005bf6:	4654      	mov	r4, sl
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	f04f 0c0a 	mov.w	ip, #10
 8005bfe:	4621      	mov	r1, r4
 8005c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c04:	3b30      	subs	r3, #48	; 0x30
 8005c06:	2b09      	cmp	r3, #9
 8005c08:	d94e      	bls.n	8005ca8 <_vfiprintf_r+0x1c4>
 8005c0a:	b1b0      	cbz	r0, 8005c3a <_vfiprintf_r+0x156>
 8005c0c:	9207      	str	r2, [sp, #28]
 8005c0e:	e014      	b.n	8005c3a <_vfiprintf_r+0x156>
 8005c10:	eba0 0308 	sub.w	r3, r0, r8
 8005c14:	fa09 f303 	lsl.w	r3, r9, r3
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	9304      	str	r3, [sp, #16]
 8005c1c:	46a2      	mov	sl, r4
 8005c1e:	e7d2      	b.n	8005bc6 <_vfiprintf_r+0xe2>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	1d19      	adds	r1, r3, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	9103      	str	r1, [sp, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bfbb      	ittet	lt
 8005c2c:	425b      	neglt	r3, r3
 8005c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8005c32:	9307      	strge	r3, [sp, #28]
 8005c34:	9307      	strlt	r3, [sp, #28]
 8005c36:	bfb8      	it	lt
 8005c38:	9204      	strlt	r2, [sp, #16]
 8005c3a:	7823      	ldrb	r3, [r4, #0]
 8005c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c3e:	d10c      	bne.n	8005c5a <_vfiprintf_r+0x176>
 8005c40:	7863      	ldrb	r3, [r4, #1]
 8005c42:	2b2a      	cmp	r3, #42	; 0x2a
 8005c44:	d135      	bne.n	8005cb2 <_vfiprintf_r+0x1ce>
 8005c46:	9b03      	ldr	r3, [sp, #12]
 8005c48:	1d1a      	adds	r2, r3, #4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	9203      	str	r2, [sp, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bfb8      	it	lt
 8005c52:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c56:	3402      	adds	r4, #2
 8005c58:	9305      	str	r3, [sp, #20]
 8005c5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d40 <_vfiprintf_r+0x25c>
 8005c5e:	7821      	ldrb	r1, [r4, #0]
 8005c60:	2203      	movs	r2, #3
 8005c62:	4650      	mov	r0, sl
 8005c64:	f7fa fabc 	bl	80001e0 <memchr>
 8005c68:	b140      	cbz	r0, 8005c7c <_vfiprintf_r+0x198>
 8005c6a:	2340      	movs	r3, #64	; 0x40
 8005c6c:	eba0 000a 	sub.w	r0, r0, sl
 8005c70:	fa03 f000 	lsl.w	r0, r3, r0
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	4303      	orrs	r3, r0
 8005c78:	3401      	adds	r4, #1
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c80:	482c      	ldr	r0, [pc, #176]	; (8005d34 <_vfiprintf_r+0x250>)
 8005c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c86:	2206      	movs	r2, #6
 8005c88:	f7fa faaa 	bl	80001e0 <memchr>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d03f      	beq.n	8005d10 <_vfiprintf_r+0x22c>
 8005c90:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <_vfiprintf_r+0x254>)
 8005c92:	bb1b      	cbnz	r3, 8005cdc <_vfiprintf_r+0x1f8>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	3307      	adds	r3, #7
 8005c98:	f023 0307 	bic.w	r3, r3, #7
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	9303      	str	r3, [sp, #12]
 8005ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca2:	443b      	add	r3, r7
 8005ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca6:	e767      	b.n	8005b78 <_vfiprintf_r+0x94>
 8005ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cac:	460c      	mov	r4, r1
 8005cae:	2001      	movs	r0, #1
 8005cb0:	e7a5      	b.n	8005bfe <_vfiprintf_r+0x11a>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	3401      	adds	r4, #1
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	f04f 0c0a 	mov.w	ip, #10
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cc4:	3a30      	subs	r2, #48	; 0x30
 8005cc6:	2a09      	cmp	r2, #9
 8005cc8:	d903      	bls.n	8005cd2 <_vfiprintf_r+0x1ee>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0c5      	beq.n	8005c5a <_vfiprintf_r+0x176>
 8005cce:	9105      	str	r1, [sp, #20]
 8005cd0:	e7c3      	b.n	8005c5a <_vfiprintf_r+0x176>
 8005cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e7f0      	b.n	8005cbe <_vfiprintf_r+0x1da>
 8005cdc:	ab03      	add	r3, sp, #12
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	462a      	mov	r2, r5
 8005ce2:	4b16      	ldr	r3, [pc, #88]	; (8005d3c <_vfiprintf_r+0x258>)
 8005ce4:	a904      	add	r1, sp, #16
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f3af 8000 	nop.w
 8005cec:	4607      	mov	r7, r0
 8005cee:	1c78      	adds	r0, r7, #1
 8005cf0:	d1d6      	bne.n	8005ca0 <_vfiprintf_r+0x1bc>
 8005cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cf4:	07d9      	lsls	r1, r3, #31
 8005cf6:	d405      	bmi.n	8005d04 <_vfiprintf_r+0x220>
 8005cf8:	89ab      	ldrh	r3, [r5, #12]
 8005cfa:	059a      	lsls	r2, r3, #22
 8005cfc:	d402      	bmi.n	8005d04 <_vfiprintf_r+0x220>
 8005cfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d00:	f7ff fd78 	bl	80057f4 <__retarget_lock_release_recursive>
 8005d04:	89ab      	ldrh	r3, [r5, #12]
 8005d06:	065b      	lsls	r3, r3, #25
 8005d08:	f53f af12 	bmi.w	8005b30 <_vfiprintf_r+0x4c>
 8005d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d0e:	e711      	b.n	8005b34 <_vfiprintf_r+0x50>
 8005d10:	ab03      	add	r3, sp, #12
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	462a      	mov	r2, r5
 8005d16:	4b09      	ldr	r3, [pc, #36]	; (8005d3c <_vfiprintf_r+0x258>)
 8005d18:	a904      	add	r1, sp, #16
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f000 f880 	bl	8005e20 <_printf_i>
 8005d20:	e7e4      	b.n	8005cec <_vfiprintf_r+0x208>
 8005d22:	bf00      	nop
 8005d24:	08006a18 	.word	0x08006a18
 8005d28:	08006a38 	.word	0x08006a38
 8005d2c:	080069f8 	.word	0x080069f8
 8005d30:	08006a58 	.word	0x08006a58
 8005d34:	08006a62 	.word	0x08006a62
 8005d38:	00000000 	.word	0x00000000
 8005d3c:	08005abf 	.word	0x08005abf
 8005d40:	08006a5e 	.word	0x08006a5e

08005d44 <_printf_common>:
 8005d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	4616      	mov	r6, r2
 8005d4a:	4699      	mov	r9, r3
 8005d4c:	688a      	ldr	r2, [r1, #8]
 8005d4e:	690b      	ldr	r3, [r1, #16]
 8005d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d54:	4293      	cmp	r3, r2
 8005d56:	bfb8      	it	lt
 8005d58:	4613      	movlt	r3, r2
 8005d5a:	6033      	str	r3, [r6, #0]
 8005d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d60:	4607      	mov	r7, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	b10a      	cbz	r2, 8005d6a <_printf_common+0x26>
 8005d66:	3301      	adds	r3, #1
 8005d68:	6033      	str	r3, [r6, #0]
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	0699      	lsls	r1, r3, #26
 8005d6e:	bf42      	ittt	mi
 8005d70:	6833      	ldrmi	r3, [r6, #0]
 8005d72:	3302      	addmi	r3, #2
 8005d74:	6033      	strmi	r3, [r6, #0]
 8005d76:	6825      	ldr	r5, [r4, #0]
 8005d78:	f015 0506 	ands.w	r5, r5, #6
 8005d7c:	d106      	bne.n	8005d8c <_printf_common+0x48>
 8005d7e:	f104 0a19 	add.w	sl, r4, #25
 8005d82:	68e3      	ldr	r3, [r4, #12]
 8005d84:	6832      	ldr	r2, [r6, #0]
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	42ab      	cmp	r3, r5
 8005d8a:	dc26      	bgt.n	8005dda <_printf_common+0x96>
 8005d8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d90:	1e13      	subs	r3, r2, #0
 8005d92:	6822      	ldr	r2, [r4, #0]
 8005d94:	bf18      	it	ne
 8005d96:	2301      	movne	r3, #1
 8005d98:	0692      	lsls	r2, r2, #26
 8005d9a:	d42b      	bmi.n	8005df4 <_printf_common+0xb0>
 8005d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005da0:	4649      	mov	r1, r9
 8005da2:	4638      	mov	r0, r7
 8005da4:	47c0      	blx	r8
 8005da6:	3001      	adds	r0, #1
 8005da8:	d01e      	beq.n	8005de8 <_printf_common+0xa4>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	68e5      	ldr	r5, [r4, #12]
 8005dae:	6832      	ldr	r2, [r6, #0]
 8005db0:	f003 0306 	and.w	r3, r3, #6
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	bf08      	it	eq
 8005db8:	1aad      	subeq	r5, r5, r2
 8005dba:	68a3      	ldr	r3, [r4, #8]
 8005dbc:	6922      	ldr	r2, [r4, #16]
 8005dbe:	bf0c      	ite	eq
 8005dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dc4:	2500      	movne	r5, #0
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	bfc4      	itt	gt
 8005dca:	1a9b      	subgt	r3, r3, r2
 8005dcc:	18ed      	addgt	r5, r5, r3
 8005dce:	2600      	movs	r6, #0
 8005dd0:	341a      	adds	r4, #26
 8005dd2:	42b5      	cmp	r5, r6
 8005dd4:	d11a      	bne.n	8005e0c <_printf_common+0xc8>
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	e008      	b.n	8005dec <_printf_common+0xa8>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4652      	mov	r2, sl
 8005dde:	4649      	mov	r1, r9
 8005de0:	4638      	mov	r0, r7
 8005de2:	47c0      	blx	r8
 8005de4:	3001      	adds	r0, #1
 8005de6:	d103      	bne.n	8005df0 <_printf_common+0xac>
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df0:	3501      	adds	r5, #1
 8005df2:	e7c6      	b.n	8005d82 <_printf_common+0x3e>
 8005df4:	18e1      	adds	r1, r4, r3
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	2030      	movs	r0, #48	; 0x30
 8005dfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dfe:	4422      	add	r2, r4
 8005e00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e08:	3302      	adds	r3, #2
 8005e0a:	e7c7      	b.n	8005d9c <_printf_common+0x58>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	4622      	mov	r2, r4
 8005e10:	4649      	mov	r1, r9
 8005e12:	4638      	mov	r0, r7
 8005e14:	47c0      	blx	r8
 8005e16:	3001      	adds	r0, #1
 8005e18:	d0e6      	beq.n	8005de8 <_printf_common+0xa4>
 8005e1a:	3601      	adds	r6, #1
 8005e1c:	e7d9      	b.n	8005dd2 <_printf_common+0x8e>
	...

08005e20 <_printf_i>:
 8005e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	7e0f      	ldrb	r7, [r1, #24]
 8005e26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e28:	2f78      	cmp	r7, #120	; 0x78
 8005e2a:	4691      	mov	r9, r2
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	469a      	mov	sl, r3
 8005e32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e36:	d807      	bhi.n	8005e48 <_printf_i+0x28>
 8005e38:	2f62      	cmp	r7, #98	; 0x62
 8005e3a:	d80a      	bhi.n	8005e52 <_printf_i+0x32>
 8005e3c:	2f00      	cmp	r7, #0
 8005e3e:	f000 80d8 	beq.w	8005ff2 <_printf_i+0x1d2>
 8005e42:	2f58      	cmp	r7, #88	; 0x58
 8005e44:	f000 80a3 	beq.w	8005f8e <_printf_i+0x16e>
 8005e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e50:	e03a      	b.n	8005ec8 <_printf_i+0xa8>
 8005e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e56:	2b15      	cmp	r3, #21
 8005e58:	d8f6      	bhi.n	8005e48 <_printf_i+0x28>
 8005e5a:	a101      	add	r1, pc, #4	; (adr r1, 8005e60 <_printf_i+0x40>)
 8005e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e60:	08005eb9 	.word	0x08005eb9
 8005e64:	08005ecd 	.word	0x08005ecd
 8005e68:	08005e49 	.word	0x08005e49
 8005e6c:	08005e49 	.word	0x08005e49
 8005e70:	08005e49 	.word	0x08005e49
 8005e74:	08005e49 	.word	0x08005e49
 8005e78:	08005ecd 	.word	0x08005ecd
 8005e7c:	08005e49 	.word	0x08005e49
 8005e80:	08005e49 	.word	0x08005e49
 8005e84:	08005e49 	.word	0x08005e49
 8005e88:	08005e49 	.word	0x08005e49
 8005e8c:	08005fd9 	.word	0x08005fd9
 8005e90:	08005efd 	.word	0x08005efd
 8005e94:	08005fbb 	.word	0x08005fbb
 8005e98:	08005e49 	.word	0x08005e49
 8005e9c:	08005e49 	.word	0x08005e49
 8005ea0:	08005ffb 	.word	0x08005ffb
 8005ea4:	08005e49 	.word	0x08005e49
 8005ea8:	08005efd 	.word	0x08005efd
 8005eac:	08005e49 	.word	0x08005e49
 8005eb0:	08005e49 	.word	0x08005e49
 8005eb4:	08005fc3 	.word	0x08005fc3
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	1d1a      	adds	r2, r3, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	602a      	str	r2, [r5, #0]
 8005ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0a3      	b.n	8006014 <_printf_i+0x1f4>
 8005ecc:	6820      	ldr	r0, [r4, #0]
 8005ece:	6829      	ldr	r1, [r5, #0]
 8005ed0:	0606      	lsls	r6, r0, #24
 8005ed2:	f101 0304 	add.w	r3, r1, #4
 8005ed6:	d50a      	bpl.n	8005eee <_printf_i+0xce>
 8005ed8:	680e      	ldr	r6, [r1, #0]
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	2e00      	cmp	r6, #0
 8005ede:	da03      	bge.n	8005ee8 <_printf_i+0xc8>
 8005ee0:	232d      	movs	r3, #45	; 0x2d
 8005ee2:	4276      	negs	r6, r6
 8005ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee8:	485e      	ldr	r0, [pc, #376]	; (8006064 <_printf_i+0x244>)
 8005eea:	230a      	movs	r3, #10
 8005eec:	e019      	b.n	8005f22 <_printf_i+0x102>
 8005eee:	680e      	ldr	r6, [r1, #0]
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ef6:	bf18      	it	ne
 8005ef8:	b236      	sxthne	r6, r6
 8005efa:	e7ef      	b.n	8005edc <_printf_i+0xbc>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	6820      	ldr	r0, [r4, #0]
 8005f00:	1d19      	adds	r1, r3, #4
 8005f02:	6029      	str	r1, [r5, #0]
 8005f04:	0601      	lsls	r1, r0, #24
 8005f06:	d501      	bpl.n	8005f0c <_printf_i+0xec>
 8005f08:	681e      	ldr	r6, [r3, #0]
 8005f0a:	e002      	b.n	8005f12 <_printf_i+0xf2>
 8005f0c:	0646      	lsls	r6, r0, #25
 8005f0e:	d5fb      	bpl.n	8005f08 <_printf_i+0xe8>
 8005f10:	881e      	ldrh	r6, [r3, #0]
 8005f12:	4854      	ldr	r0, [pc, #336]	; (8006064 <_printf_i+0x244>)
 8005f14:	2f6f      	cmp	r7, #111	; 0x6f
 8005f16:	bf0c      	ite	eq
 8005f18:	2308      	moveq	r3, #8
 8005f1a:	230a      	movne	r3, #10
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f22:	6865      	ldr	r5, [r4, #4]
 8005f24:	60a5      	str	r5, [r4, #8]
 8005f26:	2d00      	cmp	r5, #0
 8005f28:	bfa2      	ittt	ge
 8005f2a:	6821      	ldrge	r1, [r4, #0]
 8005f2c:	f021 0104 	bicge.w	r1, r1, #4
 8005f30:	6021      	strge	r1, [r4, #0]
 8005f32:	b90e      	cbnz	r6, 8005f38 <_printf_i+0x118>
 8005f34:	2d00      	cmp	r5, #0
 8005f36:	d04d      	beq.n	8005fd4 <_printf_i+0x1b4>
 8005f38:	4615      	mov	r5, r2
 8005f3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f3e:	fb03 6711 	mls	r7, r3, r1, r6
 8005f42:	5dc7      	ldrb	r7, [r0, r7]
 8005f44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f48:	4637      	mov	r7, r6
 8005f4a:	42bb      	cmp	r3, r7
 8005f4c:	460e      	mov	r6, r1
 8005f4e:	d9f4      	bls.n	8005f3a <_printf_i+0x11a>
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d10b      	bne.n	8005f6c <_printf_i+0x14c>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	07de      	lsls	r6, r3, #31
 8005f58:	d508      	bpl.n	8005f6c <_printf_i+0x14c>
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	6861      	ldr	r1, [r4, #4]
 8005f5e:	4299      	cmp	r1, r3
 8005f60:	bfde      	ittt	le
 8005f62:	2330      	movle	r3, #48	; 0x30
 8005f64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f68:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f6c:	1b52      	subs	r2, r2, r5
 8005f6e:	6122      	str	r2, [r4, #16]
 8005f70:	f8cd a000 	str.w	sl, [sp]
 8005f74:	464b      	mov	r3, r9
 8005f76:	aa03      	add	r2, sp, #12
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	f7ff fee2 	bl	8005d44 <_printf_common>
 8005f80:	3001      	adds	r0, #1
 8005f82:	d14c      	bne.n	800601e <_printf_i+0x1fe>
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f88:	b004      	add	sp, #16
 8005f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8e:	4835      	ldr	r0, [pc, #212]	; (8006064 <_printf_i+0x244>)
 8005f90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f94:	6829      	ldr	r1, [r5, #0]
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f9c:	6029      	str	r1, [r5, #0]
 8005f9e:	061d      	lsls	r5, r3, #24
 8005fa0:	d514      	bpl.n	8005fcc <_printf_i+0x1ac>
 8005fa2:	07df      	lsls	r7, r3, #31
 8005fa4:	bf44      	itt	mi
 8005fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8005faa:	6023      	strmi	r3, [r4, #0]
 8005fac:	b91e      	cbnz	r6, 8005fb6 <_printf_i+0x196>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f023 0320 	bic.w	r3, r3, #32
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	2310      	movs	r3, #16
 8005fb8:	e7b0      	b.n	8005f1c <_printf_i+0xfc>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	f043 0320 	orr.w	r3, r3, #32
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	2378      	movs	r3, #120	; 0x78
 8005fc4:	4828      	ldr	r0, [pc, #160]	; (8006068 <_printf_i+0x248>)
 8005fc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fca:	e7e3      	b.n	8005f94 <_printf_i+0x174>
 8005fcc:	0659      	lsls	r1, r3, #25
 8005fce:	bf48      	it	mi
 8005fd0:	b2b6      	uxthmi	r6, r6
 8005fd2:	e7e6      	b.n	8005fa2 <_printf_i+0x182>
 8005fd4:	4615      	mov	r5, r2
 8005fd6:	e7bb      	b.n	8005f50 <_printf_i+0x130>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	6826      	ldr	r6, [r4, #0]
 8005fdc:	6961      	ldr	r1, [r4, #20]
 8005fde:	1d18      	adds	r0, r3, #4
 8005fe0:	6028      	str	r0, [r5, #0]
 8005fe2:	0635      	lsls	r5, r6, #24
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	d501      	bpl.n	8005fec <_printf_i+0x1cc>
 8005fe8:	6019      	str	r1, [r3, #0]
 8005fea:	e002      	b.n	8005ff2 <_printf_i+0x1d2>
 8005fec:	0670      	lsls	r0, r6, #25
 8005fee:	d5fb      	bpl.n	8005fe8 <_printf_i+0x1c8>
 8005ff0:	8019      	strh	r1, [r3, #0]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6123      	str	r3, [r4, #16]
 8005ff6:	4615      	mov	r5, r2
 8005ff8:	e7ba      	b.n	8005f70 <_printf_i+0x150>
 8005ffa:	682b      	ldr	r3, [r5, #0]
 8005ffc:	1d1a      	adds	r2, r3, #4
 8005ffe:	602a      	str	r2, [r5, #0]
 8006000:	681d      	ldr	r5, [r3, #0]
 8006002:	6862      	ldr	r2, [r4, #4]
 8006004:	2100      	movs	r1, #0
 8006006:	4628      	mov	r0, r5
 8006008:	f7fa f8ea 	bl	80001e0 <memchr>
 800600c:	b108      	cbz	r0, 8006012 <_printf_i+0x1f2>
 800600e:	1b40      	subs	r0, r0, r5
 8006010:	6060      	str	r0, [r4, #4]
 8006012:	6863      	ldr	r3, [r4, #4]
 8006014:	6123      	str	r3, [r4, #16]
 8006016:	2300      	movs	r3, #0
 8006018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800601c:	e7a8      	b.n	8005f70 <_printf_i+0x150>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	462a      	mov	r2, r5
 8006022:	4649      	mov	r1, r9
 8006024:	4640      	mov	r0, r8
 8006026:	47d0      	blx	sl
 8006028:	3001      	adds	r0, #1
 800602a:	d0ab      	beq.n	8005f84 <_printf_i+0x164>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	079b      	lsls	r3, r3, #30
 8006030:	d413      	bmi.n	800605a <_printf_i+0x23a>
 8006032:	68e0      	ldr	r0, [r4, #12]
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	4298      	cmp	r0, r3
 8006038:	bfb8      	it	lt
 800603a:	4618      	movlt	r0, r3
 800603c:	e7a4      	b.n	8005f88 <_printf_i+0x168>
 800603e:	2301      	movs	r3, #1
 8006040:	4632      	mov	r2, r6
 8006042:	4649      	mov	r1, r9
 8006044:	4640      	mov	r0, r8
 8006046:	47d0      	blx	sl
 8006048:	3001      	adds	r0, #1
 800604a:	d09b      	beq.n	8005f84 <_printf_i+0x164>
 800604c:	3501      	adds	r5, #1
 800604e:	68e3      	ldr	r3, [r4, #12]
 8006050:	9903      	ldr	r1, [sp, #12]
 8006052:	1a5b      	subs	r3, r3, r1
 8006054:	42ab      	cmp	r3, r5
 8006056:	dcf2      	bgt.n	800603e <_printf_i+0x21e>
 8006058:	e7eb      	b.n	8006032 <_printf_i+0x212>
 800605a:	2500      	movs	r5, #0
 800605c:	f104 0619 	add.w	r6, r4, #25
 8006060:	e7f5      	b.n	800604e <_printf_i+0x22e>
 8006062:	bf00      	nop
 8006064:	08006a69 	.word	0x08006a69
 8006068:	08006a7a 	.word	0x08006a7a

0800606c <_putc_r>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	460d      	mov	r5, r1
 8006070:	4614      	mov	r4, r2
 8006072:	4606      	mov	r6, r0
 8006074:	b118      	cbz	r0, 800607e <_putc_r+0x12>
 8006076:	6983      	ldr	r3, [r0, #24]
 8006078:	b90b      	cbnz	r3, 800607e <_putc_r+0x12>
 800607a:	f7ff fabf 	bl	80055fc <__sinit>
 800607e:	4b1c      	ldr	r3, [pc, #112]	; (80060f0 <_putc_r+0x84>)
 8006080:	429c      	cmp	r4, r3
 8006082:	d124      	bne.n	80060ce <_putc_r+0x62>
 8006084:	6874      	ldr	r4, [r6, #4]
 8006086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006088:	07d8      	lsls	r0, r3, #31
 800608a:	d405      	bmi.n	8006098 <_putc_r+0x2c>
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	0599      	lsls	r1, r3, #22
 8006090:	d402      	bmi.n	8006098 <_putc_r+0x2c>
 8006092:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006094:	f7ff fbad 	bl	80057f2 <__retarget_lock_acquire_recursive>
 8006098:	68a3      	ldr	r3, [r4, #8]
 800609a:	3b01      	subs	r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	60a3      	str	r3, [r4, #8]
 80060a0:	da05      	bge.n	80060ae <_putc_r+0x42>
 80060a2:	69a2      	ldr	r2, [r4, #24]
 80060a4:	4293      	cmp	r3, r2
 80060a6:	db1c      	blt.n	80060e2 <_putc_r+0x76>
 80060a8:	b2eb      	uxtb	r3, r5
 80060aa:	2b0a      	cmp	r3, #10
 80060ac:	d019      	beq.n	80060e2 <_putc_r+0x76>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	6022      	str	r2, [r4, #0]
 80060b4:	701d      	strb	r5, [r3, #0]
 80060b6:	b2ed      	uxtb	r5, r5
 80060b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ba:	07da      	lsls	r2, r3, #31
 80060bc:	d405      	bmi.n	80060ca <_putc_r+0x5e>
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	059b      	lsls	r3, r3, #22
 80060c2:	d402      	bmi.n	80060ca <_putc_r+0x5e>
 80060c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060c6:	f7ff fb95 	bl	80057f4 <__retarget_lock_release_recursive>
 80060ca:	4628      	mov	r0, r5
 80060cc:	bd70      	pop	{r4, r5, r6, pc}
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <_putc_r+0x88>)
 80060d0:	429c      	cmp	r4, r3
 80060d2:	d101      	bne.n	80060d8 <_putc_r+0x6c>
 80060d4:	68b4      	ldr	r4, [r6, #8]
 80060d6:	e7d6      	b.n	8006086 <_putc_r+0x1a>
 80060d8:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <_putc_r+0x8c>)
 80060da:	429c      	cmp	r4, r3
 80060dc:	bf08      	it	eq
 80060de:	68f4      	ldreq	r4, [r6, #12]
 80060e0:	e7d1      	b.n	8006086 <_putc_r+0x1a>
 80060e2:	4629      	mov	r1, r5
 80060e4:	4622      	mov	r2, r4
 80060e6:	4630      	mov	r0, r6
 80060e8:	f000 f888 	bl	80061fc <__swbuf_r>
 80060ec:	4605      	mov	r5, r0
 80060ee:	e7e3      	b.n	80060b8 <_putc_r+0x4c>
 80060f0:	08006a18 	.word	0x08006a18
 80060f4:	08006a38 	.word	0x08006a38
 80060f8:	080069f8 	.word	0x080069f8

080060fc <__srget_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	460c      	mov	r4, r1
 8006100:	4605      	mov	r5, r0
 8006102:	b118      	cbz	r0, 800610c <__srget_r+0x10>
 8006104:	6983      	ldr	r3, [r0, #24]
 8006106:	b90b      	cbnz	r3, 800610c <__srget_r+0x10>
 8006108:	f7ff fa78 	bl	80055fc <__sinit>
 800610c:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <__srget_r+0x4c>)
 800610e:	429c      	cmp	r4, r3
 8006110:	d10d      	bne.n	800612e <__srget_r+0x32>
 8006112:	686c      	ldr	r4, [r5, #4]
 8006114:	4621      	mov	r1, r4
 8006116:	4628      	mov	r0, r5
 8006118:	f000 f9ae 	bl	8006478 <__srefill_r>
 800611c:	b988      	cbnz	r0, 8006142 <__srget_r+0x46>
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	3b01      	subs	r3, #1
 8006122:	6063      	str	r3, [r4, #4]
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	6022      	str	r2, [r4, #0]
 800612a:	7818      	ldrb	r0, [r3, #0]
 800612c:	bd38      	pop	{r3, r4, r5, pc}
 800612e:	4b07      	ldr	r3, [pc, #28]	; (800614c <__srget_r+0x50>)
 8006130:	429c      	cmp	r4, r3
 8006132:	d101      	bne.n	8006138 <__srget_r+0x3c>
 8006134:	68ac      	ldr	r4, [r5, #8]
 8006136:	e7ed      	b.n	8006114 <__srget_r+0x18>
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <__srget_r+0x54>)
 800613a:	429c      	cmp	r4, r3
 800613c:	bf08      	it	eq
 800613e:	68ec      	ldreq	r4, [r5, #12]
 8006140:	e7e8      	b.n	8006114 <__srget_r+0x18>
 8006142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006146:	e7f1      	b.n	800612c <__srget_r+0x30>
 8006148:	08006a18 	.word	0x08006a18
 800614c:	08006a38 	.word	0x08006a38
 8006150:	080069f8 	.word	0x080069f8

08006154 <_sbrk_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d06      	ldr	r5, [pc, #24]	; (8006170 <_sbrk_r+0x1c>)
 8006158:	2300      	movs	r3, #0
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	f7fb f9e8 	bl	8001534 <_sbrk>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_sbrk_r+0x1a>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_sbrk_r+0x1a>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	20000af4 	.word	0x20000af4

08006174 <__sread>:
 8006174:	b510      	push	{r4, lr}
 8006176:	460c      	mov	r4, r1
 8006178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800617c:	f000 f960 	bl	8006440 <_read_r>
 8006180:	2800      	cmp	r0, #0
 8006182:	bfab      	itete	ge
 8006184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006186:	89a3      	ldrhlt	r3, [r4, #12]
 8006188:	181b      	addge	r3, r3, r0
 800618a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800618e:	bfac      	ite	ge
 8006190:	6563      	strge	r3, [r4, #84]	; 0x54
 8006192:	81a3      	strhlt	r3, [r4, #12]
 8006194:	bd10      	pop	{r4, pc}

08006196 <__swrite>:
 8006196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800619a:	461f      	mov	r7, r3
 800619c:	898b      	ldrh	r3, [r1, #12]
 800619e:	05db      	lsls	r3, r3, #23
 80061a0:	4605      	mov	r5, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	4616      	mov	r6, r2
 80061a6:	d505      	bpl.n	80061b4 <__swrite+0x1e>
 80061a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ac:	2302      	movs	r3, #2
 80061ae:	2200      	movs	r2, #0
 80061b0:	f000 f928 	bl	8006404 <_lseek_r>
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061be:	81a3      	strh	r3, [r4, #12]
 80061c0:	4632      	mov	r2, r6
 80061c2:	463b      	mov	r3, r7
 80061c4:	4628      	mov	r0, r5
 80061c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ca:	f000 b869 	b.w	80062a0 <_write_r>

080061ce <__sseek>:
 80061ce:	b510      	push	{r4, lr}
 80061d0:	460c      	mov	r4, r1
 80061d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d6:	f000 f915 	bl	8006404 <_lseek_r>
 80061da:	1c43      	adds	r3, r0, #1
 80061dc:	89a3      	ldrh	r3, [r4, #12]
 80061de:	bf15      	itete	ne
 80061e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80061e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061ea:	81a3      	strheq	r3, [r4, #12]
 80061ec:	bf18      	it	ne
 80061ee:	81a3      	strhne	r3, [r4, #12]
 80061f0:	bd10      	pop	{r4, pc}

080061f2 <__sclose>:
 80061f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f6:	f000 b8d3 	b.w	80063a0 <_close_r>
	...

080061fc <__swbuf_r>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	460e      	mov	r6, r1
 8006200:	4614      	mov	r4, r2
 8006202:	4605      	mov	r5, r0
 8006204:	b118      	cbz	r0, 800620e <__swbuf_r+0x12>
 8006206:	6983      	ldr	r3, [r0, #24]
 8006208:	b90b      	cbnz	r3, 800620e <__swbuf_r+0x12>
 800620a:	f7ff f9f7 	bl	80055fc <__sinit>
 800620e:	4b21      	ldr	r3, [pc, #132]	; (8006294 <__swbuf_r+0x98>)
 8006210:	429c      	cmp	r4, r3
 8006212:	d12b      	bne.n	800626c <__swbuf_r+0x70>
 8006214:	686c      	ldr	r4, [r5, #4]
 8006216:	69a3      	ldr	r3, [r4, #24]
 8006218:	60a3      	str	r3, [r4, #8]
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	071a      	lsls	r2, r3, #28
 800621e:	d52f      	bpl.n	8006280 <__swbuf_r+0x84>
 8006220:	6923      	ldr	r3, [r4, #16]
 8006222:	b36b      	cbz	r3, 8006280 <__swbuf_r+0x84>
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	6820      	ldr	r0, [r4, #0]
 8006228:	1ac0      	subs	r0, r0, r3
 800622a:	6963      	ldr	r3, [r4, #20]
 800622c:	b2f6      	uxtb	r6, r6
 800622e:	4283      	cmp	r3, r0
 8006230:	4637      	mov	r7, r6
 8006232:	dc04      	bgt.n	800623e <__swbuf_r+0x42>
 8006234:	4621      	mov	r1, r4
 8006236:	4628      	mov	r0, r5
 8006238:	f7ff f93a 	bl	80054b0 <_fflush_r>
 800623c:	bb30      	cbnz	r0, 800628c <__swbuf_r+0x90>
 800623e:	68a3      	ldr	r3, [r4, #8]
 8006240:	3b01      	subs	r3, #1
 8006242:	60a3      	str	r3, [r4, #8]
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	6022      	str	r2, [r4, #0]
 800624a:	701e      	strb	r6, [r3, #0]
 800624c:	6963      	ldr	r3, [r4, #20]
 800624e:	3001      	adds	r0, #1
 8006250:	4283      	cmp	r3, r0
 8006252:	d004      	beq.n	800625e <__swbuf_r+0x62>
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	07db      	lsls	r3, r3, #31
 8006258:	d506      	bpl.n	8006268 <__swbuf_r+0x6c>
 800625a:	2e0a      	cmp	r6, #10
 800625c:	d104      	bne.n	8006268 <__swbuf_r+0x6c>
 800625e:	4621      	mov	r1, r4
 8006260:	4628      	mov	r0, r5
 8006262:	f7ff f925 	bl	80054b0 <_fflush_r>
 8006266:	b988      	cbnz	r0, 800628c <__swbuf_r+0x90>
 8006268:	4638      	mov	r0, r7
 800626a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <__swbuf_r+0x9c>)
 800626e:	429c      	cmp	r4, r3
 8006270:	d101      	bne.n	8006276 <__swbuf_r+0x7a>
 8006272:	68ac      	ldr	r4, [r5, #8]
 8006274:	e7cf      	b.n	8006216 <__swbuf_r+0x1a>
 8006276:	4b09      	ldr	r3, [pc, #36]	; (800629c <__swbuf_r+0xa0>)
 8006278:	429c      	cmp	r4, r3
 800627a:	bf08      	it	eq
 800627c:	68ec      	ldreq	r4, [r5, #12]
 800627e:	e7ca      	b.n	8006216 <__swbuf_r+0x1a>
 8006280:	4621      	mov	r1, r4
 8006282:	4628      	mov	r0, r5
 8006284:	f000 f81e 	bl	80062c4 <__swsetup_r>
 8006288:	2800      	cmp	r0, #0
 800628a:	d0cb      	beq.n	8006224 <__swbuf_r+0x28>
 800628c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006290:	e7ea      	b.n	8006268 <__swbuf_r+0x6c>
 8006292:	bf00      	nop
 8006294:	08006a18 	.word	0x08006a18
 8006298:	08006a38 	.word	0x08006a38
 800629c:	080069f8 	.word	0x080069f8

080062a0 <_write_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4d07      	ldr	r5, [pc, #28]	; (80062c0 <_write_r+0x20>)
 80062a4:	4604      	mov	r4, r0
 80062a6:	4608      	mov	r0, r1
 80062a8:	4611      	mov	r1, r2
 80062aa:	2200      	movs	r2, #0
 80062ac:	602a      	str	r2, [r5, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f7fa fee6 	bl	8001080 <_write>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_write_r+0x1e>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_write_r+0x1e>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	20000af4 	.word	0x20000af4

080062c4 <__swsetup_r>:
 80062c4:	4b32      	ldr	r3, [pc, #200]	; (8006390 <__swsetup_r+0xcc>)
 80062c6:	b570      	push	{r4, r5, r6, lr}
 80062c8:	681d      	ldr	r5, [r3, #0]
 80062ca:	4606      	mov	r6, r0
 80062cc:	460c      	mov	r4, r1
 80062ce:	b125      	cbz	r5, 80062da <__swsetup_r+0x16>
 80062d0:	69ab      	ldr	r3, [r5, #24]
 80062d2:	b913      	cbnz	r3, 80062da <__swsetup_r+0x16>
 80062d4:	4628      	mov	r0, r5
 80062d6:	f7ff f991 	bl	80055fc <__sinit>
 80062da:	4b2e      	ldr	r3, [pc, #184]	; (8006394 <__swsetup_r+0xd0>)
 80062dc:	429c      	cmp	r4, r3
 80062de:	d10f      	bne.n	8006300 <__swsetup_r+0x3c>
 80062e0:	686c      	ldr	r4, [r5, #4]
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062e8:	0719      	lsls	r1, r3, #28
 80062ea:	d42c      	bmi.n	8006346 <__swsetup_r+0x82>
 80062ec:	06dd      	lsls	r5, r3, #27
 80062ee:	d411      	bmi.n	8006314 <__swsetup_r+0x50>
 80062f0:	2309      	movs	r3, #9
 80062f2:	6033      	str	r3, [r6, #0]
 80062f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062f8:	81a3      	strh	r3, [r4, #12]
 80062fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062fe:	e03e      	b.n	800637e <__swsetup_r+0xba>
 8006300:	4b25      	ldr	r3, [pc, #148]	; (8006398 <__swsetup_r+0xd4>)
 8006302:	429c      	cmp	r4, r3
 8006304:	d101      	bne.n	800630a <__swsetup_r+0x46>
 8006306:	68ac      	ldr	r4, [r5, #8]
 8006308:	e7eb      	b.n	80062e2 <__swsetup_r+0x1e>
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <__swsetup_r+0xd8>)
 800630c:	429c      	cmp	r4, r3
 800630e:	bf08      	it	eq
 8006310:	68ec      	ldreq	r4, [r5, #12]
 8006312:	e7e6      	b.n	80062e2 <__swsetup_r+0x1e>
 8006314:	0758      	lsls	r0, r3, #29
 8006316:	d512      	bpl.n	800633e <__swsetup_r+0x7a>
 8006318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800631a:	b141      	cbz	r1, 800632e <__swsetup_r+0x6a>
 800631c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006320:	4299      	cmp	r1, r3
 8006322:	d002      	beq.n	800632a <__swsetup_r+0x66>
 8006324:	4630      	mov	r0, r6
 8006326:	f7ff fad3 	bl	80058d0 <_free_r>
 800632a:	2300      	movs	r3, #0
 800632c:	6363      	str	r3, [r4, #52]	; 0x34
 800632e:	89a3      	ldrh	r3, [r4, #12]
 8006330:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006334:	81a3      	strh	r3, [r4, #12]
 8006336:	2300      	movs	r3, #0
 8006338:	6063      	str	r3, [r4, #4]
 800633a:	6923      	ldr	r3, [r4, #16]
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	89a3      	ldrh	r3, [r4, #12]
 8006340:	f043 0308 	orr.w	r3, r3, #8
 8006344:	81a3      	strh	r3, [r4, #12]
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	b94b      	cbnz	r3, 800635e <__swsetup_r+0x9a>
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006354:	d003      	beq.n	800635e <__swsetup_r+0x9a>
 8006356:	4621      	mov	r1, r4
 8006358:	4630      	mov	r0, r6
 800635a:	f7ff fa71 	bl	8005840 <__smakebuf_r>
 800635e:	89a0      	ldrh	r0, [r4, #12]
 8006360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006364:	f010 0301 	ands.w	r3, r0, #1
 8006368:	d00a      	beq.n	8006380 <__swsetup_r+0xbc>
 800636a:	2300      	movs	r3, #0
 800636c:	60a3      	str	r3, [r4, #8]
 800636e:	6963      	ldr	r3, [r4, #20]
 8006370:	425b      	negs	r3, r3
 8006372:	61a3      	str	r3, [r4, #24]
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	b943      	cbnz	r3, 800638a <__swsetup_r+0xc6>
 8006378:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800637c:	d1ba      	bne.n	80062f4 <__swsetup_r+0x30>
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	0781      	lsls	r1, r0, #30
 8006382:	bf58      	it	pl
 8006384:	6963      	ldrpl	r3, [r4, #20]
 8006386:	60a3      	str	r3, [r4, #8]
 8006388:	e7f4      	b.n	8006374 <__swsetup_r+0xb0>
 800638a:	2000      	movs	r0, #0
 800638c:	e7f7      	b.n	800637e <__swsetup_r+0xba>
 800638e:	bf00      	nop
 8006390:	2000000c 	.word	0x2000000c
 8006394:	08006a18 	.word	0x08006a18
 8006398:	08006a38 	.word	0x08006a38
 800639c:	080069f8 	.word	0x080069f8

080063a0 <_close_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d06      	ldr	r5, [pc, #24]	; (80063bc <_close_r+0x1c>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fb f88e 	bl	80014cc <_close>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_close_r+0x1a>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_close_r+0x1a>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	20000af4 	.word	0x20000af4

080063c0 <_fstat_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d07      	ldr	r5, [pc, #28]	; (80063e0 <_fstat_r+0x20>)
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	f7fb f889 	bl	80014e4 <_fstat>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d102      	bne.n	80063dc <_fstat_r+0x1c>
 80063d6:	682b      	ldr	r3, [r5, #0]
 80063d8:	b103      	cbz	r3, 80063dc <_fstat_r+0x1c>
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	bd38      	pop	{r3, r4, r5, pc}
 80063de:	bf00      	nop
 80063e0:	20000af4 	.word	0x20000af4

080063e4 <_isatty_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d06      	ldr	r5, [pc, #24]	; (8006400 <_isatty_r+0x1c>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	f7fb f888 	bl	8001504 <_isatty>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_isatty_r+0x1a>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_isatty_r+0x1a>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	20000af4 	.word	0x20000af4

08006404 <_lseek_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4d07      	ldr	r5, [pc, #28]	; (8006424 <_lseek_r+0x20>)
 8006408:	4604      	mov	r4, r0
 800640a:	4608      	mov	r0, r1
 800640c:	4611      	mov	r1, r2
 800640e:	2200      	movs	r2, #0
 8006410:	602a      	str	r2, [r5, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	f7fb f881 	bl	800151a <_lseek>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d102      	bne.n	8006422 <_lseek_r+0x1e>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	b103      	cbz	r3, 8006422 <_lseek_r+0x1e>
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	20000af4 	.word	0x20000af4

08006428 <__malloc_lock>:
 8006428:	4801      	ldr	r0, [pc, #4]	; (8006430 <__malloc_lock+0x8>)
 800642a:	f7ff b9e2 	b.w	80057f2 <__retarget_lock_acquire_recursive>
 800642e:	bf00      	nop
 8006430:	20000ae8 	.word	0x20000ae8

08006434 <__malloc_unlock>:
 8006434:	4801      	ldr	r0, [pc, #4]	; (800643c <__malloc_unlock+0x8>)
 8006436:	f7ff b9dd 	b.w	80057f4 <__retarget_lock_release_recursive>
 800643a:	bf00      	nop
 800643c:	20000ae8 	.word	0x20000ae8

08006440 <_read_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d07      	ldr	r5, [pc, #28]	; (8006460 <_read_r+0x20>)
 8006444:	4604      	mov	r4, r0
 8006446:	4608      	mov	r0, r1
 8006448:	4611      	mov	r1, r2
 800644a:	2200      	movs	r2, #0
 800644c:	602a      	str	r2, [r5, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f7fa fdf0 	bl	8001034 <_read>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_read_r+0x1e>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_read_r+0x1e>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	20000af4 	.word	0x20000af4

08006464 <lflush>:
 8006464:	8983      	ldrh	r3, [r0, #12]
 8006466:	f003 0309 	and.w	r3, r3, #9
 800646a:	2b09      	cmp	r3, #9
 800646c:	d101      	bne.n	8006472 <lflush+0xe>
 800646e:	f7ff b85b 	b.w	8005528 <fflush>
 8006472:	2000      	movs	r0, #0
 8006474:	4770      	bx	lr
	...

08006478 <__srefill_r>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	460c      	mov	r4, r1
 800647c:	4605      	mov	r5, r0
 800647e:	b118      	cbz	r0, 8006488 <__srefill_r+0x10>
 8006480:	6983      	ldr	r3, [r0, #24]
 8006482:	b90b      	cbnz	r3, 8006488 <__srefill_r+0x10>
 8006484:	f7ff f8ba 	bl	80055fc <__sinit>
 8006488:	4b3b      	ldr	r3, [pc, #236]	; (8006578 <__srefill_r+0x100>)
 800648a:	429c      	cmp	r4, r3
 800648c:	d10a      	bne.n	80064a4 <__srefill_r+0x2c>
 800648e:	686c      	ldr	r4, [r5, #4]
 8006490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006494:	2300      	movs	r3, #0
 8006496:	6063      	str	r3, [r4, #4]
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	069e      	lsls	r6, r3, #26
 800649c:	d50c      	bpl.n	80064b8 <__srefill_r+0x40>
 800649e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064a2:	e066      	b.n	8006572 <__srefill_r+0xfa>
 80064a4:	4b35      	ldr	r3, [pc, #212]	; (800657c <__srefill_r+0x104>)
 80064a6:	429c      	cmp	r4, r3
 80064a8:	d101      	bne.n	80064ae <__srefill_r+0x36>
 80064aa:	68ac      	ldr	r4, [r5, #8]
 80064ac:	e7f0      	b.n	8006490 <__srefill_r+0x18>
 80064ae:	4b34      	ldr	r3, [pc, #208]	; (8006580 <__srefill_r+0x108>)
 80064b0:	429c      	cmp	r4, r3
 80064b2:	bf08      	it	eq
 80064b4:	68ec      	ldreq	r4, [r5, #12]
 80064b6:	e7eb      	b.n	8006490 <__srefill_r+0x18>
 80064b8:	0758      	lsls	r0, r3, #29
 80064ba:	d448      	bmi.n	800654e <__srefill_r+0xd6>
 80064bc:	06d9      	lsls	r1, r3, #27
 80064be:	d405      	bmi.n	80064cc <__srefill_r+0x54>
 80064c0:	2309      	movs	r3, #9
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	e7e8      	b.n	800649e <__srefill_r+0x26>
 80064cc:	071a      	lsls	r2, r3, #28
 80064ce:	d50b      	bpl.n	80064e8 <__srefill_r+0x70>
 80064d0:	4621      	mov	r1, r4
 80064d2:	4628      	mov	r0, r5
 80064d4:	f7fe ffec 	bl	80054b0 <_fflush_r>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d1e0      	bne.n	800649e <__srefill_r+0x26>
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	60a0      	str	r0, [r4, #8]
 80064e0:	f023 0308 	bic.w	r3, r3, #8
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	61a0      	str	r0, [r4, #24]
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f043 0304 	orr.w	r3, r3, #4
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	6923      	ldr	r3, [r4, #16]
 80064f2:	b91b      	cbnz	r3, 80064fc <__srefill_r+0x84>
 80064f4:	4621      	mov	r1, r4
 80064f6:	4628      	mov	r0, r5
 80064f8:	f7ff f9a2 	bl	8005840 <__smakebuf_r>
 80064fc:	89a6      	ldrh	r6, [r4, #12]
 80064fe:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006502:	07b3      	lsls	r3, r6, #30
 8006504:	d00f      	beq.n	8006526 <__srefill_r+0xae>
 8006506:	2301      	movs	r3, #1
 8006508:	81a3      	strh	r3, [r4, #12]
 800650a:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <__srefill_r+0x10c>)
 800650c:	491e      	ldr	r1, [pc, #120]	; (8006588 <__srefill_r+0x110>)
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	f006 0609 	and.w	r6, r6, #9
 8006514:	f7ff f8f0 	bl	80056f8 <_fwalk>
 8006518:	2e09      	cmp	r6, #9
 800651a:	81a7      	strh	r7, [r4, #12]
 800651c:	d103      	bne.n	8006526 <__srefill_r+0xae>
 800651e:	4621      	mov	r1, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f7fe ff3f 	bl	80053a4 <__sflush_r>
 8006526:	6922      	ldr	r2, [r4, #16]
 8006528:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800652a:	6963      	ldr	r3, [r4, #20]
 800652c:	6a21      	ldr	r1, [r4, #32]
 800652e:	6022      	str	r2, [r4, #0]
 8006530:	4628      	mov	r0, r5
 8006532:	47b0      	blx	r6
 8006534:	2800      	cmp	r0, #0
 8006536:	6060      	str	r0, [r4, #4]
 8006538:	dc1c      	bgt.n	8006574 <__srefill_r+0xfc>
 800653a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653e:	bf17      	itett	ne
 8006540:	2200      	movne	r2, #0
 8006542:	f043 0320 	orreq.w	r3, r3, #32
 8006546:	6062      	strne	r2, [r4, #4]
 8006548:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800654c:	e7bc      	b.n	80064c8 <__srefill_r+0x50>
 800654e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006550:	2900      	cmp	r1, #0
 8006552:	d0cd      	beq.n	80064f0 <__srefill_r+0x78>
 8006554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006558:	4299      	cmp	r1, r3
 800655a:	d002      	beq.n	8006562 <__srefill_r+0xea>
 800655c:	4628      	mov	r0, r5
 800655e:	f7ff f9b7 	bl	80058d0 <_free_r>
 8006562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006564:	6063      	str	r3, [r4, #4]
 8006566:	2000      	movs	r0, #0
 8006568:	6360      	str	r0, [r4, #52]	; 0x34
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0c0      	beq.n	80064f0 <__srefill_r+0x78>
 800656e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006574:	2000      	movs	r0, #0
 8006576:	e7fc      	b.n	8006572 <__srefill_r+0xfa>
 8006578:	08006a18 	.word	0x08006a18
 800657c:	08006a38 	.word	0x08006a38
 8006580:	080069f8 	.word	0x080069f8
 8006584:	080068f0 	.word	0x080068f0
 8006588:	08006465 	.word	0x08006465

0800658c <_init>:
 800658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658e:	bf00      	nop
 8006590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006592:	bc08      	pop	{r3}
 8006594:	469e      	mov	lr, r3
 8006596:	4770      	bx	lr

08006598 <_fini>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	bf00      	nop
 800659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659e:	bc08      	pop	{r3}
 80065a0:	469e      	mov	lr, r3
 80065a2:	4770      	bx	lr
