
F411-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000656c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c2c  08006c2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c2c  08006c2c  00016c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c34  08006c34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c34  08006c34  00016c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c38  08006c38  00016c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a90  20000070  08006cac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  08006cac  00020b00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001274f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d98  00000000  00000000  000327ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00035588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00036530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019af3  00000000  00000000  00037390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e96  00000000  00000000  00050e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009be31  00000000  00000000  00064d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  00100b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066f4 	.word	0x080066f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080066f4 	.word	0x080066f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_ADC1_Init+0xa0>)
 8000598:	4a23      	ldr	r2, [pc, #140]	; (8000628 <MX_ADC1_Init+0xa4>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_ADC1_Init+0xa0>)
 800059e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005c2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005d8:	2201      	movs	r2, #1
 80005da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ec:	f001 fa66 	bl	8001abc <HAL_ADC_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80005f6:	f000 ff31 	bl	800145c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80005fa:	230e      	movs	r3, #14
 80005fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_ADC1_Init+0xa0>)
 800060c:	f001 fbf8 	bl	8001e00 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000616:	f000 ff21 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000008c 	.word	0x2000008c
 8000628:	40012000 	.word	0x40012000

0800062c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <HAL_ADC_MspInit+0xdc>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d157      	bne.n	80006fe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	4a2d      	ldr	r2, [pc, #180]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065c:	6453      	str	r3, [r2, #68]	; 0x44
 800065e:	4b2b      	ldr	r3, [pc, #172]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a26      	ldr	r2, [pc, #152]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b24      	ldr	r3, [pc, #144]	; (800070c <HAL_ADC_MspInit+0xe0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000686:	2310      	movs	r3, #16
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068a:	2303      	movs	r3, #3
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	481d      	ldr	r0, [pc, #116]	; (8000710 <HAL_ADC_MspInit+0xe4>)
 800069a:	f002 fb53 	bl	8002d44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <HAL_ADC_MspInit+0xec>)
 80006a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006e4:	f001 ff4e 	bl	8002584 <HAL_DMA_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006ee:	f000 feb5 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006f6:	639a      	str	r2, [r3, #56]	; 0x38
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40012000 	.word	0x40012000
 800070c:	40023800 	.word	0x40023800
 8000710:	40020800 	.word	0x40020800
 8000714:	200000d4 	.word	0x200000d4
 8000718:	40026410 	.word	0x40026410

0800071c <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	440b      	add	r3, r1
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	429a      	cmp	r2, r3
 8000740:	d114      	bne.n	800076c <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000742:	2301      	movs	r3, #1
 8000744:	60bb      	str	r3, [r7, #8]
		i++;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3301      	adds	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 800074c:	e00e      	b.n	800076c <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4413      	add	r3, r2
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	440b      	add	r3, r1
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	429a      	cmp	r2, r3
 8000760:	d001      	beq.n	8000766 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3301      	adds	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d11a      	bne.n	80007a8 <ConsoleCommandMatch+0x8c>
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b09      	cmp	r3, #9
 8000776:	d817      	bhi.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000778:	683a      	ldr	r2, [r7, #0]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000780:	2b20      	cmp	r3, #32
 8000782:	d011      	beq.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800078c:	2b0a      	cmp	r3, #10
 800078e:	d00b      	beq.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b0d      	cmp	r3, #13
 800079a:	d005      	beq.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1d2      	bne.n	800074e <ConsoleCommandMatch+0x32>
	}

	return result;
 80007a8:	68bb      	ldr	r3, [r7, #8]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b087      	sub	sp, #28
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	60f8      	str	r0, [r7, #12]
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80007ce:	e00d      	b.n	80007ec <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	441a      	add	r2, r3
 80007d6:	68f9      	ldr	r1, [r7, #12]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	440b      	add	r3, r1
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	701a      	strb	r2, [r3, #0]
		i++;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3ed      	bcc.n	80007d0 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80007f4:	e007      	b.n	8000806 <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	4413      	add	r3, r2
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3301      	adds	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	2bff      	cmp	r3, #255	; 0xff
 800080a:	d9f4      	bls.n	80007f6 <ConsoleResetBuffer+0x40>
	}
	return remaining;
 800080c:	693b      	ldr	r3, [r7, #16]
}
 800080e:	4618      	mov	r0, r3
 8000810:	371c      	adds	r7, #28
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082c:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800082e:	e002      	b.n	8000836 <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3301      	adds	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b0d      	cmp	r3, #13
 8000840:	d009      	beq.n	8000856 <ConsoleCommandEndline+0x3c>
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b0a      	cmp	r3, #10
 800084c:	d003      	beq.n	8000856 <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d3ec      	bcc.n	8000830 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	429a      	cmp	r2, r3
 800085c:	d201      	bcs.n	8000862 <ConsoleCommandEndline+0x48>
	{
		result = i;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000862:	68bb      	ldr	r3, [r7, #8]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000876:	f000 fc17 	bl	80010a8 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to El Consolo, your gateway to testing code and hardware.");
 800087a:	480f      	ldr	r0, [pc, #60]	; (80008b8 <ConsoleInit+0x48>)
 800087c:	f000 fc48 	bl	8001110 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000880:	480e      	ldr	r0, [pc, #56]	; (80008bc <ConsoleInit+0x4c>)
 8000882:	f000 fc45 	bl	8001110 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <ConsoleInit+0x50>)
 8000888:	f000 fc42 	bl	8001110 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <ConsoleInit+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e007      	b.n	80008a8 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <ConsoleInit+0x58>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2bff      	cmp	r3, #255	; 0xff
 80008ac:	d9f4      	bls.n	8000898 <ConsoleInit+0x28>
	}

}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800670c 	.word	0x0800670c
 80008bc:	08006750 	.word	0x08006750
 80008c0:	08006754 	.word	0x08006754
 80008c4:	20000234 	.word	0x20000234
 80008c8:	20000134 	.word	0x20000134

080008cc <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80008d2:	4b54      	ldr	r3, [pc, #336]	; (8000a24 <ConsoleProcess+0x158>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a54      	ldr	r2, [pc, #336]	; (8000a28 <ConsoleProcess+0x15c>)
 80008d8:	1898      	adds	r0, r3, r2
 80008da:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <ConsoleProcess+0x158>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80008e2:	463a      	mov	r2, r7
 80008e4:	4619      	mov	r1, r3
 80008e6:	f000 fbe6 	bl	80010b6 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <ConsoleProcess+0x2e>
 80008f0:	4b4e      	ldr	r3, [pc, #312]	; (8000a2c <ConsoleProcess+0x160>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 8091 	beq.w	8000a1c <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 80008fa:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <ConsoleProcess+0x160>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000900:	4b48      	ldr	r3, [pc, #288]	; (8000a24 <ConsoleProcess+0x158>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a46      	ldr	r2, [pc, #280]	; (8000a24 <ConsoleProcess+0x158>)
 800090a:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 800090c:	4b45      	ldr	r3, [pc, #276]	; (8000a24 <ConsoleProcess+0x158>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	4845      	ldr	r0, [pc, #276]	; (8000a28 <ConsoleProcess+0x15c>)
 8000914:	f7ff ff81 	bl	800081a <ConsoleCommandEndline>
 8000918:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db7d      	blt.n	8000a1c <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000920:	f000 fb7e 	bl	8001020 <ConsoleCommandsGetTable>
 8000924:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800092e:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000930:	e03d      	b.n	80009ae <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	4613      	mov	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	4413      	add	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	461a      	mov	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4938      	ldr	r1, [pc, #224]	; (8000a28 <ConsoleProcess+0x15c>)
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fee8 	bl	800071c <ConsoleCommandMatch>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d02a      	beq.n	80009a8 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4613      	mov	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	461a      	mov	r2, r3
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4413      	add	r3, r2
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4830      	ldr	r0, [pc, #192]	; (8000a28 <ConsoleProcess+0x15c>)
 8000966:	4798      	blx	r3
 8000968:	4603      	mov	r3, r0
 800096a:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d017      	beq.n	80009a2 <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 8000972:	482f      	ldr	r0, [pc, #188]	; (8000a30 <ConsoleProcess+0x164>)
 8000974:	f000 fbcc 	bl	8001110 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 8000978:	482b      	ldr	r0, [pc, #172]	; (8000a28 <ConsoleProcess+0x15c>)
 800097a:	f000 fbc9 	bl	8001110 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800097e:	482d      	ldr	r0, [pc, #180]	; (8000a34 <ConsoleProcess+0x168>)
 8000980:	f000 fbc6 	bl	8001110 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	4613      	mov	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	4413      	add	r3, r2
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	461a      	mov	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4413      	add	r3, r2
 8000994:	3308      	adds	r3, #8
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fbba 	bl	8001110 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 800099c:	4826      	ldr	r0, [pc, #152]	; (8000a38 <ConsoleProcess+0x16c>)
 800099e:	f000 fbb7 	bl	8001110 <ConsoleIoSendString>

					}
					found = cmdIndex;
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	e002      	b.n	80009ae <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3301      	adds	r3, #1
 80009ac:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	4613      	mov	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	4413      	add	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	461a      	mov	r2, r3
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <ConsoleProcess+0x100>
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009ca:	d0b2      	beq.n	8000932 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00d      	beq.n	80009ee <ConsoleProcess+0x122>
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009d8:	d109      	bne.n	80009ee <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <ConsoleProcess+0x158>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d905      	bls.n	80009ee <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 80009e2:	4816      	ldr	r0, [pc, #88]	; (8000a3c <ConsoleProcess+0x170>)
 80009e4:	f000 fb94 	bl	8001110 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <ConsoleProcess+0x16c>)
 80009ea:	f000 fb91 	bl	8001110 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <ConsoleProcess+0x158>)
 80009f0:	6819      	ldr	r1, [r3, #0]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	461a      	mov	r2, r3
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <ConsoleProcess+0x15c>)
 80009fa:	f7ff fedc 	bl	80007b6 <ConsoleResetBuffer>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <ConsoleProcess+0x158>)
 8000a02:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <ConsoleProcess+0x158>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf14      	ite	ne
 8000a0c:	2301      	movne	r3, #1
 8000a0e:	2300      	moveq	r3, #0
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <ConsoleProcess+0x160>)
 8000a14:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000a16:	480a      	ldr	r0, [pc, #40]	; (8000a40 <ConsoleProcess+0x174>)
 8000a18:	f000 fb7a 	bl	8001110 <ConsoleIoSendString>
		}
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000234 	.word	0x20000234
 8000a28:	20000134 	.word	0x20000134
 8000a2c:	20000238 	.word	0x20000238
 8000a30:	08006758 	.word	0x08006758
 8000a34:	08006760 	.word	0x08006760
 8000a38:	08006750 	.word	0x08006750
 8000a3c:	08006768 	.word	0x08006768
 8000a40:	08006754 	.word	0x08006754

08000a44 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000a5e:	e00b      	b.n	8000a78 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b20      	cmp	r3, #32
 8000a6a:	d102      	bne.n	8000a72 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000a78:	7afb      	ldrb	r3, [r7, #11]
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d002      	beq.n	8000a86 <ConsoleParamFindN+0x42>
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	2bff      	cmp	r3, #255	; 0xff
 8000a84:	d9ec      	bls.n	8000a60 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a8c:	d102      	bne.n	8000a94 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	75fb      	strb	r3, [r7, #23]
 8000a92:	e002      	b.n	8000a9a <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3724      	adds	r7, #36	; 0x24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000aba:	f107 021c 	add.w	r2, r7, #28
 8000abe:	7afb      	ldrb	r3, [r7, #11]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f7ff ffbe 	bl	8000a44 <ConsoleParamFindN>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	4413      	add	r3, r2
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000ae2:	e011      	b.n	8000b08 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000ae4:	f107 0214 	add.w	r2, r7, #20
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	4413      	add	r3, r2
 8000aec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000af0:	701a      	strb	r2, [r3, #0]
		i++;
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	3301      	adds	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000af8:	69fa      	ldr	r2, [r7, #28]
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	4413      	add	r3, r2
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000b08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b0c:	2b0a      	cmp	r3, #10
 8000b0e:	d00a      	beq.n	8000b26 <ConsoleReceiveParamInt16+0x7e>
 8000b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b14:	2b0d      	cmp	r3, #13
 8000b16:	d006      	beq.n	8000b26 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000b18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b1c:	2b20      	cmp	r3, #32
 8000b1e:	d002      	beq.n	8000b26 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	d9de      	bls.n	8000ae4 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d102      	bne.n	8000b32 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10e      	bne.n	8000b58 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 8000b3a:	f107 0214 	add.w	r2, r7, #20
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	4413      	add	r3, r2
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 faa0 	bl	8005090 <atoi>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000b58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000b7a:	f107 0218 	add.w	r2, r7, #24
 8000b7e:	7afb      	ldrb	r3, [r7, #11]
 8000b80:	4619      	mov	r1, r3
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff ff5e 	bl	8000a44 <ConsoleParamFindN>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000b8c:	7ffb      	ldrb	r3, [r7, #31]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d12c      	bne.n	8000bec <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
 8000b96:	e01e      	b.n	8000bd6 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000b98:	7ffb      	ldrb	r3, [r7, #31]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10d      	bne.n	8000bba <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	f107 0217 	add.w	r2, r7, #23
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f8c5 	bl	8000d40 <ConsoleUtilHexCharToInt>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000bba:	7ffb      	ldrb	r3, [r7, #31]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d107      	bne.n	8000bd0 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000bc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bcc:	4413      	add	r3, r2
 8000bce:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d9dd      	bls.n	8000b98 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000bdc:	7ffb      	ldrb	r3, [r7, #31]
 8000bde:	2b11      	cmp	r3, #17
 8000be0:	d101      	bne.n	8000be6 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000be2:	2300      	movs	r3, #0
 8000be4:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000bea:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c00:	2300      	movs	r3, #0
 8000c02:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e01b      	b.n	8000c42 <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000c0a:	7cfb      	ldrb	r3, [r7, #19]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d115      	bne.n	8000c3c <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000c10:	88fa      	ldrh	r2, [r7, #6]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f1c3 0303 	rsb	r3, r3, #3
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	fa42 f303 	asr.w	r3, r2, r3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	f003 030f 	and.w	r3, r3, #15
 8000c24:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000c26:	f107 020c 	add.w	r2, r7, #12
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	441a      	add	r2, r3
 8000c2e:	7cbb      	ldrb	r3, [r7, #18]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f8c5 	bl	8000dc2 <ConsoleUtilsIntToHexChar>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d9e0      	bls.n	8000c0a <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000c48:	f107 020c 	add.w	r2, r7, #12
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4413      	add	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fa59 	bl	8001110 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000c74:	2300      	movs	r3, #0
 8000c76:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da07      	bge.n	8000c92 <smallItoa+0x2a>
		isNegative = true;
 8000c82:	2301      	movs	r3, #1
 8000c84:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	425b      	negs	r3, r3
 8000c8a:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000c96:	e007      	b.n	8000ca8 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ca0:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f1      	bne.n	8000c98 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	4413      	add	r3, r2
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	fb93 f2f2 	sdiv	r2, r3, r2
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	fb01 f202 	mul.w	r2, r1, r2
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	440b      	add	r3, r1
 8000ce0:	3230      	adds	r2, #48	; 0x30
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cee:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	617a      	str	r2, [r7, #20]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1e6      	bne.n	8000cc8 <smallItoa+0x60>

	if (isNegative) {
 8000cfa:	7ffb      	ldrb	r3, [r7, #31]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	222d      	movs	r2, #45	; 0x2d
 8000d04:	701a      	strb	r2, [r3, #0]
	}
}
 8000d06:	bf00      	nop
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	f107 0108 	add.w	r1, r7, #8
 8000d24:	220a      	movs	r2, #10
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff9e 	bl	8000c68 <smallItoa>
	ConsoleIoSendString(out);
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f9ed 	bl	8001110 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b2f      	cmp	r3, #47	; 0x2f
 8000d54:	d908      	bls.n	8000d68 <ConsoleUtilHexCharToInt+0x28>
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b39      	cmp	r3, #57	; 0x39
 8000d5a:	d805      	bhi.n	8000d68 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	3b30      	subs	r3, #48	; 0x30
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e025      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b40      	cmp	r3, #64	; 0x40
 8000d6c:	d908      	bls.n	8000d80 <ConsoleUtilHexCharToInt+0x40>
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b46      	cmp	r3, #70	; 0x46
 8000d72:	d805      	bhi.n	8000d80 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	3b37      	subs	r3, #55	; 0x37
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e019      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b60      	cmp	r3, #96	; 0x60
 8000d84:	d908      	bls.n	8000d98 <ConsoleUtilHexCharToInt+0x58>
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b66      	cmp	r3, #102	; 0x66
 8000d8a:	d805      	bhi.n	8000d98 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	3b57      	subs	r3, #87	; 0x57
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e00d      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b0a      	cmp	r3, #10
 8000d9c:	d105      	bne.n	8000daa <ConsoleUtilHexCharToInt+0x6a>
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b0d      	cmp	r3, #13
 8000da2:	d102      	bne.n	8000daa <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b20      	cmp	r3, #32
 8000da8:	d102      	bne.n	8000db0 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000daa:	2311      	movs	r3, #17
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e001      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000db0:	2310      	movs	r3, #16
 8000db2:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	6039      	str	r1, [r7, #0]
 8000dcc:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b09      	cmp	r3, #9
 8000dd6:	d805      	bhi.n	8000de4 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	3330      	adds	r3, #48	; 0x30
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e00d      	b.n	8000e00 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b09      	cmp	r3, #9
 8000de8:	d908      	bls.n	8000dfc <ConsoleUtilsIntToHexChar+0x3a>
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d805      	bhi.n	8000dfc <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	3337      	adds	r3, #55	; 0x37
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	e001      	b.n	8000e00 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <ConsoleCommandComment>:
	{"sadc", &ConsoleCommandDumpMic, HELP("Stopping the ADC mic")},
	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000e30:	2308      	movs	r3, #8
 8000e32:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e01e      	b.n	8000e78 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000e3a:	4914      	ldr	r1, [pc, #80]	; (8000e8c <ConsoleCommandHelp+0x68>)
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f960 	bl	8001110 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <ConsoleCommandHelp+0x6c>)
 8000e52:	f000 f95d 	bl	8001110 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	3308      	adds	r3, #8
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <ConsoleCommandHelp+0x68>)
 8000e64:	4413      	add	r3, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f952 	bl	8001110 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <ConsoleCommandHelp+0x70>)
 8000e6e:	f000 f94f 	bl	8001110 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3db      	bcc.n	8000e3a <ConsoleCommandHelp+0x16>
	}
	return result;
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08006830 	.word	0x08006830
 8000e90:	080067a4 	.word	0x080067a4
 8000e94:	080067a8 	.word	0x080067a8

08000e98 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fdfd 	bl	8000aa8 <ConsoleReceiveParamInt16>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d116      	bne.n	8000ee6 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <ConsoleCommandParamExampleInt16+0x58>)
 8000eba:	f000 f929 	bl	8001110 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000ebe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff25 	bl	8000d12 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000ec8:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <ConsoleCommandParamExampleInt16+0x5c>)
 8000eca:	f000 f921 	bl	8001110 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000ece:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe8e 	bl	8000bf6 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <ConsoleCommandParamExampleInt16+0x60>)
 8000edc:	f000 f918 	bl	8001110 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <ConsoleCommandParamExampleInt16+0x64>)
 8000ee2:	f000 f915 	bl	8001110 <ConsoleIoSendString>
	}
	return result;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	080067ac 	.word	0x080067ac
 8000ef4:	080067bc 	.word	0x080067bc
 8000ef8:	080067c4 	.word	0x080067c4
 8000efc:	080067a8 	.word	0x080067a8

08000f00 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2101      	movs	r1, #1
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fe27 	bl	8000b64 <ConsoleReceiveParamHexUint16>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000f22:	f000 f8f5 	bl	8001110 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000f26:	89bb      	ldrh	r3, [r7, #12]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe64 	bl	8000bf6 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000f30:	f000 f8ee 	bl	8001110 <ConsoleIoSendString>
	}
	return result;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080067c8 	.word	0x080067c8
 8000f44:	080067a8 	.word	0x080067a8

08000f48 <ConsoleCommandStartMic>:


static eCommandResult_T ConsoleCommandStartMic(const char buffer[]){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result;
    IGNORE_UNUSED_VARIABLE(buffer);
	if(COMMAND_SUCCESS == result){
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d108      	bne.n	8000f68 <ConsoleCommandStartMic+0x20>

		HAL_TIM_Base_Start(&htim3);
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <ConsoleCommandStartMic+0x2c>)
 8000f58:	f002 fd84 	bl	8003a64 <HAL_TIM_Base_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcBuf, ADCBUFLEN);
 8000f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f60:	4905      	ldr	r1, [pc, #20]	; (8000f78 <ConsoleCommandStartMic+0x30>)
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <ConsoleCommandStartMic+0x34>)
 8000f64:	f000 fdee 	bl	8001b44 <HAL_ADC_Start_DMA>

	}

	return result;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000a60 	.word	0x20000a60
 8000f78:	2000023c 	.word	0x2000023c
 8000f7c:	2000008c 	.word	0x2000008c

08000f80 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < ADCBUFLEN; i++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e00d      	b.n	8000faa <HAL_ADC_ConvCpltCallback+0x2a>
			//ConsoleIoSendString("ADC is: ");
			ConsoleSendParamInt16(adcBuf[i]);
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff feba 	bl	8000d12 <ConsoleSendParamInt16>
			ConsoleIoSendString(" ");
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <HAL_ADC_ConvCpltCallback+0x4c>)
 8000fa0:	f000 f8b6 	bl	8001110 <ConsoleIoSendString>
	for(int i = 0; i < ADCBUFLEN; i++){
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fb0:	dbed      	blt.n	8000f8e <HAL_ADC_ConvCpltCallback+0xe>
		}
	HAL_ADC_Stop_DMA(&hadc1);
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <HAL_ADC_ConvCpltCallback+0x50>)
 8000fb4:	f000 feb6 	bl	8001d24 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim3);
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000fba:	f002 fdad 	bl	8003b18 <HAL_TIM_Base_Stop>

}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000023c 	.word	0x2000023c
 8000fcc:	080067d8 	.word	0x080067d8
 8000fd0:	2000008c 	.word	0x2000008c
 8000fd4:	20000a60 	.word	0x20000a60

08000fd8 <ConsoleCommandDumpMic>:
static eCommandResult_T ConsoleCommandDumpMic(const char buffer[]){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    IGNORE_UNUSED_VARIABLE(buffer);

	HAL_ADC_Stop_DMA(&hadc1);
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <ConsoleCommandDumpMic+0x18>)
 8000fe2:	f000 fe9f 	bl	8001d24 <HAL_ADC_Stop_DMA>

	return COMMAND_SUCCESS;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000008c 	.word	0x2000008c

08000ff4 <ConsoleCommandVer>:


static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <ConsoleCommandVer+0x24>)
 8001002:	f000 f885 	bl	8001110 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <ConsoleCommandVer+0x28>)
 8001008:	f000 f882 	bl	8001110 <ConsoleIoSendString>
	return result;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	080067dc 	.word	0x080067dc
 800101c:	080067a8 	.word	0x080067a8

08001020 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <ConsoleCommandsGetTable+0x10>)
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	08006830 	.word	0x08006830

08001034 <_read>:
// Retargetting write and read:

uint32_t elapsed_time = 0;
int flag_training = 0;

int _read(int file, char *result, size_t len){
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;

	int retcode = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

	if (len != 0){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d012      	beq.n	8001070 <_read+0x3c>
		status = HAL_UART_Receive(&huart2, (uint8_t *) result, len, HAL_MAX_DELAY);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <_read+0x48>)
 8001056:	f003 fc96 	bl	8004986 <HAL_UART_Receive>
 800105a:	4603      	mov	r3, r0
 800105c:	74fb      	strb	r3, [r7, #19]

		if (status == HAL_OK){
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_read+0x36>

			retcode = len;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e002      	b.n	8001070 <_read+0x3c>
		} else {
			retcode = -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800106e:	617b      	str	r3, [r7, #20]
		}
	}

	return retcode;
 8001070:	697b      	ldr	r3, [r7, #20]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000aa8 	.word	0x20000aa8

08001080 <_write>:

int _write(int file, char *outgoing, int len){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) outgoing, len, 100);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	b29a      	uxth	r2, r3
 8001090:	2364      	movs	r3, #100	; 0x64
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <_write+0x24>)
 8001096:	f003 fbe4 	bl	8004862 <HAL_UART_Transmit>
	return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000aa8 	.word	0x20000aa8

080010a8 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 80010ac:	f000 fbf8 	bl	80018a0 <MX_USART2_UART_Init>
	return CONSOLE_SUCCESS;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <ConsoleIoReceive>:
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
    uint32_t i = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
    char ch;

    ch = getchar();
 80010c6:	f003 ffed 	bl	80050a4 <getchar>
 80010ca:	4603      	mov	r3, r0
 80010cc:	74fb      	strb	r3, [r7, #19]
    while ( ( '\n' != ch ) && ( i < bufferLength ) )
 80010ce:	e00f      	b.n	80010f0 <ConsoleIoReceive+0x3a>
    {
        buffer[i] = (uint8_t) ch;
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4413      	add	r3, r2
 80010d6:	7cfa      	ldrb	r2, [r7, #19]
 80010d8:	701a      	strb	r2, [r3, #0]
        i++;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
        printf("%c", ch);
 80010e0:	7cfb      	ldrb	r3, [r7, #19]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 f834 	bl	8005150 <putchar>
        ch = getchar();
 80010e8:	f003 ffdc 	bl	80050a4 <getchar>
 80010ec:	4603      	mov	r3, r0
 80010ee:	74fb      	strb	r3, [r7, #19]
    while ( ( '\n' != ch ) && ( i < bufferLength ) )
 80010f0:	7cfb      	ldrb	r3, [r7, #19]
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d003      	beq.n	80010fe <ConsoleIoReceive+0x48>
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d3e8      	bcc.n	80010d0 <ConsoleIoReceive+0x1a>
    }
    *readLength = i;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	601a      	str	r2, [r3, #0]
    return CONSOLE_SUCCESS;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <ConsoleIoSendString+0x1c>)
 800111c:	f004 f800 	bl	8005120 <iprintf>
	return CONSOLE_SUCCESS;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	080067f4 	.word	0x080067f4

08001130 <print_counter>:

eConsoleError print_counter(){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	if (flag_training == 0){
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <print_counter+0x60>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <print_counter+0x1c>
		printf("Starting training\n");
 800113e:	4815      	ldr	r0, [pc, #84]	; (8001194 <print_counter+0x64>)
 8001140:	f004 f88a 	bl	8005258 <puts>
		flag_training = 1;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <print_counter+0x60>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e01b      	b.n	8001184 <print_counter+0x54>

	}else{
		printf("Stop training\n");
 800114c:	4812      	ldr	r0, [pc, #72]	; (8001198 <print_counter+0x68>)
 800114e:	f004 f883 	bl	8005258 <puts>
		uint32_t current_ticks = HAL_GetTick();
 8001152:	f000 fca7 	bl	8001aa4 <HAL_GetTick>
 8001156:	6078      	str	r0, [r7, #4]
		elapsed_time = (current_ticks - elapsed_time)/1000;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <print_counter+0x6c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <print_counter+0x70>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	099b      	lsrs	r3, r3, #6
 8001168:	4a0c      	ldr	r2, [pc, #48]	; (800119c <print_counter+0x6c>)
 800116a:	6013      	str	r3, [r2, #0]
		printf("Training time: %ld\n", elapsed_time);
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <print_counter+0x6c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <print_counter+0x74>)
 8001174:	f003 ffd4 	bl	8005120 <iprintf>
		elapsed_time = current_ticks;
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <print_counter+0x6c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
		flag_training = 0;
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <print_counter+0x60>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
	}

	return CONSOLE_SUCCESS;
 8001184:	2300      	movs	r3, #0

}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000a10 	.word	0x20000a10
 8001194:	080067f8 	.word	0x080067f8
 8001198:	0800680c 	.word	0x0800680c
 800119c:	20000a0c 	.word	0x20000a0c
 80011a0:	10624dd3 	.word	0x10624dd3
 80011a4:	0800681c 	.word	0x0800681c

080011a8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == BUTTON_Pin){
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d10d      	bne.n	80011d4 <HAL_GPIO_EXTI_Callback+0x2c>
		//int val = (int) HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
		//printf("Val %d\n", val);
		if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 1){
 80011b8:	2101      	movs	r1, #1
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <HAL_GPIO_EXTI_Callback+0x34>)
 80011bc:	f001 ff46 	bl	800304c <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d106      	bne.n	80011d4 <HAL_GPIO_EXTI_Callback+0x2c>
			HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 80011c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80011cc:	f001 ff6f 	bl	80030ae <HAL_GPIO_TogglePin>
			print_counter();
 80011d0:	f7ff ffae 	bl	8001130 <print_counter>
		}
	}
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020c00 	.word	0x40020c00

080011e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_DMA_Init+0x3c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <MX_DMA_Init+0x3c>)
 80011f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_DMA_Init+0x3c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2038      	movs	r0, #56	; 0x38
 800120c:	f001 f983 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001210:	2038      	movs	r0, #56	; 0x38
 8001212:	f001 f99c 	bl	800254e <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <MX_GPIO_Init+0x100>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a38      	ldr	r2, [pc, #224]	; (8001324 <MX_GPIO_Init+0x100>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <MX_GPIO_Init+0x100>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <MX_GPIO_Init+0x100>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a31      	ldr	r2, [pc, #196]	; (8001324 <MX_GPIO_Init+0x100>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <MX_GPIO_Init+0x100>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <MX_GPIO_Init+0x100>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a2a      	ldr	r2, [pc, #168]	; (8001324 <MX_GPIO_Init+0x100>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <MX_GPIO_Init+0x100>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_GPIO_Init+0x100>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a23      	ldr	r2, [pc, #140]	; (8001324 <MX_GPIO_Init+0x100>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_GPIO_Init+0x100>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_GPIO_Init+0x100>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <MX_GPIO_Init+0x100>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_GPIO_Init+0x100>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012cc:	4816      	ldr	r0, [pc, #88]	; (8001328 <MX_GPIO_Init+0x104>)
 80012ce:	f001 fed5 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80012d2:	2301      	movs	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <MX_GPIO_Init+0x108>)
 80012e8:	f001 fd2c 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4808      	ldr	r0, [pc, #32]	; (8001328 <MX_GPIO_Init+0x104>)
 8001306:	f001 fd1d 	bl	8002d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2006      	movs	r0, #6
 8001310:	f001 f901 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001314:	2006      	movs	r0, #6
 8001316:	f001 f91a 	bl	800254e <HAL_NVIC_EnableIRQ>

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40020000 	.word	0x40020000

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f000 fb50 	bl	80019d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  ConsoleInit();
 8001338:	f7ff fa9a 	bl	8000870 <ConsoleInit>
  // Sets the read buf to zero to not wait indefinitely
  setvbuf(stdin, NULL, _IONBF, 0);
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <main+0x54>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6858      	ldr	r0, [r3, #4]
 8001342:	2300      	movs	r3, #0
 8001344:	2202      	movs	r2, #2
 8001346:	2100      	movs	r1, #0
 8001348:	f003 ff8e 	bl	8005268 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134c:	f000 f81e 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001350:	f7ff ff68 	bl	8001224 <MX_GPIO_Init>
  MX_DMA_Init();
 8001354:	f7ff ff46 	bl	80011e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001358:	f000 faa2 	bl	80018a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800135c:	f7ff f912 	bl	8000584 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001360:	f000 f96e 	bl	8001640 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001364:	f000 f9e0 	bl	8001728 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <main+0x58>)
 800136a:	f002 fbfd 	bl	8003b68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800136e:	2108      	movs	r1, #8
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <main+0x58>)
 8001372:	f002 fcb5 	bl	8003ce0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 2);
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <main+0x58>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2202      	movs	r2, #2
 800137c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     ConsoleProcess();
 800137e:	f7ff faa5 	bl	80008cc <ConsoleProcess>
 8001382:	e7fc      	b.n	800137e <main+0x4e>
 8001384:	2000000c 	.word	0x2000000c
 8001388:	20000a18 	.word	0x20000a18

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	; 0x50
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	2230      	movs	r2, #48	; 0x30
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f003 feb8 	bl	8005110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <SystemClock_Config+0xc8>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	4a26      	ldr	r2, [pc, #152]	; (8001454 <SystemClock_Config+0xc8>)
 80013ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013be:	6413      	str	r3, [r2, #64]	; 0x40
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <SystemClock_Config+0xc8>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <SystemClock_Config+0xcc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a20      	ldr	r2, [pc, #128]	; (8001458 <SystemClock_Config+0xcc>)
 80013d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <SystemClock_Config+0xcc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f0:	2310      	movs	r3, #16
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f4:	2302      	movs	r3, #2
 80013f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013fc:	2308      	movs	r3, #8
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001400:	2350      	movs	r3, #80	; 0x50
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001408:	2304      	movs	r3, #4
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4618      	mov	r0, r3
 8001412:	f001 fe7f 	bl	8003114 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800141c:	f000 f81e 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001420:	230f      	movs	r3, #15
 8001422:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001424:	2302      	movs	r3, #2
 8001426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001430:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	2102      	movs	r1, #2
 800143c:	4618      	mov	r0, r3
 800143e:	f002 f8e1 	bl	8003604 <HAL_RCC_ClockConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001448:	f000 f808 	bl	800145c <Error_Handler>
  }
}
 800144c:	bf00      	nop
 800144e:	3750      	adds	r7, #80	; 0x50
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	40007000 	.word	0x40007000

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	e7fe      	b.n	8001464 <Error_Handler+0x8>
	...

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_MspInit+0x58>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <HAL_MspInit+0x58>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_MspInit+0x58>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_MspInit+0x58>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_MspInit+0x58>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_MspInit+0x58>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2005      	movs	r0, #5
 80014ac:	f001 f833 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014b0:	2005      	movs	r0, #5
 80014b2:	f001 f84c 	bl	800254e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 fab4 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800152a:	2001      	movs	r0, #1
 800152c:	f001 fdda 	bl	80030e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <DMA2_Stream0_IRQHandler+0x10>)
 800153a:	f001 f999 	bl	8002870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200000d4 	.word	0x200000d4

08001548 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001570:	605a      	str	r2, [r3, #4]
	return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_isatty>:

int _isatty(int file)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	return 1;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
	return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d207      	bcs.n	80015f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e0:	f003 fd5a 	bl	8005098 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ee:	e009      	b.n	8001604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20020000 	.word	0x20020000
 8001610:	00000400 	.word	0x00000400
 8001614:	20000a14 	.word	0x20000a14
 8001618:	20000b00 	.word	0x20000b00

0800161c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <SystemInit+0x20>)
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <SystemInit+0x20>)
 8001628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800162c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	f107 0320 	add.w	r3, r7, #32
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001676:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10 -1 ;
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <MX_TIM2_Init+0xe4>)
 800167a:	2209      	movs	r2, #9
 800167c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4-1;
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001686:	2203      	movs	r2, #3
 8001688:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <MX_TIM2_Init+0xe4>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001696:	4823      	ldr	r0, [pc, #140]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001698:	f002 f994 	bl	80039c4 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80016a2:	f7ff fedb 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b0:	4619      	mov	r1, r3
 80016b2:	481c      	ldr	r0, [pc, #112]	; (8001724 <MX_TIM2_Init+0xe4>)
 80016b4:	f002 fc86 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80016be:	f7ff fecd 	bl	800145c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016c2:	4818      	ldr	r0, [pc, #96]	; (8001724 <MX_TIM2_Init+0xe4>)
 80016c4:	f002 fab2 	bl	8003c2c <HAL_TIM_PWM_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80016ce:	f7ff fec5 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	4619      	mov	r1, r3
 80016e0:	4810      	ldr	r0, [pc, #64]	; (8001724 <MX_TIM2_Init+0xe4>)
 80016e2:	f003 f803 	bl	80046ec <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80016ec:	f7ff feb6 	bl	800145c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f0:	2360      	movs	r3, #96	; 0x60
 80016f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2208      	movs	r2, #8
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001708:	f002 fb9a 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001712:	f7ff fea3 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <MX_TIM2_Init+0xe4>)
 8001718:	f000 f88a 	bl	8001830 <HAL_TIM_MspPostInit>

}
 800171c:	bf00      	nop
 800171e:	3738      	adds	r7, #56	; 0x38
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000a18 	.word	0x20000a18

08001728 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_TIM3_Init+0x94>)
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <MX_TIM3_Init+0x98>)
 8001748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_TIM3_Init+0x94>)
 800174c:	224f      	movs	r2, #79	; 0x4f
 800174e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_TIM3_Init+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_TIM3_Init+0x94>)
 8001758:	f240 32e7 	movw	r2, #999	; 0x3e7
 800175c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_TIM3_Init+0x94>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_TIM3_Init+0x94>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800176a:	4814      	ldr	r0, [pc, #80]	; (80017bc <MX_TIM3_Init+0x94>)
 800176c:	f002 f92a 	bl	80039c4 <HAL_TIM_Base_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001776:	f7ff fe71 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4619      	mov	r1, r3
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_TIM3_Init+0x94>)
 8001788:	f002 fc1c 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001792:	f7ff fe63 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001796:	2320      	movs	r3, #32
 8001798:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_TIM3_Init+0x94>)
 80017a4:	f002 ffa2 	bl	80046ec <HAL_TIMEx_MasterConfigSynchronization>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80017ae:	f7ff fe55 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000a60 	.word	0x20000a60
 80017c0:	40000400 	.word	0x40000400

080017c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d4:	d10e      	bne.n	80017f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_TIM_Base_MspInit+0x64>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_TIM_Base_MspInit+0x64>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_TIM_Base_MspInit+0x64>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017f2:	e012      	b.n	800181a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0c      	ldr	r2, [pc, #48]	; (800182c <HAL_TIM_Base_MspInit+0x68>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d10d      	bne.n	800181a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_TIM_Base_MspInit+0x64>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_TIM_Base_MspInit+0x64>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_TIM_Base_MspInit+0x64>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40000400 	.word	0x40000400

08001830 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001850:	d11e      	bne.n	8001890 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_TIM_MspPostInit+0x68>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <HAL_TIM_MspPostInit+0x68>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_TIM_MspPostInit+0x68>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800186e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001872:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001880:	2301      	movs	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	4619      	mov	r1, r3
 800188a:	4804      	ldr	r0, [pc, #16]	; (800189c <HAL_TIM_MspPostInit+0x6c>)
 800188c:	f001 fa5a 	bl	8002d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40020400 	.word	0x40020400

080018a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_USART2_UART_Init+0x50>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART2_UART_Init+0x4c>)
 80018d8:	f002 ff76 	bl	80047c8 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018e2:	f7ff fdbb 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000aa8 	.word	0x20000aa8
 80018f0:	40004400 	.word	0x40004400

080018f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_UART_MspInit+0x84>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12b      	bne.n	800196e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_UART_MspInit+0x88>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_UART_MspInit+0x88>)
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_UART_MspInit+0x88>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_UART_MspInit+0x88>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_UART_MspInit+0x88>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_UART_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800194e:	230c      	movs	r3, #12
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195e:	2307      	movs	r3, #7
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <HAL_UART_MspInit+0x8c>)
 800196a:	f001 f9eb 	bl	8002d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40004400 	.word	0x40004400
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800198a:	490e      	ldr	r1, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a0:	4c0b      	ldr	r4, [pc, #44]	; (80019d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ae:	f7ff fe35 	bl	800161c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f003 fb89 	bl	80050c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7ff fcbb 	bl	8001330 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019c8:	08006c3c 	.word	0x08006c3c
  ldr r2, =_sbss
 80019cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019d0:	20000b00 	.word	0x20000b00

080019d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <HAL_Init+0x40>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_Init+0x40>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_Init+0x40>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 fd7d 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	200f      	movs	r0, #15
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fd2c 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fd95 	bl	800256a <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a58:	f000 fd5d 	bl	8002516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000aec 	.word	0x20000aec

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000aec 	.word	0x20000aec

08001abc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e033      	b.n	8001b3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7fe fda6 	bl	800062c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b02:	f023 0302 	bic.w	r3, r3, #2
 8001b06:	f043 0202 	orr.w	r2, r3, #2
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 faa8 	bl	8002064 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2a:	e001      	b.n	8001b30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Start_DMA+0x1e>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e0ce      	b.n	8001d00 <HAL_ADC_Start_DMA+0x1bc>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d018      	beq.n	8001baa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b88:	4b5f      	ldr	r3, [pc, #380]	; (8001d08 <HAL_ADC_Start_DMA+0x1c4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5f      	ldr	r2, [pc, #380]	; (8001d0c <HAL_ADC_Start_DMA+0x1c8>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0c9a      	lsrs	r2, r3, #18
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb8:	d107      	bne.n	8001bca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 8086 	bne.w	8001ce6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c18:	d106      	bne.n	8001c28 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f023 0206 	bic.w	r2, r3, #6
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
 8001c26:	e002      	b.n	8001c2e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c36:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <HAL_ADC_Start_DMA+0x1cc>)
 8001c38:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	4a35      	ldr	r2, [pc, #212]	; (8001d14 <HAL_ADC_Start_DMA+0x1d0>)
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c46:	4a34      	ldr	r2, [pc, #208]	; (8001d18 <HAL_ADC_Start_DMA+0x1d4>)
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4e:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <HAL_ADC_Start_DMA+0x1d8>)
 8001c50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	334c      	adds	r3, #76	; 0x4c
 8001c86:	4619      	mov	r1, r3
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f000 fd28 	bl	80026e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10f      	bne.n	8001cbc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d129      	bne.n	8001cfe <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	e020      	b.n	8001cfe <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_ADC_Start_DMA+0x1dc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d11b      	bne.n	8001cfe <HAL_ADC_Start_DMA+0x1ba>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d114      	bne.n	8001cfe <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	e00b      	b.n	8001cfe <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f043 0210 	orr.w	r2, r3, #16
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	431bde83 	.word	0x431bde83
 8001d10:	40012300 	.word	0x40012300
 8001d14:	0800225d 	.word	0x0800225d
 8001d18:	08002317 	.word	0x08002317
 8001d1c:	08002333 	.word	0x08002333
 8001d20:	40012000 	.word	0x40012000

08001d24 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Stop_DMA+0x1a>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e048      	b.n	8001dd0 <HAL_ADC_Stop_DMA+0xac>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d130      	bne.n	8001dc6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d72:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d10f      	bne.n	8001da2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 fd02 	bl	8002790 <HAL_DMA_Abort>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001db0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1c>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e113      	b.n	8002044 <HAL_ADC_ConfigChannel+0x244>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d925      	bls.n	8001e78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68d9      	ldr	r1, [r3, #12]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	3b1e      	subs	r3, #30
 8001e42:	2207      	movs	r2, #7
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	400a      	ands	r2, r1
 8001e50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68d9      	ldr	r1, [r3, #12]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	4603      	mov	r3, r0
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4403      	add	r3, r0
 8001e6a:	3b1e      	subs	r3, #30
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	e022      	b.n	8001ebe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	400a      	ands	r2, r1
 8001e9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6919      	ldr	r1, [r3, #16]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4403      	add	r3, r0
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d824      	bhi.n	8001f10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b05      	subs	r3, #5
 8001ed8:	221f      	movs	r2, #31
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b05      	subs	r3, #5
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f0e:	e04c      	b.n	8001faa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b0c      	cmp	r3, #12
 8001f16:	d824      	bhi.n	8001f62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b23      	subs	r3, #35	; 0x23
 8001f2a:	221f      	movs	r2, #31
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43da      	mvns	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	400a      	ands	r2, r1
 8001f38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b23      	subs	r3, #35	; 0x23
 8001f54:	fa00 f203 	lsl.w	r2, r0, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f60:	e023      	b.n	8001faa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3b41      	subs	r3, #65	; 0x41
 8001f74:	221f      	movs	r2, #31
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	400a      	ands	r2, r1
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b41      	subs	r3, #65	; 0x41
 8001f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <HAL_ADC_ConfigChannel+0x250>)
 8001fac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a28      	ldr	r2, [pc, #160]	; (8002054 <HAL_ADC_ConfigChannel+0x254>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1d8>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b12      	cmp	r3, #18
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <HAL_ADC_ConfigChannel+0x254>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d12b      	bne.n	800203a <HAL_ADC_ConfigChannel+0x23a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_ADC_ConfigChannel+0x258>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d003      	beq.n	8001ff4 <HAL_ADC_ConfigChannel+0x1f4>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b11      	cmp	r3, #17
 8001ff2:	d122      	bne.n	800203a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a11      	ldr	r2, [pc, #68]	; (8002058 <HAL_ADC_ConfigChannel+0x258>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d111      	bne.n	800203a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_ADC_ConfigChannel+0x25c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a11      	ldr	r2, [pc, #68]	; (8002060 <HAL_ADC_ConfigChannel+0x260>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	0c9a      	lsrs	r2, r3, #18
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800202c:	e002      	b.n	8002034 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3b01      	subs	r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f9      	bne.n	800202e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40012300 	.word	0x40012300
 8002054:	40012000 	.word	0x40012000
 8002058:	10000012 	.word	0x10000012
 800205c:	20000000 	.word	0x20000000
 8002060:	431bde83 	.word	0x431bde83

08002064 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206c:	4b79      	ldr	r3, [pc, #484]	; (8002254 <ADC_Init+0x1f0>)
 800206e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	431a      	orrs	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002098:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	021a      	lsls	r2, r3, #8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6899      	ldr	r1, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	4a58      	ldr	r2, [pc, #352]	; (8002258 <ADC_Init+0x1f4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d022      	beq.n	8002142 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800210a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6899      	ldr	r1, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800212c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6899      	ldr	r1, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	e00f      	b.n	8002162 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002160:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0202 	bic.w	r2, r2, #2
 8002170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7e1b      	ldrb	r3, [r3, #24]
 800217c:	005a      	lsls	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01b      	beq.n	80021c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800219e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6859      	ldr	r1, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	3b01      	subs	r3, #1
 80021bc:	035a      	lsls	r2, r3, #13
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	e007      	b.n	80021d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	051a      	lsls	r2, r3, #20
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800220c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800221a:	025a      	lsls	r2, r3, #9
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	029a      	lsls	r2, r3, #10
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	609a      	str	r2, [r3, #8]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40012300 	.word	0x40012300
 8002258:	0f000001 	.word	0x0f000001

0800225c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002272:	2b00      	cmp	r3, #0
 8002274:	d13c      	bne.n	80022f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d12b      	bne.n	80022e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002294:	2b00      	cmp	r3, #0
 8002296:	d127      	bne.n	80022e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d119      	bne.n	80022e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0220 	bic.w	r2, r2, #32
 80022c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f7fe fe49 	bl	8000f80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022ee:	e00e      	b.n	800230e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff fd75 	bl	8001dec <HAL_ADC_ErrorCallback>
}
 8002302:	e004      	b.n	800230e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	4798      	blx	r3
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff fd57 	bl	8001dd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f043 0204 	orr.w	r2, r3, #4
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f7ff fd4a 	bl	8001dec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e0:	f7ff ff8e 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff29 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff3e 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff8e 	bl	8002454 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5d 	bl	8002400 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff31 	bl	80023c4 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa2 	bl	80024bc <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff fa88 	bl	8001aa4 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e099      	b.n	80026d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c0:	e00f      	b.n	80025e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c2:	f7ff fa6f 	bl	8001aa4 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	d908      	bls.n	80025e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2203      	movs	r2, #3
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e078      	b.n	80026d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e8      	bne.n	80025c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4b38      	ldr	r3, [pc, #224]	; (80026dc <HAL_DMA_Init+0x158>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800260e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2b04      	cmp	r3, #4
 800263a:	d107      	bne.n	800264c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	4313      	orrs	r3, r2
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f023 0307 	bic.w	r3, r3, #7
 8002662:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	4313      	orrs	r3, r2
 800266c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2b04      	cmp	r3, #4
 8002674:	d117      	bne.n	80026a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00e      	beq.n	80026a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fadf 	bl	8002c4c <DMA_CheckFifoParam>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026a2:	2301      	movs	r3, #1
 80026a4:	e016      	b.n	80026d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa96 	bl	8002be0 <DMA_CalcBaseAndBitshift>
 80026b4:	4603      	mov	r3, r0
 80026b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	223f      	movs	r2, #63	; 0x3f
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	f010803f 	.word	0xf010803f

080026e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_DMA_Start_IT+0x26>
 8002702:	2302      	movs	r3, #2
 8002704:	e040      	b.n	8002788 <HAL_DMA_Start_IT+0xa8>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d12f      	bne.n	800277a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2202      	movs	r2, #2
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fa28 	bl	8002b84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	223f      	movs	r2, #63	; 0x3f
 800273a:	409a      	lsls	r2, r3
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0216 	orr.w	r2, r2, #22
 800274e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0208 	orr.w	r2, r2, #8
 8002766:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e005      	b.n	8002786 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002782:	2302      	movs	r3, #2
 8002784:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002786:	7dfb      	ldrb	r3, [r7, #23]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800279e:	f7ff f981 	bl	8001aa4 <HAL_GetTick>
 80027a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d008      	beq.n	80027c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e052      	b.n	8002868 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0216 	bic.w	r2, r2, #22
 80027d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <HAL_DMA_Abort+0x62>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0208 	bic.w	r2, r2, #8
 8002800:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002812:	e013      	b.n	800283c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002814:	f7ff f946 	bl	8001aa4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b05      	cmp	r3, #5
 8002820:	d90c      	bls.n	800283c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2220      	movs	r2, #32
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2203      	movs	r2, #3
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e015      	b.n	8002868 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e4      	bne.n	8002814 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	223f      	movs	r2, #63	; 0x3f
 8002850:	409a      	lsls	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800287c:	4b8e      	ldr	r3, [pc, #568]	; (8002ab8 <HAL_DMA_IRQHandler+0x248>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a8e      	ldr	r2, [pc, #568]	; (8002abc <HAL_DMA_IRQHandler+0x24c>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0a9b      	lsrs	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	2208      	movs	r2, #8
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01a      	beq.n	80028dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0204 	bic.w	r2, r2, #4
 80028c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	2208      	movs	r2, #8
 80028ca:	409a      	lsls	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	2201      	movs	r2, #1
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d012      	beq.n	8002912 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2201      	movs	r2, #1
 8002900:	409a      	lsls	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	f043 0202 	orr.w	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2204      	movs	r2, #4
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d012      	beq.n	8002948 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	2204      	movs	r2, #4
 8002936:	409a      	lsls	r2, r3
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	f043 0204 	orr.w	r2, r3, #4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	2210      	movs	r2, #16
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d043      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d03c      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	2210      	movs	r2, #16
 800296c:	409a      	lsls	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d018      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d108      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d024      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
 800299e:	e01f      	b.n	80029e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01b      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
 80029b0:	e016      	b.n	80029e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0208 	bic.w	r2, r2, #8
 80029ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	2220      	movs	r2, #32
 80029e6:	409a      	lsls	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 808f 	beq.w	8002b10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8087 	beq.w	8002b10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	2220      	movs	r2, #32
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d136      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0216 	bic.w	r2, r2, #22
 8002a28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d103      	bne.n	8002a4a <HAL_DMA_IRQHandler+0x1da>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0208 	bic.w	r2, r2, #8
 8002a58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	223f      	movs	r2, #63	; 0x3f
 8002a60:	409a      	lsls	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d07e      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
        }
        return;
 8002a86:	e079      	b.n	8002b7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01d      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10d      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d031      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
 8002ab4:	e02c      	b.n	8002b10 <HAL_DMA_IRQHandler+0x2a0>
 8002ab6:	bf00      	nop
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d023      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
 8002ad0:	e01e      	b.n	8002b10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10f      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0210 	bic.w	r2, r2, #16
 8002aee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d032      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d022      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2205      	movs	r2, #5
 8002b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d307      	bcc.n	8002b58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f2      	bne.n	8002b3c <HAL_DMA_IRQHandler+0x2cc>
 8002b56:	e000      	b.n	8002b5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
 8002b7a:	e000      	b.n	8002b7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b7c:	bf00      	nop
    }
  }
}
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d108      	bne.n	8002bc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bc2:	e007      	b.n	8002bd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3b10      	subs	r3, #16
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <DMA_CalcBaseAndBitshift+0x64>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bfa:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <DMA_CalcBaseAndBitshift+0x68>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d909      	bls.n	8002c22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	1d1a      	adds	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c20:	e007      	b.n	8002c32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c2a:	f023 0303 	bic.w	r3, r3, #3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	aaaaaaab 	.word	0xaaaaaaab
 8002c48:	08006a88 	.word	0x08006a88

08002c4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11f      	bne.n	8002ca6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d856      	bhi.n	8002d1a <DMA_CheckFifoParam+0xce>
 8002c6c:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <DMA_CheckFifoParam+0x28>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c97 	.word	0x08002c97
 8002c7c:	08002c85 	.word	0x08002c85
 8002c80:	08002d1b 	.word	0x08002d1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d046      	beq.n	8002d1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c94:	e043      	b.n	8002d1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c9e:	d140      	bne.n	8002d22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca4:	e03d      	b.n	8002d22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cae:	d121      	bne.n	8002cf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d837      	bhi.n	8002d26 <DMA_CheckFifoParam+0xda>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <DMA_CheckFifoParam+0x70>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cd3 	.word	0x08002cd3
 8002cc4:	08002ccd 	.word	0x08002ccd
 8002cc8:	08002ce5 	.word	0x08002ce5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e030      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d025      	beq.n	8002d2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce2:	e022      	b.n	8002d2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cec:	d11f      	bne.n	8002d2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cf2:	e01c      	b.n	8002d2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d903      	bls.n	8002d02 <DMA_CheckFifoParam+0xb6>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d003      	beq.n	8002d08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d00:	e018      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      break;
 8002d06:	e015      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	e00b      	b.n	8002d32 <DMA_CheckFifoParam+0xe6>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e00a      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e008      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e006      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
 8002d28:	e004      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d32:	bf00      	nop
    }
  } 
  
  return status; 
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	e159      	b.n	8003014 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d60:	2201      	movs	r2, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f040 8148 	bne.w	800300e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d005      	beq.n	8002d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d130      	bne.n	8002df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 0201 	and.w	r2, r3, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d017      	beq.n	8002e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d123      	bne.n	8002e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3208      	adds	r2, #8
 8002e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	220f      	movs	r2, #15
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	08da      	lsrs	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3208      	adds	r2, #8
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0203 	and.w	r2, r3, #3
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a2 	beq.w	800300e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b57      	ldr	r3, [pc, #348]	; (800302c <HAL_GPIO_Init+0x2e8>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a56      	ldr	r2, [pc, #344]	; (800302c <HAL_GPIO_Init+0x2e8>)
 8002ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b54      	ldr	r3, [pc, #336]	; (800302c <HAL_GPIO_Init+0x2e8>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ee6:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_GPIO_Init+0x2ec>)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	3302      	adds	r3, #2
 8002eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	220f      	movs	r2, #15
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a49      	ldr	r2, [pc, #292]	; (8003034 <HAL_GPIO_Init+0x2f0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d019      	beq.n	8002f46 <HAL_GPIO_Init+0x202>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a48      	ldr	r2, [pc, #288]	; (8003038 <HAL_GPIO_Init+0x2f4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0x1fe>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a47      	ldr	r2, [pc, #284]	; (800303c <HAL_GPIO_Init+0x2f8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00d      	beq.n	8002f3e <HAL_GPIO_Init+0x1fa>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a46      	ldr	r2, [pc, #280]	; (8003040 <HAL_GPIO_Init+0x2fc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_Init+0x1f6>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a45      	ldr	r2, [pc, #276]	; (8003044 <HAL_GPIO_Init+0x300>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_GPIO_Init+0x1f2>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e008      	b.n	8002f48 <HAL_GPIO_Init+0x204>
 8002f36:	2307      	movs	r3, #7
 8002f38:	e006      	b.n	8002f48 <HAL_GPIO_Init+0x204>
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e004      	b.n	8002f48 <HAL_GPIO_Init+0x204>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_Init+0x204>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_GPIO_Init+0x204>
 8002f46:	2300      	movs	r3, #0
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	f002 0203 	and.w	r2, r2, #3
 8002f4e:	0092      	lsls	r2, r2, #2
 8002f50:	4093      	lsls	r3, r2
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f58:	4935      	ldr	r1, [pc, #212]	; (8003030 <HAL_GPIO_Init+0x2ec>)
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	3302      	adds	r3, #2
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f66:	4b38      	ldr	r3, [pc, #224]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f8a:	4a2f      	ldr	r2, [pc, #188]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f90:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb4:	4a24      	ldr	r2, [pc, #144]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fde:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <HAL_GPIO_Init+0x304>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003008:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <HAL_GPIO_Init+0x304>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3301      	adds	r3, #1
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b0f      	cmp	r3, #15
 8003018:	f67f aea2 	bls.w	8002d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	40013800 	.word	0x40013800
 8003034:	40020000 	.word	0x40020000
 8003038:	40020400 	.word	0x40020400
 800303c:	40020800 	.word	0x40020800
 8003040:	40020c00 	.word	0x40020c00
 8003044:	40021000 	.word	0x40021000
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e001      	b.n	800306e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030c0:	887a      	ldrh	r2, [r7, #2]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4013      	ands	r3, r2
 80030c6:	041a      	lsls	r2, r3, #16
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	400b      	ands	r3, r1
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	619a      	str	r2, [r3, #24]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030fa:	4a05      	ldr	r2, [pc, #20]	; (8003110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe f850 	bl	80011a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40013c00 	.word	0x40013c00

08003114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e267      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d075      	beq.n	800321e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003132:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d00c      	beq.n	8003158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313e:	4b85      	ldr	r3, [pc, #532]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003146:	2b08      	cmp	r3, #8
 8003148:	d112      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314a:	4b82      	ldr	r3, [pc, #520]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003156:	d10b      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d05b      	beq.n	800321c <HAL_RCC_OscConfig+0x108>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d157      	bne.n	800321c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e242      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d106      	bne.n	8003188 <HAL_RCC_OscConfig+0x74>
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e01d      	b.n	80031c4 <HAL_RCC_OscConfig+0xb0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x98>
 8003192:	4b70      	ldr	r3, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6f      	ldr	r2, [pc, #444]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6c      	ldr	r2, [pc, #432]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0xb0>
 80031ac:	4b69      	ldr	r3, [pc, #420]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a68      	ldr	r2, [pc, #416]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a65      	ldr	r2, [pc, #404]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d013      	beq.n	80031f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe fc6a 	bl	8001aa4 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fe fc66 	bl	8001aa4 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e207      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0xc0>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe fc56 	bl	8001aa4 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fe fc52 	bl	8001aa4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1f3      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	4b51      	ldr	r3, [pc, #324]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0xe8>
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d063      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800322a:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800323e:	2b08      	cmp	r3, #8
 8003240:	d11c      	bne.n	800327c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003242:	4b44      	ldr	r3, [pc, #272]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d116      	bne.n	800327c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324e:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_RCC_OscConfig+0x152>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e1c7      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003266:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4937      	ldr	r1, [pc, #220]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	e03a      	b.n	80032f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003284:	4b34      	ldr	r3, [pc, #208]	; (8003358 <HAL_RCC_OscConfig+0x244>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe fc0b 	bl	8001aa4 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003292:	f7fe fc07 	bl	8001aa4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e1a8      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4925      	ldr	r1, [pc, #148]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
 80032c4:	e015      	b.n	80032f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c6:	4b24      	ldr	r3, [pc, #144]	; (8003358 <HAL_RCC_OscConfig+0x244>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fbea 	bl	8001aa4 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fe fbe6 	bl	8001aa4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e187      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d036      	beq.n	800336c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d016      	beq.n	8003334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003306:	4b15      	ldr	r3, [pc, #84]	; (800335c <HAL_RCC_OscConfig+0x248>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe fbca 	bl	8001aa4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003314:	f7fe fbc6 	bl	8001aa4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e167      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_OscConfig+0x240>)
 8003328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x200>
 8003332:	e01b      	b.n	800336c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_OscConfig+0x248>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7fe fbb3 	bl	8001aa4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003340:	e00e      	b.n	8003360 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003342:	f7fe fbaf 	bl	8001aa4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d907      	bls.n	8003360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e150      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
 8003354:	40023800 	.word	0x40023800
 8003358:	42470000 	.word	0x42470000
 800335c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	4b88      	ldr	r3, [pc, #544]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ea      	bne.n	8003342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8097 	beq.w	80034a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337e:	4b81      	ldr	r3, [pc, #516]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	4b7d      	ldr	r3, [pc, #500]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a7c      	ldr	r2, [pc, #496]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	; 0x40
 800339a:	4b7a      	ldr	r3, [pc, #488]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b77      	ldr	r3, [pc, #476]	; (8003588 <HAL_RCC_OscConfig+0x474>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d118      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b6:	4b74      	ldr	r3, [pc, #464]	; (8003588 <HAL_RCC_OscConfig+0x474>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a73      	ldr	r2, [pc, #460]	; (8003588 <HAL_RCC_OscConfig+0x474>)
 80033bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c2:	f7fe fb6f 	bl	8001aa4 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ca:	f7fe fb6b 	bl	8001aa4 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e10c      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_RCC_OscConfig+0x474>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d106      	bne.n	80033fe <HAL_RCC_OscConfig+0x2ea>
 80033f0:	4b64      	ldr	r3, [pc, #400]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	4a63      	ldr	r2, [pc, #396]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70
 80033fc:	e01c      	b.n	8003438 <HAL_RCC_OscConfig+0x324>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b05      	cmp	r3, #5
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x30c>
 8003406:	4b5f      	ldr	r3, [pc, #380]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a5e      	ldr	r2, [pc, #376]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	6713      	str	r3, [r2, #112]	; 0x70
 8003412:	4b5c      	ldr	r3, [pc, #368]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a5b      	ldr	r2, [pc, #364]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0x324>
 8003420:	4b58      	ldr	r3, [pc, #352]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a57      	ldr	r2, [pc, #348]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	4b55      	ldr	r3, [pc, #340]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a54      	ldr	r2, [pc, #336]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 0304 	bic.w	r3, r3, #4
 8003436:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fe fb30 	bl	8001aa4 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	e00a      	b.n	800345e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7fe fb2c 	bl	8001aa4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e0cb      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345e:	4b49      	ldr	r3, [pc, #292]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0ee      	beq.n	8003448 <HAL_RCC_OscConfig+0x334>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346c:	f7fe fb1a 	bl	8001aa4 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fe fb16 	bl	8001aa4 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0b5      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348a:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ee      	bne.n	8003474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003496:	7dfb      	ldrb	r3, [r7, #23]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349c:	4b39      	ldr	r3, [pc, #228]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	4a38      	ldr	r2, [pc, #224]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 80034a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a1 	beq.w	80035f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d05c      	beq.n	8003578 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d141      	bne.n	800354a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b31      	ldr	r3, [pc, #196]	; (800358c <HAL_RCC_OscConfig+0x478>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe faea 	bl	8001aa4 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe fae6 	bl	8001aa4 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e087      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	4b27      	ldr	r3, [pc, #156]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	3b01      	subs	r3, #1
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	061b      	lsls	r3, r3, #24
 8003516:	491b      	ldr	r1, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_OscConfig+0x478>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe fabf 	bl	8001aa4 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe fabb 	bl	8001aa4 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e05c      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x416>
 8003548:	e054      	b.n	80035f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_RCC_OscConfig+0x478>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe faa8 	bl	8001aa4 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe faa4 	bl	8001aa4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e045      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCC_OscConfig+0x470>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x444>
 8003576:	e03d      	b.n	80035f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e038      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
 8003584:	40023800 	.word	0x40023800
 8003588:	40007000 	.word	0x40007000
 800358c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x4ec>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d028      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d121      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d11a      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d111      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	3b01      	subs	r3, #1
 80035da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800

08003604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0cc      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	4b68      	ldr	r3, [pc, #416]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d90c      	bls.n	8003640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b65      	ldr	r3, [pc, #404]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0b8      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003658:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a58      	ldr	r2, [pc, #352]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003670:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a52      	ldr	r2, [pc, #328]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800367a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	494d      	ldr	r1, [pc, #308]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d044      	beq.n	8003724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d119      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e07f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	4b3f      	ldr	r3, [pc, #252]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e06f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e067      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e2:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4934      	ldr	r1, [pc, #208]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f4:	f7fe f9d6 	bl	8001aa4 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fe f9d2 	bl	8001aa4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e04f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 020c 	and.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d1eb      	bne.n	80036fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d20c      	bcs.n	800374c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e032      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4916      	ldr	r1, [pc, #88]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	490e      	ldr	r1, [pc, #56]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800378a:	f000 f821 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 800378e:	4602      	mov	r2, r0
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	490a      	ldr	r1, [pc, #40]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	5ccb      	ldrb	r3, [r1, r3]
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe f936 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00
 80037c0:	40023800 	.word	0x40023800
 80037c4:	08006a70 	.word	0x08006a70
 80037c8:	20000000 	.word	0x20000000
 80037cc:	20000004 	.word	0x20000004

080037d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d4:	b090      	sub	sp, #64	; 0x40
 80037d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
 80037dc:	2300      	movs	r3, #0
 80037de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e0:	2300      	movs	r3, #0
 80037e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e8:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d00d      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x40>
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	f200 80a1 	bhi.w	800393c <HAL_RCC_GetSysClockFreq+0x16c>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x34>
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d003      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x3a>
 8003802:	e09b      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b53      	ldr	r3, [pc, #332]	; (8003954 <HAL_RCC_GetSysClockFreq+0x184>)
 8003806:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003808:	e09b      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800380a:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_RCC_GetSysClockFreq+0x188>)
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800380e:	e098      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003810:	4b4f      	ldr	r3, [pc, #316]	; (8003950 <HAL_RCC_GetSysClockFreq+0x180>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800381a:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <HAL_RCC_GetSysClockFreq+0x180>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d028      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003826:	4b4a      	ldr	r3, [pc, #296]	; (8003950 <HAL_RCC_GetSysClockFreq+0x180>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	2200      	movs	r2, #0
 800382e:	623b      	str	r3, [r7, #32]
 8003830:	627a      	str	r2, [r7, #36]	; 0x24
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003838:	2100      	movs	r1, #0
 800383a:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_GetSysClockFreq+0x188>)
 800383c:	fb03 f201 	mul.w	r2, r3, r1
 8003840:	2300      	movs	r3, #0
 8003842:	fb00 f303 	mul.w	r3, r0, r3
 8003846:	4413      	add	r3, r2
 8003848:	4a43      	ldr	r2, [pc, #268]	; (8003958 <HAL_RCC_GetSysClockFreq+0x188>)
 800384a:	fba0 1202 	umull	r1, r2, r0, r2
 800384e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003850:	460a      	mov	r2, r1
 8003852:	62ba      	str	r2, [r7, #40]	; 0x28
 8003854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003856:	4413      	add	r3, r2
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	2200      	movs	r2, #0
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	61fa      	str	r2, [r7, #28]
 8003862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003866:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800386a:	f7fc fd09 	bl	8000280 <__aeabi_uldivmod>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4613      	mov	r3, r2
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003876:	e053      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003878:	4b35      	ldr	r3, [pc, #212]	; (8003950 <HAL_RCC_GetSysClockFreq+0x180>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	2200      	movs	r2, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	617a      	str	r2, [r7, #20]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800388a:	f04f 0b00 	mov.w	fp, #0
 800388e:	4652      	mov	r2, sl
 8003890:	465b      	mov	r3, fp
 8003892:	f04f 0000 	mov.w	r0, #0
 8003896:	f04f 0100 	mov.w	r1, #0
 800389a:	0159      	lsls	r1, r3, #5
 800389c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a0:	0150      	lsls	r0, r2, #5
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	ebb2 080a 	subs.w	r8, r2, sl
 80038aa:	eb63 090b 	sbc.w	r9, r3, fp
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038c2:	ebb2 0408 	subs.w	r4, r2, r8
 80038c6:	eb63 0509 	sbc.w	r5, r3, r9
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	00eb      	lsls	r3, r5, #3
 80038d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d8:	00e2      	lsls	r2, r4, #3
 80038da:	4614      	mov	r4, r2
 80038dc:	461d      	mov	r5, r3
 80038de:	eb14 030a 	adds.w	r3, r4, sl
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	eb45 030b 	adc.w	r3, r5, fp
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f6:	4629      	mov	r1, r5
 80038f8:	028b      	lsls	r3, r1, #10
 80038fa:	4621      	mov	r1, r4
 80038fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003900:	4621      	mov	r1, r4
 8003902:	028a      	lsls	r2, r1, #10
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	2200      	movs	r2, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	60fa      	str	r2, [r7, #12]
 8003910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003914:	f7fc fcb4 	bl	8000280 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4613      	mov	r3, r2
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_GetSysClockFreq+0x180>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	3301      	adds	r3, #1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800393a:	e002      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_GetSysClockFreq+0x184>)
 800393e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003944:	4618      	mov	r0, r3
 8003946:	3740      	adds	r7, #64	; 0x40
 8003948:	46bd      	mov	sp, r7
 800394a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	00f42400 	.word	0x00f42400
 8003958:	017d7840 	.word	0x017d7840

0800395c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCC_GetHCLKFreq+0x14>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000000 	.word	0x20000000

08003974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003978:	f7ff fff0 	bl	800395c <HAL_RCC_GetHCLKFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	08006a80 	.word	0x08006a80

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a0:	f7ff ffdc 	bl	800395c <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0b5b      	lsrs	r3, r3, #13
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	08006a80 	.word	0x08006a80

080039c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e041      	b.n	8003a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd feea 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 fba6 	bl	8004154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d001      	beq.n	8003a7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e03c      	b.n	8003af6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1e      	ldr	r2, [pc, #120]	; (8003b04 <HAL_TIM_Base_Start+0xa0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d018      	beq.n	8003ac0 <HAL_TIM_Base_Start+0x5c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d013      	beq.n	8003ac0 <HAL_TIM_Base_Start+0x5c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <HAL_TIM_Base_Start+0xa4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_TIM_Base_Start+0x5c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a19      	ldr	r2, [pc, #100]	; (8003b0c <HAL_TIM_Base_Start+0xa8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_TIM_Base_Start+0x5c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_TIM_Base_Start+0xac>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_TIM_Base_Start+0x5c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <HAL_TIM_Base_Start+0xb0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d111      	bne.n	8003ae4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b06      	cmp	r3, #6
 8003ad0:	d010      	beq.n	8003af4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae2:	e007      	b.n	8003af4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40010000 	.word	0x40010000
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40000c00 	.word	0x40000c00
 8003b14:	40014000 	.word	0x40014000

08003b18 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6a1a      	ldr	r2, [r3, #32]
 8003b26:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10f      	bne.n	8003b50 <HAL_TIM_Base_Stop+0x38>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	f240 4344 	movw	r3, #1092	; 0x444
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d107      	bne.n	8003b50 <HAL_TIM_Base_Stop+0x38>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d001      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e044      	b.n	8003c0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d018      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003baa:	d013      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1a      	ldr	r2, [pc, #104]	; (8003c1c <HAL_TIM_Base_Start_IT+0xb4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00e      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <HAL_TIM_Base_Start_IT+0xb8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d009      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d004      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d111      	bne.n	8003bf8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d010      	beq.n	8003c08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	e007      	b.n	8003c08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40014000 	.word	0x40014000

08003c2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e041      	b.n	8003cc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f839 	bl	8003cca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f000 fa72 	bl	8004154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_TIM_PWM_Start+0x24>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	bf14      	ite	ne
 8003cfc:	2301      	movne	r3, #1
 8003cfe:	2300      	moveq	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e022      	b.n	8003d4a <HAL_TIM_PWM_Start+0x6a>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d109      	bne.n	8003d1e <HAL_TIM_PWM_Start+0x3e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e015      	b.n	8003d4a <HAL_TIM_PWM_Start+0x6a>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d109      	bne.n	8003d38 <HAL_TIM_PWM_Start+0x58>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	e008      	b.n	8003d4a <HAL_TIM_PWM_Start+0x6a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	bf14      	ite	ne
 8003d44:	2301      	movne	r3, #1
 8003d46:	2300      	moveq	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e068      	b.n	8003e24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_PWM_Start+0x82>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d60:	e013      	b.n	8003d8a <HAL_TIM_PWM_Start+0xaa>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d104      	bne.n	8003d72 <HAL_TIM_PWM_Start+0x92>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d70:	e00b      	b.n	8003d8a <HAL_TIM_PWM_Start+0xaa>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_PWM_Start+0xa2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d80:	e003      	b.n	8003d8a <HAL_TIM_PWM_Start+0xaa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	6839      	ldr	r1, [r7, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fc84 	bl	80046a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <HAL_TIM_PWM_Start+0x14c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d107      	bne.n	8003db2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_TIM_PWM_Start+0x14c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_TIM_PWM_Start+0x10e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc4:	d013      	beq.n	8003dee <HAL_TIM_PWM_Start+0x10e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <HAL_TIM_PWM_Start+0x150>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_TIM_PWM_Start+0x10e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <HAL_TIM_PWM_Start+0x154>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_TIM_PWM_Start+0x10e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <HAL_TIM_PWM_Start+0x158>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_TIM_PWM_Start+0x10e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <HAL_TIM_PWM_Start+0x15c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d111      	bne.n	8003e12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b06      	cmp	r3, #6
 8003dfe:	d010      	beq.n	8003e22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e10:	e007      	b.n	8003e22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40014000 	.word	0x40014000

08003e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0ae      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	f200 809f 	bhi.w	8003fac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003fad 	.word	0x08003fad
 8003e7c:	08003fad 	.word	0x08003fad
 8003e80:	08003fad 	.word	0x08003fad
 8003e84:	08003ee9 	.word	0x08003ee9
 8003e88:	08003fad 	.word	0x08003fad
 8003e8c:	08003fad 	.word	0x08003fad
 8003e90:	08003fad 	.word	0x08003fad
 8003e94:	08003f2b 	.word	0x08003f2b
 8003e98:	08003fad 	.word	0x08003fad
 8003e9c:	08003fad 	.word	0x08003fad
 8003ea0:	08003fad 	.word	0x08003fad
 8003ea4:	08003f6b 	.word	0x08003f6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f9d0 	bl	8004254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0208 	orr.w	r2, r2, #8
 8003ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0204 	bic.w	r2, r2, #4
 8003ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6999      	ldr	r1, [r3, #24]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	619a      	str	r2, [r3, #24]
      break;
 8003ee6:	e064      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa16 	bl	8004320 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	619a      	str	r2, [r3, #24]
      break;
 8003f28:	e043      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fa61 	bl	80043f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0208 	orr.w	r2, r2, #8
 8003f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0204 	bic.w	r2, r2, #4
 8003f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69d9      	ldr	r1, [r3, #28]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	61da      	str	r2, [r3, #28]
      break;
 8003f68:	e023      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 faab 	bl	80044cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69d9      	ldr	r1, [r3, #28]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	021a      	lsls	r2, r3, #8
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	61da      	str	r2, [r3, #28]
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIM_ConfigClockSource+0x1c>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e0b4      	b.n	800414a <HAL_TIM_ConfigClockSource+0x186>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004018:	d03e      	beq.n	8004098 <HAL_TIM_ConfigClockSource+0xd4>
 800401a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401e:	f200 8087 	bhi.w	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	f000 8086 	beq.w	8004136 <HAL_TIM_ConfigClockSource+0x172>
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402e:	d87f      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b70      	cmp	r3, #112	; 0x70
 8004032:	d01a      	beq.n	800406a <HAL_TIM_ConfigClockSource+0xa6>
 8004034:	2b70      	cmp	r3, #112	; 0x70
 8004036:	d87b      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b60      	cmp	r3, #96	; 0x60
 800403a:	d050      	beq.n	80040de <HAL_TIM_ConfigClockSource+0x11a>
 800403c:	2b60      	cmp	r3, #96	; 0x60
 800403e:	d877      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004040:	2b50      	cmp	r3, #80	; 0x50
 8004042:	d03c      	beq.n	80040be <HAL_TIM_ConfigClockSource+0xfa>
 8004044:	2b50      	cmp	r3, #80	; 0x50
 8004046:	d873      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d058      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x13a>
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d86f      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004050:	2b30      	cmp	r3, #48	; 0x30
 8004052:	d064      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004054:	2b30      	cmp	r3, #48	; 0x30
 8004056:	d86b      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004058:	2b20      	cmp	r3, #32
 800405a:	d060      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 800405c:	2b20      	cmp	r3, #32
 800405e:	d867      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05c      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004064:	2b10      	cmp	r3, #16
 8004066:	d05a      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004068:	e062      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6899      	ldr	r1, [r3, #8]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f000 faf1 	bl	8004660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800408c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	609a      	str	r2, [r3, #8]
      break;
 8004096:	e04f      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6899      	ldr	r1, [r3, #8]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f000 fada 	bl	8004660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ba:	609a      	str	r2, [r3, #8]
      break;
 80040bc:	e03c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6859      	ldr	r1, [r3, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f000 fa4e 	bl	800456c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2150      	movs	r1, #80	; 0x50
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 faa7 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 80040dc:	e02c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6859      	ldr	r1, [r3, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f000 fa6d 	bl	80045ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2160      	movs	r1, #96	; 0x60
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fa97 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 80040fc:	e01c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	461a      	mov	r2, r3
 800410c:	f000 fa2e 	bl	800456c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fa87 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 800411c:	e00c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f000 fa7e 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 800412e:	e003      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      break;
 8004134:	e000      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a34      	ldr	r2, [pc, #208]	; (8004238 <TIM_Base_SetConfig+0xe4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00f      	beq.n	800418c <TIM_Base_SetConfig+0x38>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004172:	d00b      	beq.n	800418c <TIM_Base_SetConfig+0x38>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a31      	ldr	r2, [pc, #196]	; (800423c <TIM_Base_SetConfig+0xe8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d007      	beq.n	800418c <TIM_Base_SetConfig+0x38>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a30      	ldr	r2, [pc, #192]	; (8004240 <TIM_Base_SetConfig+0xec>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0x38>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a2f      	ldr	r2, [pc, #188]	; (8004244 <TIM_Base_SetConfig+0xf0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a25      	ldr	r2, [pc, #148]	; (8004238 <TIM_Base_SetConfig+0xe4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01b      	beq.n	80041de <TIM_Base_SetConfig+0x8a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d017      	beq.n	80041de <TIM_Base_SetConfig+0x8a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a22      	ldr	r2, [pc, #136]	; (800423c <TIM_Base_SetConfig+0xe8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <TIM_Base_SetConfig+0x8a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a21      	ldr	r2, [pc, #132]	; (8004240 <TIM_Base_SetConfig+0xec>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00f      	beq.n	80041de <TIM_Base_SetConfig+0x8a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a20      	ldr	r2, [pc, #128]	; (8004244 <TIM_Base_SetConfig+0xf0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_Base_SetConfig+0x8a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <TIM_Base_SetConfig+0xf4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_Base_SetConfig+0x8a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1e      	ldr	r2, [pc, #120]	; (800424c <TIM_Base_SetConfig+0xf8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_Base_SetConfig+0x8a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <TIM_Base_SetConfig+0xfc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a08      	ldr	r2, [pc, #32]	; (8004238 <TIM_Base_SetConfig+0xe4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d103      	bne.n	8004224 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	615a      	str	r2, [r3, #20]
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40010000 	.word	0x40010000
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800
 8004244:	40000c00 	.word	0x40000c00
 8004248:	40014000 	.word	0x40014000
 800424c:	40014400 	.word	0x40014400
 8004250:	40014800 	.word	0x40014800

08004254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 0302 	bic.w	r3, r3, #2
 800429c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a1c      	ldr	r2, [pc, #112]	; (800431c <TIM_OC1_SetConfig+0xc8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10c      	bne.n	80042ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0308 	bic.w	r3, r3, #8
 80042b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 0304 	bic.w	r3, r3, #4
 80042c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a13      	ldr	r2, [pc, #76]	; (800431c <TIM_OC1_SetConfig+0xc8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d111      	bne.n	80042f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	621a      	str	r2, [r3, #32]
}
 8004310:	bf00      	nop
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40010000 	.word	0x40010000

08004320 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f023 0210 	bic.w	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0320 	bic.w	r3, r3, #32
 800436a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <TIM_OC2_SetConfig+0xd4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10d      	bne.n	800439c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <TIM_OC2_SetConfig+0xd4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d113      	bne.n	80043cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	621a      	str	r2, [r3, #32]
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000

080043f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0303 	bic.w	r3, r3, #3
 800442e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <TIM_OC3_SetConfig+0xd0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d10d      	bne.n	8004472 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800445c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <TIM_OC3_SetConfig+0xd0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d113      	bne.n	80044a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	621a      	str	r2, [r3, #32]
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40010000 	.word	0x40010000

080044cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	031b      	lsls	r3, r3, #12
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a10      	ldr	r2, [pc, #64]	; (8004568 <TIM_OC4_SetConfig+0x9c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d109      	bne.n	8004540 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004532:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	019b      	lsls	r3, r3, #6
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000

0800456c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f023 0201 	bic.w	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f023 030a 	bic.w	r3, r3, #10
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b087      	sub	sp, #28
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f023 0210 	bic.w	r2, r3, #16
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	031b      	lsls	r3, r3, #12
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	f043 0307 	orr.w	r3, r3, #7
 800464c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800467a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	021a      	lsls	r2, r3, #8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	431a      	orrs	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4313      	orrs	r3, r2
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	609a      	str	r2, [r3, #8]
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2201      	movs	r2, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1a      	ldr	r2, [r3, #32]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	401a      	ands	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	431a      	orrs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004700:	2302      	movs	r3, #2
 8004702:	e050      	b.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d018      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004750:	d013      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00e      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a16      	ldr	r2, [pc, #88]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10c      	bne.n	8004794 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	4313      	orrs	r3, r2
 800478a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800
 80047c0:	40000c00 	.word	0x40000c00
 80047c4:	40014000 	.word	0x40014000

080047c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e03f      	b.n	800485a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fd f880 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800480a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f9cb 	bl	8004ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695a      	ldr	r2, [r3, #20]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b08a      	sub	sp, #40	; 0x28
 8004866:	af02      	add	r7, sp, #8
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b20      	cmp	r3, #32
 8004880:	d17c      	bne.n	800497c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_UART_Transmit+0x2c>
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e075      	b.n	800497e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Transmit+0x3e>
 800489c:	2302      	movs	r3, #2
 800489e:	e06e      	b.n	800497e <HAL_UART_Transmit+0x11c>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2221      	movs	r2, #33	; 0x21
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048b6:	f7fd f8f5 	bl	8001aa4 <HAL_GetTick>
 80048ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d0:	d108      	bne.n	80048e4 <HAL_UART_Transmit+0x82>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d104      	bne.n	80048e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e003      	b.n	80048ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048f4:	e02a      	b.n	800494c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2200      	movs	r2, #0
 80048fe:	2180      	movs	r1, #128	; 0x80
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f8e2 	bl	8004aca <UART_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e036      	b.n	800497e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10b      	bne.n	800492e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004924:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	3302      	adds	r3, #2
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	e007      	b.n	800493e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	781a      	ldrb	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	3301      	adds	r3, #1
 800493c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1cf      	bne.n	80048f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	2140      	movs	r1, #64	; 0x40
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f8b2 	bl	8004aca <UART_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e006      	b.n	800497e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b08a      	sub	sp, #40	; 0x28
 800498a:	af02      	add	r7, sp, #8
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f040 808c 	bne.w	8004ac0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_UART_Receive+0x2e>
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e084      	b.n	8004ac2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_UART_Receive+0x40>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e07d      	b.n	8004ac2 <HAL_UART_Receive+0x13c>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2222      	movs	r2, #34	; 0x22
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049e2:	f7fd f85f 	bl	8001aa4 <HAL_GetTick>
 80049e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	88fa      	ldrh	r2, [r7, #6]
 80049ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	88fa      	ldrh	r2, [r7, #6]
 80049f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fc:	d108      	bne.n	8004a10 <HAL_UART_Receive+0x8a>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	e003      	b.n	8004a18 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004a20:	e043      	b.n	8004aaa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2120      	movs	r1, #32
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f84c 	bl	8004aca <UART_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e042      	b.n	8004ac2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10c      	bne.n	8004a5c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	3302      	adds	r3, #2
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	e01f      	b.n	8004a9c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a64:	d007      	beq.n	8004a76 <HAL_UART_Receive+0xf0>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10a      	bne.n	8004a84 <HAL_UART_Receive+0xfe>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	e008      	b.n	8004a96 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1b6      	bne.n	8004a22 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b090      	sub	sp, #64	; 0x40
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ada:	e050      	b.n	8004b7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae2:	d04c      	beq.n	8004b7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <UART_WaitOnFlagUntilTimeout+0x30>
 8004aea:	f7fc ffdb 	bl	8001aa4 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d241      	bcs.n	8004b7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b1a:	637a      	str	r2, [r7, #52]	; 0x34
 8004b1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e5      	bne.n	8004afa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3314      	adds	r3, #20
 8004b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b4e:	623a      	str	r2, [r7, #32]
 8004b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	69f9      	ldr	r1, [r7, #28]
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e5      	bne.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e00f      	b.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4013      	ands	r3, r2
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	bf0c      	ite	eq
 8004b8e:	2301      	moveq	r3, #1
 8004b90:	2300      	movne	r3, #0
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d09f      	beq.n	8004adc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3740      	adds	r7, #64	; 0x40
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bac:	b0c0      	sub	sp, #256	; 0x100
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	68d9      	ldr	r1, [r3, #12]
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	ea40 0301 	orr.w	r3, r0, r1
 8004bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c00:	f021 010c 	bic.w	r1, r1, #12
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c22:	6999      	ldr	r1, [r3, #24]
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	ea40 0301 	orr.w	r3, r0, r1
 8004c2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4b8f      	ldr	r3, [pc, #572]	; (8004e74 <UART_SetConfig+0x2cc>)
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d005      	beq.n	8004c48 <UART_SetConfig+0xa0>
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b8d      	ldr	r3, [pc, #564]	; (8004e78 <UART_SetConfig+0x2d0>)
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d104      	bne.n	8004c52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c48:	f7fe fea8 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8004c4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c50:	e003      	b.n	8004c5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c52:	f7fe fe8f 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8004c56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c64:	f040 810c 	bne.w	8004e80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	1891      	adds	r1, r2, r2
 8004c80:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c82:	415b      	adcs	r3, r3
 8004c84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	eb12 0801 	adds.w	r8, r2, r1
 8004c90:	4629      	mov	r1, r5
 8004c92:	eb43 0901 	adc.w	r9, r3, r1
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004caa:	4690      	mov	r8, r2
 8004cac:	4699      	mov	r9, r3
 8004cae:	4623      	mov	r3, r4
 8004cb0:	eb18 0303 	adds.w	r3, r8, r3
 8004cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cb8:	462b      	mov	r3, r5
 8004cba:	eb49 0303 	adc.w	r3, r9, r3
 8004cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	18db      	adds	r3, r3, r3
 8004cda:	653b      	str	r3, [r7, #80]	; 0x50
 8004cdc:	4613      	mov	r3, r2
 8004cde:	eb42 0303 	adc.w	r3, r2, r3
 8004ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ce4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ce8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cec:	f7fb fac8 	bl	8000280 <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4b61      	ldr	r3, [pc, #388]	; (8004e7c <UART_SetConfig+0x2d4>)
 8004cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	011c      	lsls	r4, r3, #4
 8004cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	1891      	adds	r1, r2, r2
 8004d16:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d18:	415b      	adcs	r3, r3
 8004d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d20:	4641      	mov	r1, r8
 8004d22:	eb12 0a01 	adds.w	sl, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb43 0b01 	adc.w	fp, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d40:	4692      	mov	sl, r2
 8004d42:	469b      	mov	fp, r3
 8004d44:	4643      	mov	r3, r8
 8004d46:	eb1a 0303 	adds.w	r3, sl, r3
 8004d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	eb4b 0303 	adc.w	r3, fp, r3
 8004d54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	18db      	adds	r3, r3, r3
 8004d70:	643b      	str	r3, [r7, #64]	; 0x40
 8004d72:	4613      	mov	r3, r2
 8004d74:	eb42 0303 	adc.w	r3, r2, r3
 8004d78:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d82:	f7fb fa7d 	bl	8000280 <__aeabi_uldivmod>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4b3b      	ldr	r3, [pc, #236]	; (8004e7c <UART_SetConfig+0x2d4>)
 8004d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	2264      	movs	r2, #100	; 0x64
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	1acb      	subs	r3, r1, r3
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004da2:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <UART_SetConfig+0x2d4>)
 8004da4:	fba3 2302 	umull	r2, r3, r3, r2
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004db0:	441c      	add	r4, r3
 8004db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004dc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	1891      	adds	r1, r2, r2
 8004dca:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dcc:	415b      	adcs	r3, r3
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	1851      	adds	r1, r2, r1
 8004dd8:	6339      	str	r1, [r7, #48]	; 0x30
 8004dda:	4649      	mov	r1, r9
 8004ddc:	414b      	adcs	r3, r1
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dec:	4659      	mov	r1, fp
 8004dee:	00cb      	lsls	r3, r1, #3
 8004df0:	4651      	mov	r1, sl
 8004df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004df6:	4651      	mov	r1, sl
 8004df8:	00ca      	lsls	r2, r1, #3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4642      	mov	r2, r8
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e08:	464b      	mov	r3, r9
 8004e0a:	460a      	mov	r2, r1
 8004e0c:	eb42 0303 	adc.w	r3, r2, r3
 8004e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e28:	460b      	mov	r3, r1
 8004e2a:	18db      	adds	r3, r3, r3
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2e:	4613      	mov	r3, r2
 8004e30:	eb42 0303 	adc.w	r3, r2, r3
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e3e:	f7fb fa1f 	bl	8000280 <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <UART_SetConfig+0x2d4>)
 8004e48:	fba3 1302 	umull	r1, r3, r3, r2
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	2164      	movs	r1, #100	; 0x64
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	3332      	adds	r3, #50	; 0x32
 8004e5a:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <UART_SetConfig+0x2d4>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	f003 0207 	and.w	r2, r3, #7
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4422      	add	r2, r4
 8004e6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e70:	e105      	b.n	800507e <UART_SetConfig+0x4d6>
 8004e72:	bf00      	nop
 8004e74:	40011000 	.word	0x40011000
 8004e78:	40011400 	.word	0x40011400
 8004e7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e92:	4642      	mov	r2, r8
 8004e94:	464b      	mov	r3, r9
 8004e96:	1891      	adds	r1, r2, r2
 8004e98:	6239      	str	r1, [r7, #32]
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ea2:	4641      	mov	r1, r8
 8004ea4:	1854      	adds	r4, r2, r1
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	eb43 0501 	adc.w	r5, r3, r1
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	00eb      	lsls	r3, r5, #3
 8004eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eba:	00e2      	lsls	r2, r4, #3
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	461d      	mov	r5, r3
 8004ec0:	4643      	mov	r3, r8
 8004ec2:	18e3      	adds	r3, r4, r3
 8004ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ec8:	464b      	mov	r3, r9
 8004eca:	eb45 0303 	adc.w	r3, r5, r3
 8004ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ede:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eee:	4629      	mov	r1, r5
 8004ef0:	008b      	lsls	r3, r1, #2
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ef8:	4621      	mov	r1, r4
 8004efa:	008a      	lsls	r2, r1, #2
 8004efc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f00:	f7fb f9be 	bl	8000280 <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4b60      	ldr	r3, [pc, #384]	; (800508c <UART_SetConfig+0x4e4>)
 8004f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	011c      	lsls	r4, r3, #4
 8004f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f24:	4642      	mov	r2, r8
 8004f26:	464b      	mov	r3, r9
 8004f28:	1891      	adds	r1, r2, r2
 8004f2a:	61b9      	str	r1, [r7, #24]
 8004f2c:	415b      	adcs	r3, r3
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f34:	4641      	mov	r1, r8
 8004f36:	1851      	adds	r1, r2, r1
 8004f38:	6139      	str	r1, [r7, #16]
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	414b      	adcs	r3, r1
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f4c:	4659      	mov	r1, fp
 8004f4e:	00cb      	lsls	r3, r1, #3
 8004f50:	4651      	mov	r1, sl
 8004f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f56:	4651      	mov	r1, sl
 8004f58:	00ca      	lsls	r2, r1, #3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4642      	mov	r2, r8
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f68:	464b      	mov	r3, r9
 8004f6a:	460a      	mov	r2, r1
 8004f6c:	eb42 0303 	adc.w	r3, r2, r3
 8004f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	008b      	lsls	r3, r1, #2
 8004f90:	4641      	mov	r1, r8
 8004f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f96:	4641      	mov	r1, r8
 8004f98:	008a      	lsls	r2, r1, #2
 8004f9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f9e:	f7fb f96f 	bl	8000280 <__aeabi_uldivmod>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4b39      	ldr	r3, [pc, #228]	; (800508c <UART_SetConfig+0x4e4>)
 8004fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	2164      	movs	r1, #100	; 0x64
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	3332      	adds	r3, #50	; 0x32
 8004fba:	4a34      	ldr	r2, [pc, #208]	; (800508c <UART_SetConfig+0x4e4>)
 8004fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc6:	441c      	add	r4, r3
 8004fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fcc:	2200      	movs	r2, #0
 8004fce:	673b      	str	r3, [r7, #112]	; 0x70
 8004fd0:	677a      	str	r2, [r7, #116]	; 0x74
 8004fd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fd6:	4642      	mov	r2, r8
 8004fd8:	464b      	mov	r3, r9
 8004fda:	1891      	adds	r1, r2, r2
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	415b      	adcs	r3, r3
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	1851      	adds	r1, r2, r1
 8004fea:	6039      	str	r1, [r7, #0]
 8004fec:	4649      	mov	r1, r9
 8004fee:	414b      	adcs	r3, r1
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ffe:	4659      	mov	r1, fp
 8005000:	00cb      	lsls	r3, r1, #3
 8005002:	4651      	mov	r1, sl
 8005004:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005008:	4651      	mov	r1, sl
 800500a:	00ca      	lsls	r2, r1, #3
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	4603      	mov	r3, r0
 8005012:	4642      	mov	r2, r8
 8005014:	189b      	adds	r3, r3, r2
 8005016:	66bb      	str	r3, [r7, #104]	; 0x68
 8005018:	464b      	mov	r3, r9
 800501a:	460a      	mov	r2, r1
 800501c:	eb42 0303 	adc.w	r3, r2, r3
 8005020:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	663b      	str	r3, [r7, #96]	; 0x60
 800502c:	667a      	str	r2, [r7, #100]	; 0x64
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800503a:	4649      	mov	r1, r9
 800503c:	008b      	lsls	r3, r1, #2
 800503e:	4641      	mov	r1, r8
 8005040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005044:	4641      	mov	r1, r8
 8005046:	008a      	lsls	r2, r1, #2
 8005048:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800504c:	f7fb f918 	bl	8000280 <__aeabi_uldivmod>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4b0d      	ldr	r3, [pc, #52]	; (800508c <UART_SetConfig+0x4e4>)
 8005056:	fba3 1302 	umull	r1, r3, r3, r2
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2164      	movs	r1, #100	; 0x64
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	3332      	adds	r3, #50	; 0x32
 8005068:	4a08      	ldr	r2, [pc, #32]	; (800508c <UART_SetConfig+0x4e4>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	f003 020f 	and.w	r2, r3, #15
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4422      	add	r2, r4
 800507c:	609a      	str	r2, [r3, #8]
}
 800507e:	bf00      	nop
 8005080:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005084:	46bd      	mov	sp, r7
 8005086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800508a:	bf00      	nop
 800508c:	51eb851f 	.word	0x51eb851f

08005090 <atoi>:
 8005090:	220a      	movs	r2, #10
 8005092:	2100      	movs	r1, #0
 8005094:	f000 ba30 	b.w	80054f8 <strtol>

08005098 <__errno>:
 8005098:	4b01      	ldr	r3, [pc, #4]	; (80050a0 <__errno+0x8>)
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	2000000c 	.word	0x2000000c

080050a4 <getchar>:
 80050a4:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <getchar+0x20>)
 80050a6:	b510      	push	{r4, lr}
 80050a8:	681c      	ldr	r4, [r3, #0]
 80050aa:	b124      	cbz	r4, 80050b6 <getchar+0x12>
 80050ac:	69a3      	ldr	r3, [r4, #24]
 80050ae:	b913      	cbnz	r3, 80050b6 <getchar+0x12>
 80050b0:	4620      	mov	r0, r4
 80050b2:	f000 fc17 	bl	80058e4 <__sinit>
 80050b6:	6861      	ldr	r1, [r4, #4]
 80050b8:	4620      	mov	r0, r4
 80050ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050be:	f000 bccb 	b.w	8005a58 <_getc_r>
 80050c2:	bf00      	nop
 80050c4:	2000000c 	.word	0x2000000c

080050c8 <__libc_init_array>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4d0d      	ldr	r5, [pc, #52]	; (8005100 <__libc_init_array+0x38>)
 80050cc:	4c0d      	ldr	r4, [pc, #52]	; (8005104 <__libc_init_array+0x3c>)
 80050ce:	1b64      	subs	r4, r4, r5
 80050d0:	10a4      	asrs	r4, r4, #2
 80050d2:	2600      	movs	r6, #0
 80050d4:	42a6      	cmp	r6, r4
 80050d6:	d109      	bne.n	80050ec <__libc_init_array+0x24>
 80050d8:	4d0b      	ldr	r5, [pc, #44]	; (8005108 <__libc_init_array+0x40>)
 80050da:	4c0c      	ldr	r4, [pc, #48]	; (800510c <__libc_init_array+0x44>)
 80050dc:	f001 fb0a 	bl	80066f4 <_init>
 80050e0:	1b64      	subs	r4, r4, r5
 80050e2:	10a4      	asrs	r4, r4, #2
 80050e4:	2600      	movs	r6, #0
 80050e6:	42a6      	cmp	r6, r4
 80050e8:	d105      	bne.n	80050f6 <__libc_init_array+0x2e>
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f0:	4798      	blx	r3
 80050f2:	3601      	adds	r6, #1
 80050f4:	e7ee      	b.n	80050d4 <__libc_init_array+0xc>
 80050f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fa:	4798      	blx	r3
 80050fc:	3601      	adds	r6, #1
 80050fe:	e7f2      	b.n	80050e6 <__libc_init_array+0x1e>
 8005100:	08006c34 	.word	0x08006c34
 8005104:	08006c34 	.word	0x08006c34
 8005108:	08006c34 	.word	0x08006c34
 800510c:	08006c38 	.word	0x08006c38

08005110 <memset>:
 8005110:	4402      	add	r2, r0
 8005112:	4603      	mov	r3, r0
 8005114:	4293      	cmp	r3, r2
 8005116:	d100      	bne.n	800511a <memset+0xa>
 8005118:	4770      	bx	lr
 800511a:	f803 1b01 	strb.w	r1, [r3], #1
 800511e:	e7f9      	b.n	8005114 <memset+0x4>

08005120 <iprintf>:
 8005120:	b40f      	push	{r0, r1, r2, r3}
 8005122:	4b0a      	ldr	r3, [pc, #40]	; (800514c <iprintf+0x2c>)
 8005124:	b513      	push	{r0, r1, r4, lr}
 8005126:	681c      	ldr	r4, [r3, #0]
 8005128:	b124      	cbz	r4, 8005134 <iprintf+0x14>
 800512a:	69a3      	ldr	r3, [r4, #24]
 800512c:	b913      	cbnz	r3, 8005134 <iprintf+0x14>
 800512e:	4620      	mov	r0, r4
 8005130:	f000 fbd8 	bl	80058e4 <__sinit>
 8005134:	ab05      	add	r3, sp, #20
 8005136:	9a04      	ldr	r2, [sp, #16]
 8005138:	68a1      	ldr	r1, [r4, #8]
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	4620      	mov	r0, r4
 800513e:	f000 fe45 	bl	8005dcc <_vfiprintf_r>
 8005142:	b002      	add	sp, #8
 8005144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005148:	b004      	add	sp, #16
 800514a:	4770      	bx	lr
 800514c:	2000000c 	.word	0x2000000c

08005150 <putchar>:
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <putchar+0x28>)
 8005152:	b513      	push	{r0, r1, r4, lr}
 8005154:	681c      	ldr	r4, [r3, #0]
 8005156:	4601      	mov	r1, r0
 8005158:	b134      	cbz	r4, 8005168 <putchar+0x18>
 800515a:	69a3      	ldr	r3, [r4, #24]
 800515c:	b923      	cbnz	r3, 8005168 <putchar+0x18>
 800515e:	9001      	str	r0, [sp, #4]
 8005160:	4620      	mov	r0, r4
 8005162:	f000 fbbf 	bl	80058e4 <__sinit>
 8005166:	9901      	ldr	r1, [sp, #4]
 8005168:	68a2      	ldr	r2, [r4, #8]
 800516a:	4620      	mov	r0, r4
 800516c:	b002      	add	sp, #8
 800516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005172:	f001 b8ef 	b.w	8006354 <_putc_r>
 8005176:	bf00      	nop
 8005178:	2000000c 	.word	0x2000000c

0800517c <_puts_r>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	460e      	mov	r6, r1
 8005180:	4605      	mov	r5, r0
 8005182:	b118      	cbz	r0, 800518c <_puts_r+0x10>
 8005184:	6983      	ldr	r3, [r0, #24]
 8005186:	b90b      	cbnz	r3, 800518c <_puts_r+0x10>
 8005188:	f000 fbac 	bl	80058e4 <__sinit>
 800518c:	69ab      	ldr	r3, [r5, #24]
 800518e:	68ac      	ldr	r4, [r5, #8]
 8005190:	b913      	cbnz	r3, 8005198 <_puts_r+0x1c>
 8005192:	4628      	mov	r0, r5
 8005194:	f000 fba6 	bl	80058e4 <__sinit>
 8005198:	4b2c      	ldr	r3, [pc, #176]	; (800524c <_puts_r+0xd0>)
 800519a:	429c      	cmp	r4, r3
 800519c:	d120      	bne.n	80051e0 <_puts_r+0x64>
 800519e:	686c      	ldr	r4, [r5, #4]
 80051a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a2:	07db      	lsls	r3, r3, #31
 80051a4:	d405      	bmi.n	80051b2 <_puts_r+0x36>
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	0598      	lsls	r0, r3, #22
 80051aa:	d402      	bmi.n	80051b2 <_puts_r+0x36>
 80051ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ae:	f000 fc94 	bl	8005ada <__retarget_lock_acquire_recursive>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	0719      	lsls	r1, r3, #28
 80051b6:	d51d      	bpl.n	80051f4 <_puts_r+0x78>
 80051b8:	6923      	ldr	r3, [r4, #16]
 80051ba:	b1db      	cbz	r3, 80051f4 <_puts_r+0x78>
 80051bc:	3e01      	subs	r6, #1
 80051be:	68a3      	ldr	r3, [r4, #8]
 80051c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051c4:	3b01      	subs	r3, #1
 80051c6:	60a3      	str	r3, [r4, #8]
 80051c8:	bb39      	cbnz	r1, 800521a <_puts_r+0x9e>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da38      	bge.n	8005240 <_puts_r+0xc4>
 80051ce:	4622      	mov	r2, r4
 80051d0:	210a      	movs	r1, #10
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 f99a 	bl	800550c <__swbuf_r>
 80051d8:	3001      	adds	r0, #1
 80051da:	d011      	beq.n	8005200 <_puts_r+0x84>
 80051dc:	250a      	movs	r5, #10
 80051de:	e011      	b.n	8005204 <_puts_r+0x88>
 80051e0:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <_puts_r+0xd4>)
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d101      	bne.n	80051ea <_puts_r+0x6e>
 80051e6:	68ac      	ldr	r4, [r5, #8]
 80051e8:	e7da      	b.n	80051a0 <_puts_r+0x24>
 80051ea:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <_puts_r+0xd8>)
 80051ec:	429c      	cmp	r4, r3
 80051ee:	bf08      	it	eq
 80051f0:	68ec      	ldreq	r4, [r5, #12]
 80051f2:	e7d5      	b.n	80051a0 <_puts_r+0x24>
 80051f4:	4621      	mov	r1, r4
 80051f6:	4628      	mov	r0, r5
 80051f8:	f000 f9da 	bl	80055b0 <__swsetup_r>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d0dd      	beq.n	80051bc <_puts_r+0x40>
 8005200:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005206:	07da      	lsls	r2, r3, #31
 8005208:	d405      	bmi.n	8005216 <_puts_r+0x9a>
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	059b      	lsls	r3, r3, #22
 800520e:	d402      	bmi.n	8005216 <_puts_r+0x9a>
 8005210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005212:	f000 fc63 	bl	8005adc <__retarget_lock_release_recursive>
 8005216:	4628      	mov	r0, r5
 8005218:	bd70      	pop	{r4, r5, r6, pc}
 800521a:	2b00      	cmp	r3, #0
 800521c:	da04      	bge.n	8005228 <_puts_r+0xac>
 800521e:	69a2      	ldr	r2, [r4, #24]
 8005220:	429a      	cmp	r2, r3
 8005222:	dc06      	bgt.n	8005232 <_puts_r+0xb6>
 8005224:	290a      	cmp	r1, #10
 8005226:	d004      	beq.n	8005232 <_puts_r+0xb6>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	6022      	str	r2, [r4, #0]
 800522e:	7019      	strb	r1, [r3, #0]
 8005230:	e7c5      	b.n	80051be <_puts_r+0x42>
 8005232:	4622      	mov	r2, r4
 8005234:	4628      	mov	r0, r5
 8005236:	f000 f969 	bl	800550c <__swbuf_r>
 800523a:	3001      	adds	r0, #1
 800523c:	d1bf      	bne.n	80051be <_puts_r+0x42>
 800523e:	e7df      	b.n	8005200 <_puts_r+0x84>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	250a      	movs	r5, #10
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	6022      	str	r2, [r4, #0]
 8005248:	701d      	strb	r5, [r3, #0]
 800524a:	e7db      	b.n	8005204 <_puts_r+0x88>
 800524c:	08006bb8 	.word	0x08006bb8
 8005250:	08006bd8 	.word	0x08006bd8
 8005254:	08006b98 	.word	0x08006b98

08005258 <puts>:
 8005258:	4b02      	ldr	r3, [pc, #8]	; (8005264 <puts+0xc>)
 800525a:	4601      	mov	r1, r0
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	f7ff bf8d 	b.w	800517c <_puts_r>
 8005262:	bf00      	nop
 8005264:	2000000c 	.word	0x2000000c

08005268 <setvbuf>:
 8005268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800526c:	461d      	mov	r5, r3
 800526e:	4b5d      	ldr	r3, [pc, #372]	; (80053e4 <setvbuf+0x17c>)
 8005270:	681f      	ldr	r7, [r3, #0]
 8005272:	4604      	mov	r4, r0
 8005274:	460e      	mov	r6, r1
 8005276:	4690      	mov	r8, r2
 8005278:	b127      	cbz	r7, 8005284 <setvbuf+0x1c>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	b913      	cbnz	r3, 8005284 <setvbuf+0x1c>
 800527e:	4638      	mov	r0, r7
 8005280:	f000 fb30 	bl	80058e4 <__sinit>
 8005284:	4b58      	ldr	r3, [pc, #352]	; (80053e8 <setvbuf+0x180>)
 8005286:	429c      	cmp	r4, r3
 8005288:	d167      	bne.n	800535a <setvbuf+0xf2>
 800528a:	687c      	ldr	r4, [r7, #4]
 800528c:	f1b8 0f02 	cmp.w	r8, #2
 8005290:	d006      	beq.n	80052a0 <setvbuf+0x38>
 8005292:	f1b8 0f01 	cmp.w	r8, #1
 8005296:	f200 809f 	bhi.w	80053d8 <setvbuf+0x170>
 800529a:	2d00      	cmp	r5, #0
 800529c:	f2c0 809c 	blt.w	80053d8 <setvbuf+0x170>
 80052a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052a2:	07db      	lsls	r3, r3, #31
 80052a4:	d405      	bmi.n	80052b2 <setvbuf+0x4a>
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	0598      	lsls	r0, r3, #22
 80052aa:	d402      	bmi.n	80052b2 <setvbuf+0x4a>
 80052ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ae:	f000 fc14 	bl	8005ada <__retarget_lock_acquire_recursive>
 80052b2:	4621      	mov	r1, r4
 80052b4:	4638      	mov	r0, r7
 80052b6:	f000 fa6f 	bl	8005798 <_fflush_r>
 80052ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052bc:	b141      	cbz	r1, 80052d0 <setvbuf+0x68>
 80052be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052c2:	4299      	cmp	r1, r3
 80052c4:	d002      	beq.n	80052cc <setvbuf+0x64>
 80052c6:	4638      	mov	r0, r7
 80052c8:	f000 fc76 	bl	8005bb8 <_free_r>
 80052cc:	2300      	movs	r3, #0
 80052ce:	6363      	str	r3, [r4, #52]	; 0x34
 80052d0:	2300      	movs	r3, #0
 80052d2:	61a3      	str	r3, [r4, #24]
 80052d4:	6063      	str	r3, [r4, #4]
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	0619      	lsls	r1, r3, #24
 80052da:	d503      	bpl.n	80052e4 <setvbuf+0x7c>
 80052dc:	6921      	ldr	r1, [r4, #16]
 80052de:	4638      	mov	r0, r7
 80052e0:	f000 fc6a 	bl	8005bb8 <_free_r>
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80052ea:	f023 0303 	bic.w	r3, r3, #3
 80052ee:	f1b8 0f02 	cmp.w	r8, #2
 80052f2:	81a3      	strh	r3, [r4, #12]
 80052f4:	d06c      	beq.n	80053d0 <setvbuf+0x168>
 80052f6:	ab01      	add	r3, sp, #4
 80052f8:	466a      	mov	r2, sp
 80052fa:	4621      	mov	r1, r4
 80052fc:	4638      	mov	r0, r7
 80052fe:	f000 fbee 	bl	8005ade <__swhatbuf_r>
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	4318      	orrs	r0, r3
 8005306:	81a0      	strh	r0, [r4, #12]
 8005308:	2d00      	cmp	r5, #0
 800530a:	d130      	bne.n	800536e <setvbuf+0x106>
 800530c:	9d00      	ldr	r5, [sp, #0]
 800530e:	4628      	mov	r0, r5
 8005310:	f000 fc4a 	bl	8005ba8 <malloc>
 8005314:	4606      	mov	r6, r0
 8005316:	2800      	cmp	r0, #0
 8005318:	d155      	bne.n	80053c6 <setvbuf+0x15e>
 800531a:	f8dd 9000 	ldr.w	r9, [sp]
 800531e:	45a9      	cmp	r9, r5
 8005320:	d14a      	bne.n	80053b8 <setvbuf+0x150>
 8005322:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005326:	2200      	movs	r2, #0
 8005328:	60a2      	str	r2, [r4, #8]
 800532a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800532e:	6022      	str	r2, [r4, #0]
 8005330:	6122      	str	r2, [r4, #16]
 8005332:	2201      	movs	r2, #1
 8005334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005338:	6162      	str	r2, [r4, #20]
 800533a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800533c:	f043 0302 	orr.w	r3, r3, #2
 8005340:	07d2      	lsls	r2, r2, #31
 8005342:	81a3      	strh	r3, [r4, #12]
 8005344:	d405      	bmi.n	8005352 <setvbuf+0xea>
 8005346:	f413 7f00 	tst.w	r3, #512	; 0x200
 800534a:	d102      	bne.n	8005352 <setvbuf+0xea>
 800534c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800534e:	f000 fbc5 	bl	8005adc <__retarget_lock_release_recursive>
 8005352:	4628      	mov	r0, r5
 8005354:	b003      	add	sp, #12
 8005356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800535a:	4b24      	ldr	r3, [pc, #144]	; (80053ec <setvbuf+0x184>)
 800535c:	429c      	cmp	r4, r3
 800535e:	d101      	bne.n	8005364 <setvbuf+0xfc>
 8005360:	68bc      	ldr	r4, [r7, #8]
 8005362:	e793      	b.n	800528c <setvbuf+0x24>
 8005364:	4b22      	ldr	r3, [pc, #136]	; (80053f0 <setvbuf+0x188>)
 8005366:	429c      	cmp	r4, r3
 8005368:	bf08      	it	eq
 800536a:	68fc      	ldreq	r4, [r7, #12]
 800536c:	e78e      	b.n	800528c <setvbuf+0x24>
 800536e:	2e00      	cmp	r6, #0
 8005370:	d0cd      	beq.n	800530e <setvbuf+0xa6>
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	b913      	cbnz	r3, 800537c <setvbuf+0x114>
 8005376:	4638      	mov	r0, r7
 8005378:	f000 fab4 	bl	80058e4 <__sinit>
 800537c:	f1b8 0f01 	cmp.w	r8, #1
 8005380:	bf08      	it	eq
 8005382:	89a3      	ldrheq	r3, [r4, #12]
 8005384:	6026      	str	r6, [r4, #0]
 8005386:	bf04      	itt	eq
 8005388:	f043 0301 	orreq.w	r3, r3, #1
 800538c:	81a3      	strheq	r3, [r4, #12]
 800538e:	89a2      	ldrh	r2, [r4, #12]
 8005390:	f012 0308 	ands.w	r3, r2, #8
 8005394:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005398:	d01c      	beq.n	80053d4 <setvbuf+0x16c>
 800539a:	07d3      	lsls	r3, r2, #31
 800539c:	bf41      	itttt	mi
 800539e:	2300      	movmi	r3, #0
 80053a0:	426d      	negmi	r5, r5
 80053a2:	60a3      	strmi	r3, [r4, #8]
 80053a4:	61a5      	strmi	r5, [r4, #24]
 80053a6:	bf58      	it	pl
 80053a8:	60a5      	strpl	r5, [r4, #8]
 80053aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80053ac:	f015 0501 	ands.w	r5, r5, #1
 80053b0:	d115      	bne.n	80053de <setvbuf+0x176>
 80053b2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80053b6:	e7c8      	b.n	800534a <setvbuf+0xe2>
 80053b8:	4648      	mov	r0, r9
 80053ba:	f000 fbf5 	bl	8005ba8 <malloc>
 80053be:	4606      	mov	r6, r0
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d0ae      	beq.n	8005322 <setvbuf+0xba>
 80053c4:	464d      	mov	r5, r9
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053cc:	81a3      	strh	r3, [r4, #12]
 80053ce:	e7d0      	b.n	8005372 <setvbuf+0x10a>
 80053d0:	2500      	movs	r5, #0
 80053d2:	e7a8      	b.n	8005326 <setvbuf+0xbe>
 80053d4:	60a3      	str	r3, [r4, #8]
 80053d6:	e7e8      	b.n	80053aa <setvbuf+0x142>
 80053d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80053dc:	e7b9      	b.n	8005352 <setvbuf+0xea>
 80053de:	2500      	movs	r5, #0
 80053e0:	e7b7      	b.n	8005352 <setvbuf+0xea>
 80053e2:	bf00      	nop
 80053e4:	2000000c 	.word	0x2000000c
 80053e8:	08006bb8 	.word	0x08006bb8
 80053ec:	08006bd8 	.word	0x08006bd8
 80053f0:	08006b98 	.word	0x08006b98

080053f4 <_strtol_l.constprop.0>:
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fa:	d001      	beq.n	8005400 <_strtol_l.constprop.0+0xc>
 80053fc:	2b24      	cmp	r3, #36	; 0x24
 80053fe:	d906      	bls.n	800540e <_strtol_l.constprop.0+0x1a>
 8005400:	f7ff fe4a 	bl	8005098 <__errno>
 8005404:	2316      	movs	r3, #22
 8005406:	6003      	str	r3, [r0, #0]
 8005408:	2000      	movs	r0, #0
 800540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80054f4 <_strtol_l.constprop.0+0x100>
 8005412:	460d      	mov	r5, r1
 8005414:	462e      	mov	r6, r5
 8005416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800541a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800541e:	f017 0708 	ands.w	r7, r7, #8
 8005422:	d1f7      	bne.n	8005414 <_strtol_l.constprop.0+0x20>
 8005424:	2c2d      	cmp	r4, #45	; 0x2d
 8005426:	d132      	bne.n	800548e <_strtol_l.constprop.0+0x9a>
 8005428:	782c      	ldrb	r4, [r5, #0]
 800542a:	2701      	movs	r7, #1
 800542c:	1cb5      	adds	r5, r6, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d05b      	beq.n	80054ea <_strtol_l.constprop.0+0xf6>
 8005432:	2b10      	cmp	r3, #16
 8005434:	d109      	bne.n	800544a <_strtol_l.constprop.0+0x56>
 8005436:	2c30      	cmp	r4, #48	; 0x30
 8005438:	d107      	bne.n	800544a <_strtol_l.constprop.0+0x56>
 800543a:	782c      	ldrb	r4, [r5, #0]
 800543c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005440:	2c58      	cmp	r4, #88	; 0x58
 8005442:	d14d      	bne.n	80054e0 <_strtol_l.constprop.0+0xec>
 8005444:	786c      	ldrb	r4, [r5, #1]
 8005446:	2310      	movs	r3, #16
 8005448:	3502      	adds	r5, #2
 800544a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800544e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005452:	f04f 0c00 	mov.w	ip, #0
 8005456:	fbb8 f9f3 	udiv	r9, r8, r3
 800545a:	4666      	mov	r6, ip
 800545c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005460:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005464:	f1be 0f09 	cmp.w	lr, #9
 8005468:	d816      	bhi.n	8005498 <_strtol_l.constprop.0+0xa4>
 800546a:	4674      	mov	r4, lr
 800546c:	42a3      	cmp	r3, r4
 800546e:	dd24      	ble.n	80054ba <_strtol_l.constprop.0+0xc6>
 8005470:	f1bc 0f00 	cmp.w	ip, #0
 8005474:	db1e      	blt.n	80054b4 <_strtol_l.constprop.0+0xc0>
 8005476:	45b1      	cmp	r9, r6
 8005478:	d31c      	bcc.n	80054b4 <_strtol_l.constprop.0+0xc0>
 800547a:	d101      	bne.n	8005480 <_strtol_l.constprop.0+0x8c>
 800547c:	45a2      	cmp	sl, r4
 800547e:	db19      	blt.n	80054b4 <_strtol_l.constprop.0+0xc0>
 8005480:	fb06 4603 	mla	r6, r6, r3, r4
 8005484:	f04f 0c01 	mov.w	ip, #1
 8005488:	f815 4b01 	ldrb.w	r4, [r5], #1
 800548c:	e7e8      	b.n	8005460 <_strtol_l.constprop.0+0x6c>
 800548e:	2c2b      	cmp	r4, #43	; 0x2b
 8005490:	bf04      	itt	eq
 8005492:	782c      	ldrbeq	r4, [r5, #0]
 8005494:	1cb5      	addeq	r5, r6, #2
 8005496:	e7ca      	b.n	800542e <_strtol_l.constprop.0+0x3a>
 8005498:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800549c:	f1be 0f19 	cmp.w	lr, #25
 80054a0:	d801      	bhi.n	80054a6 <_strtol_l.constprop.0+0xb2>
 80054a2:	3c37      	subs	r4, #55	; 0x37
 80054a4:	e7e2      	b.n	800546c <_strtol_l.constprop.0+0x78>
 80054a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80054aa:	f1be 0f19 	cmp.w	lr, #25
 80054ae:	d804      	bhi.n	80054ba <_strtol_l.constprop.0+0xc6>
 80054b0:	3c57      	subs	r4, #87	; 0x57
 80054b2:	e7db      	b.n	800546c <_strtol_l.constprop.0+0x78>
 80054b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80054b8:	e7e6      	b.n	8005488 <_strtol_l.constprop.0+0x94>
 80054ba:	f1bc 0f00 	cmp.w	ip, #0
 80054be:	da05      	bge.n	80054cc <_strtol_l.constprop.0+0xd8>
 80054c0:	2322      	movs	r3, #34	; 0x22
 80054c2:	6003      	str	r3, [r0, #0]
 80054c4:	4646      	mov	r6, r8
 80054c6:	b942      	cbnz	r2, 80054da <_strtol_l.constprop.0+0xe6>
 80054c8:	4630      	mov	r0, r6
 80054ca:	e79e      	b.n	800540a <_strtol_l.constprop.0+0x16>
 80054cc:	b107      	cbz	r7, 80054d0 <_strtol_l.constprop.0+0xdc>
 80054ce:	4276      	negs	r6, r6
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	d0f9      	beq.n	80054c8 <_strtol_l.constprop.0+0xd4>
 80054d4:	f1bc 0f00 	cmp.w	ip, #0
 80054d8:	d000      	beq.n	80054dc <_strtol_l.constprop.0+0xe8>
 80054da:	1e69      	subs	r1, r5, #1
 80054dc:	6011      	str	r1, [r2, #0]
 80054de:	e7f3      	b.n	80054c8 <_strtol_l.constprop.0+0xd4>
 80054e0:	2430      	movs	r4, #48	; 0x30
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1b1      	bne.n	800544a <_strtol_l.constprop.0+0x56>
 80054e6:	2308      	movs	r3, #8
 80054e8:	e7af      	b.n	800544a <_strtol_l.constprop.0+0x56>
 80054ea:	2c30      	cmp	r4, #48	; 0x30
 80054ec:	d0a5      	beq.n	800543a <_strtol_l.constprop.0+0x46>
 80054ee:	230a      	movs	r3, #10
 80054f0:	e7ab      	b.n	800544a <_strtol_l.constprop.0+0x56>
 80054f2:	bf00      	nop
 80054f4:	08006a95 	.word	0x08006a95

080054f8 <strtol>:
 80054f8:	4613      	mov	r3, r2
 80054fa:	460a      	mov	r2, r1
 80054fc:	4601      	mov	r1, r0
 80054fe:	4802      	ldr	r0, [pc, #8]	; (8005508 <strtol+0x10>)
 8005500:	6800      	ldr	r0, [r0, #0]
 8005502:	f7ff bf77 	b.w	80053f4 <_strtol_l.constprop.0>
 8005506:	bf00      	nop
 8005508:	2000000c 	.word	0x2000000c

0800550c <__swbuf_r>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	460e      	mov	r6, r1
 8005510:	4614      	mov	r4, r2
 8005512:	4605      	mov	r5, r0
 8005514:	b118      	cbz	r0, 800551e <__swbuf_r+0x12>
 8005516:	6983      	ldr	r3, [r0, #24]
 8005518:	b90b      	cbnz	r3, 800551e <__swbuf_r+0x12>
 800551a:	f000 f9e3 	bl	80058e4 <__sinit>
 800551e:	4b21      	ldr	r3, [pc, #132]	; (80055a4 <__swbuf_r+0x98>)
 8005520:	429c      	cmp	r4, r3
 8005522:	d12b      	bne.n	800557c <__swbuf_r+0x70>
 8005524:	686c      	ldr	r4, [r5, #4]
 8005526:	69a3      	ldr	r3, [r4, #24]
 8005528:	60a3      	str	r3, [r4, #8]
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	071a      	lsls	r2, r3, #28
 800552e:	d52f      	bpl.n	8005590 <__swbuf_r+0x84>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	b36b      	cbz	r3, 8005590 <__swbuf_r+0x84>
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	1ac0      	subs	r0, r0, r3
 800553a:	6963      	ldr	r3, [r4, #20]
 800553c:	b2f6      	uxtb	r6, r6
 800553e:	4283      	cmp	r3, r0
 8005540:	4637      	mov	r7, r6
 8005542:	dc04      	bgt.n	800554e <__swbuf_r+0x42>
 8005544:	4621      	mov	r1, r4
 8005546:	4628      	mov	r0, r5
 8005548:	f000 f926 	bl	8005798 <_fflush_r>
 800554c:	bb30      	cbnz	r0, 800559c <__swbuf_r+0x90>
 800554e:	68a3      	ldr	r3, [r4, #8]
 8005550:	3b01      	subs	r3, #1
 8005552:	60a3      	str	r3, [r4, #8]
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	6022      	str	r2, [r4, #0]
 800555a:	701e      	strb	r6, [r3, #0]
 800555c:	6963      	ldr	r3, [r4, #20]
 800555e:	3001      	adds	r0, #1
 8005560:	4283      	cmp	r3, r0
 8005562:	d004      	beq.n	800556e <__swbuf_r+0x62>
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	07db      	lsls	r3, r3, #31
 8005568:	d506      	bpl.n	8005578 <__swbuf_r+0x6c>
 800556a:	2e0a      	cmp	r6, #10
 800556c:	d104      	bne.n	8005578 <__swbuf_r+0x6c>
 800556e:	4621      	mov	r1, r4
 8005570:	4628      	mov	r0, r5
 8005572:	f000 f911 	bl	8005798 <_fflush_r>
 8005576:	b988      	cbnz	r0, 800559c <__swbuf_r+0x90>
 8005578:	4638      	mov	r0, r7
 800557a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <__swbuf_r+0x9c>)
 800557e:	429c      	cmp	r4, r3
 8005580:	d101      	bne.n	8005586 <__swbuf_r+0x7a>
 8005582:	68ac      	ldr	r4, [r5, #8]
 8005584:	e7cf      	b.n	8005526 <__swbuf_r+0x1a>
 8005586:	4b09      	ldr	r3, [pc, #36]	; (80055ac <__swbuf_r+0xa0>)
 8005588:	429c      	cmp	r4, r3
 800558a:	bf08      	it	eq
 800558c:	68ec      	ldreq	r4, [r5, #12]
 800558e:	e7ca      	b.n	8005526 <__swbuf_r+0x1a>
 8005590:	4621      	mov	r1, r4
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f80c 	bl	80055b0 <__swsetup_r>
 8005598:	2800      	cmp	r0, #0
 800559a:	d0cb      	beq.n	8005534 <__swbuf_r+0x28>
 800559c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80055a0:	e7ea      	b.n	8005578 <__swbuf_r+0x6c>
 80055a2:	bf00      	nop
 80055a4:	08006bb8 	.word	0x08006bb8
 80055a8:	08006bd8 	.word	0x08006bd8
 80055ac:	08006b98 	.word	0x08006b98

080055b0 <__swsetup_r>:
 80055b0:	4b32      	ldr	r3, [pc, #200]	; (800567c <__swsetup_r+0xcc>)
 80055b2:	b570      	push	{r4, r5, r6, lr}
 80055b4:	681d      	ldr	r5, [r3, #0]
 80055b6:	4606      	mov	r6, r0
 80055b8:	460c      	mov	r4, r1
 80055ba:	b125      	cbz	r5, 80055c6 <__swsetup_r+0x16>
 80055bc:	69ab      	ldr	r3, [r5, #24]
 80055be:	b913      	cbnz	r3, 80055c6 <__swsetup_r+0x16>
 80055c0:	4628      	mov	r0, r5
 80055c2:	f000 f98f 	bl	80058e4 <__sinit>
 80055c6:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <__swsetup_r+0xd0>)
 80055c8:	429c      	cmp	r4, r3
 80055ca:	d10f      	bne.n	80055ec <__swsetup_r+0x3c>
 80055cc:	686c      	ldr	r4, [r5, #4]
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055d4:	0719      	lsls	r1, r3, #28
 80055d6:	d42c      	bmi.n	8005632 <__swsetup_r+0x82>
 80055d8:	06dd      	lsls	r5, r3, #27
 80055da:	d411      	bmi.n	8005600 <__swsetup_r+0x50>
 80055dc:	2309      	movs	r3, #9
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055e4:	81a3      	strh	r3, [r4, #12]
 80055e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ea:	e03e      	b.n	800566a <__swsetup_r+0xba>
 80055ec:	4b25      	ldr	r3, [pc, #148]	; (8005684 <__swsetup_r+0xd4>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d101      	bne.n	80055f6 <__swsetup_r+0x46>
 80055f2:	68ac      	ldr	r4, [r5, #8]
 80055f4:	e7eb      	b.n	80055ce <__swsetup_r+0x1e>
 80055f6:	4b24      	ldr	r3, [pc, #144]	; (8005688 <__swsetup_r+0xd8>)
 80055f8:	429c      	cmp	r4, r3
 80055fa:	bf08      	it	eq
 80055fc:	68ec      	ldreq	r4, [r5, #12]
 80055fe:	e7e6      	b.n	80055ce <__swsetup_r+0x1e>
 8005600:	0758      	lsls	r0, r3, #29
 8005602:	d512      	bpl.n	800562a <__swsetup_r+0x7a>
 8005604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005606:	b141      	cbz	r1, 800561a <__swsetup_r+0x6a>
 8005608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800560c:	4299      	cmp	r1, r3
 800560e:	d002      	beq.n	8005616 <__swsetup_r+0x66>
 8005610:	4630      	mov	r0, r6
 8005612:	f000 fad1 	bl	8005bb8 <_free_r>
 8005616:	2300      	movs	r3, #0
 8005618:	6363      	str	r3, [r4, #52]	; 0x34
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005620:	81a3      	strh	r3, [r4, #12]
 8005622:	2300      	movs	r3, #0
 8005624:	6063      	str	r3, [r4, #4]
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	f043 0308 	orr.w	r3, r3, #8
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	b94b      	cbnz	r3, 800564a <__swsetup_r+0x9a>
 8005636:	89a3      	ldrh	r3, [r4, #12]
 8005638:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800563c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005640:	d003      	beq.n	800564a <__swsetup_r+0x9a>
 8005642:	4621      	mov	r1, r4
 8005644:	4630      	mov	r0, r6
 8005646:	f000 fa6f 	bl	8005b28 <__smakebuf_r>
 800564a:	89a0      	ldrh	r0, [r4, #12]
 800564c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005650:	f010 0301 	ands.w	r3, r0, #1
 8005654:	d00a      	beq.n	800566c <__swsetup_r+0xbc>
 8005656:	2300      	movs	r3, #0
 8005658:	60a3      	str	r3, [r4, #8]
 800565a:	6963      	ldr	r3, [r4, #20]
 800565c:	425b      	negs	r3, r3
 800565e:	61a3      	str	r3, [r4, #24]
 8005660:	6923      	ldr	r3, [r4, #16]
 8005662:	b943      	cbnz	r3, 8005676 <__swsetup_r+0xc6>
 8005664:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005668:	d1ba      	bne.n	80055e0 <__swsetup_r+0x30>
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	0781      	lsls	r1, r0, #30
 800566e:	bf58      	it	pl
 8005670:	6963      	ldrpl	r3, [r4, #20]
 8005672:	60a3      	str	r3, [r4, #8]
 8005674:	e7f4      	b.n	8005660 <__swsetup_r+0xb0>
 8005676:	2000      	movs	r0, #0
 8005678:	e7f7      	b.n	800566a <__swsetup_r+0xba>
 800567a:	bf00      	nop
 800567c:	2000000c 	.word	0x2000000c
 8005680:	08006bb8 	.word	0x08006bb8
 8005684:	08006bd8 	.word	0x08006bd8
 8005688:	08006b98 	.word	0x08006b98

0800568c <__sflush_r>:
 800568c:	898a      	ldrh	r2, [r1, #12]
 800568e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005692:	4605      	mov	r5, r0
 8005694:	0710      	lsls	r0, r2, #28
 8005696:	460c      	mov	r4, r1
 8005698:	d458      	bmi.n	800574c <__sflush_r+0xc0>
 800569a:	684b      	ldr	r3, [r1, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	dc05      	bgt.n	80056ac <__sflush_r+0x20>
 80056a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	dc02      	bgt.n	80056ac <__sflush_r+0x20>
 80056a6:	2000      	movs	r0, #0
 80056a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056ae:	2e00      	cmp	r6, #0
 80056b0:	d0f9      	beq.n	80056a6 <__sflush_r+0x1a>
 80056b2:	2300      	movs	r3, #0
 80056b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056b8:	682f      	ldr	r7, [r5, #0]
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	d032      	beq.n	8005724 <__sflush_r+0x98>
 80056be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	075a      	lsls	r2, r3, #29
 80056c4:	d505      	bpl.n	80056d2 <__sflush_r+0x46>
 80056c6:	6863      	ldr	r3, [r4, #4]
 80056c8:	1ac0      	subs	r0, r0, r3
 80056ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056cc:	b10b      	cbz	r3, 80056d2 <__sflush_r+0x46>
 80056ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056d0:	1ac0      	subs	r0, r0, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	4602      	mov	r2, r0
 80056d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056d8:	6a21      	ldr	r1, [r4, #32]
 80056da:	4628      	mov	r0, r5
 80056dc:	47b0      	blx	r6
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	d106      	bne.n	80056f2 <__sflush_r+0x66>
 80056e4:	6829      	ldr	r1, [r5, #0]
 80056e6:	291d      	cmp	r1, #29
 80056e8:	d82c      	bhi.n	8005744 <__sflush_r+0xb8>
 80056ea:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <__sflush_r+0x108>)
 80056ec:	40ca      	lsrs	r2, r1
 80056ee:	07d6      	lsls	r6, r2, #31
 80056f0:	d528      	bpl.n	8005744 <__sflush_r+0xb8>
 80056f2:	2200      	movs	r2, #0
 80056f4:	6062      	str	r2, [r4, #4]
 80056f6:	04d9      	lsls	r1, r3, #19
 80056f8:	6922      	ldr	r2, [r4, #16]
 80056fa:	6022      	str	r2, [r4, #0]
 80056fc:	d504      	bpl.n	8005708 <__sflush_r+0x7c>
 80056fe:	1c42      	adds	r2, r0, #1
 8005700:	d101      	bne.n	8005706 <__sflush_r+0x7a>
 8005702:	682b      	ldr	r3, [r5, #0]
 8005704:	b903      	cbnz	r3, 8005708 <__sflush_r+0x7c>
 8005706:	6560      	str	r0, [r4, #84]	; 0x54
 8005708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800570a:	602f      	str	r7, [r5, #0]
 800570c:	2900      	cmp	r1, #0
 800570e:	d0ca      	beq.n	80056a6 <__sflush_r+0x1a>
 8005710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005714:	4299      	cmp	r1, r3
 8005716:	d002      	beq.n	800571e <__sflush_r+0x92>
 8005718:	4628      	mov	r0, r5
 800571a:	f000 fa4d 	bl	8005bb8 <_free_r>
 800571e:	2000      	movs	r0, #0
 8005720:	6360      	str	r0, [r4, #52]	; 0x34
 8005722:	e7c1      	b.n	80056a8 <__sflush_r+0x1c>
 8005724:	6a21      	ldr	r1, [r4, #32]
 8005726:	2301      	movs	r3, #1
 8005728:	4628      	mov	r0, r5
 800572a:	47b0      	blx	r6
 800572c:	1c41      	adds	r1, r0, #1
 800572e:	d1c7      	bne.n	80056c0 <__sflush_r+0x34>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0c4      	beq.n	80056c0 <__sflush_r+0x34>
 8005736:	2b1d      	cmp	r3, #29
 8005738:	d001      	beq.n	800573e <__sflush_r+0xb2>
 800573a:	2b16      	cmp	r3, #22
 800573c:	d101      	bne.n	8005742 <__sflush_r+0xb6>
 800573e:	602f      	str	r7, [r5, #0]
 8005740:	e7b1      	b.n	80056a6 <__sflush_r+0x1a>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	e7ad      	b.n	80056a8 <__sflush_r+0x1c>
 800574c:	690f      	ldr	r7, [r1, #16]
 800574e:	2f00      	cmp	r7, #0
 8005750:	d0a9      	beq.n	80056a6 <__sflush_r+0x1a>
 8005752:	0793      	lsls	r3, r2, #30
 8005754:	680e      	ldr	r6, [r1, #0]
 8005756:	bf08      	it	eq
 8005758:	694b      	ldreq	r3, [r1, #20]
 800575a:	600f      	str	r7, [r1, #0]
 800575c:	bf18      	it	ne
 800575e:	2300      	movne	r3, #0
 8005760:	eba6 0807 	sub.w	r8, r6, r7
 8005764:	608b      	str	r3, [r1, #8]
 8005766:	f1b8 0f00 	cmp.w	r8, #0
 800576a:	dd9c      	ble.n	80056a6 <__sflush_r+0x1a>
 800576c:	6a21      	ldr	r1, [r4, #32]
 800576e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005770:	4643      	mov	r3, r8
 8005772:	463a      	mov	r2, r7
 8005774:	4628      	mov	r0, r5
 8005776:	47b0      	blx	r6
 8005778:	2800      	cmp	r0, #0
 800577a:	dc06      	bgt.n	800578a <__sflush_r+0xfe>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005782:	81a3      	strh	r3, [r4, #12]
 8005784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005788:	e78e      	b.n	80056a8 <__sflush_r+0x1c>
 800578a:	4407      	add	r7, r0
 800578c:	eba8 0800 	sub.w	r8, r8, r0
 8005790:	e7e9      	b.n	8005766 <__sflush_r+0xda>
 8005792:	bf00      	nop
 8005794:	20400001 	.word	0x20400001

08005798 <_fflush_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	690b      	ldr	r3, [r1, #16]
 800579c:	4605      	mov	r5, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	b913      	cbnz	r3, 80057a8 <_fflush_r+0x10>
 80057a2:	2500      	movs	r5, #0
 80057a4:	4628      	mov	r0, r5
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	b118      	cbz	r0, 80057b2 <_fflush_r+0x1a>
 80057aa:	6983      	ldr	r3, [r0, #24]
 80057ac:	b90b      	cbnz	r3, 80057b2 <_fflush_r+0x1a>
 80057ae:	f000 f899 	bl	80058e4 <__sinit>
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <_fflush_r+0x6c>)
 80057b4:	429c      	cmp	r4, r3
 80057b6:	d11b      	bne.n	80057f0 <_fflush_r+0x58>
 80057b8:	686c      	ldr	r4, [r5, #4]
 80057ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0ef      	beq.n	80057a2 <_fflush_r+0xa>
 80057c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057c4:	07d0      	lsls	r0, r2, #31
 80057c6:	d404      	bmi.n	80057d2 <_fflush_r+0x3a>
 80057c8:	0599      	lsls	r1, r3, #22
 80057ca:	d402      	bmi.n	80057d2 <_fflush_r+0x3a>
 80057cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ce:	f000 f984 	bl	8005ada <__retarget_lock_acquire_recursive>
 80057d2:	4628      	mov	r0, r5
 80057d4:	4621      	mov	r1, r4
 80057d6:	f7ff ff59 	bl	800568c <__sflush_r>
 80057da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057dc:	07da      	lsls	r2, r3, #31
 80057de:	4605      	mov	r5, r0
 80057e0:	d4e0      	bmi.n	80057a4 <_fflush_r+0xc>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	059b      	lsls	r3, r3, #22
 80057e6:	d4dd      	bmi.n	80057a4 <_fflush_r+0xc>
 80057e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ea:	f000 f977 	bl	8005adc <__retarget_lock_release_recursive>
 80057ee:	e7d9      	b.n	80057a4 <_fflush_r+0xc>
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <_fflush_r+0x70>)
 80057f2:	429c      	cmp	r4, r3
 80057f4:	d101      	bne.n	80057fa <_fflush_r+0x62>
 80057f6:	68ac      	ldr	r4, [r5, #8]
 80057f8:	e7df      	b.n	80057ba <_fflush_r+0x22>
 80057fa:	4b04      	ldr	r3, [pc, #16]	; (800580c <_fflush_r+0x74>)
 80057fc:	429c      	cmp	r4, r3
 80057fe:	bf08      	it	eq
 8005800:	68ec      	ldreq	r4, [r5, #12]
 8005802:	e7da      	b.n	80057ba <_fflush_r+0x22>
 8005804:	08006bb8 	.word	0x08006bb8
 8005808:	08006bd8 	.word	0x08006bd8
 800580c:	08006b98 	.word	0x08006b98

08005810 <fflush>:
 8005810:	4601      	mov	r1, r0
 8005812:	b920      	cbnz	r0, 800581e <fflush+0xe>
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <fflush+0x18>)
 8005816:	4905      	ldr	r1, [pc, #20]	; (800582c <fflush+0x1c>)
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	f000 b8fe 	b.w	8005a1a <_fwalk_reent>
 800581e:	4b04      	ldr	r3, [pc, #16]	; (8005830 <fflush+0x20>)
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	f7ff bfb9 	b.w	8005798 <_fflush_r>
 8005826:	bf00      	nop
 8005828:	08006a90 	.word	0x08006a90
 800582c:	08005799 	.word	0x08005799
 8005830:	2000000c 	.word	0x2000000c

08005834 <std>:
 8005834:	2300      	movs	r3, #0
 8005836:	b510      	push	{r4, lr}
 8005838:	4604      	mov	r4, r0
 800583a:	e9c0 3300 	strd	r3, r3, [r0]
 800583e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005842:	6083      	str	r3, [r0, #8]
 8005844:	8181      	strh	r1, [r0, #12]
 8005846:	6643      	str	r3, [r0, #100]	; 0x64
 8005848:	81c2      	strh	r2, [r0, #14]
 800584a:	6183      	str	r3, [r0, #24]
 800584c:	4619      	mov	r1, r3
 800584e:	2208      	movs	r2, #8
 8005850:	305c      	adds	r0, #92	; 0x5c
 8005852:	f7ff fc5d 	bl	8005110 <memset>
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <std+0x38>)
 8005858:	6263      	str	r3, [r4, #36]	; 0x24
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <std+0x3c>)
 800585c:	62a3      	str	r3, [r4, #40]	; 0x28
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <std+0x40>)
 8005860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <std+0x44>)
 8005864:	6224      	str	r4, [r4, #32]
 8005866:	6323      	str	r3, [r4, #48]	; 0x30
 8005868:	bd10      	pop	{r4, pc}
 800586a:	bf00      	nop
 800586c:	0800645d 	.word	0x0800645d
 8005870:	0800647f 	.word	0x0800647f
 8005874:	080064b7 	.word	0x080064b7
 8005878:	080064db 	.word	0x080064db

0800587c <_cleanup_r>:
 800587c:	4901      	ldr	r1, [pc, #4]	; (8005884 <_cleanup_r+0x8>)
 800587e:	f000 b8cc 	b.w	8005a1a <_fwalk_reent>
 8005882:	bf00      	nop
 8005884:	08005799 	.word	0x08005799

08005888 <__sfmoreglue>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	2268      	movs	r2, #104	; 0x68
 800588c:	1e4d      	subs	r5, r1, #1
 800588e:	4355      	muls	r5, r2
 8005890:	460e      	mov	r6, r1
 8005892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005896:	f000 f9fb 	bl	8005c90 <_malloc_r>
 800589a:	4604      	mov	r4, r0
 800589c:	b140      	cbz	r0, 80058b0 <__sfmoreglue+0x28>
 800589e:	2100      	movs	r1, #0
 80058a0:	e9c0 1600 	strd	r1, r6, [r0]
 80058a4:	300c      	adds	r0, #12
 80058a6:	60a0      	str	r0, [r4, #8]
 80058a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058ac:	f7ff fc30 	bl	8005110 <memset>
 80058b0:	4620      	mov	r0, r4
 80058b2:	bd70      	pop	{r4, r5, r6, pc}

080058b4 <__sfp_lock_acquire>:
 80058b4:	4801      	ldr	r0, [pc, #4]	; (80058bc <__sfp_lock_acquire+0x8>)
 80058b6:	f000 b910 	b.w	8005ada <__retarget_lock_acquire_recursive>
 80058ba:	bf00      	nop
 80058bc:	20000af1 	.word	0x20000af1

080058c0 <__sfp_lock_release>:
 80058c0:	4801      	ldr	r0, [pc, #4]	; (80058c8 <__sfp_lock_release+0x8>)
 80058c2:	f000 b90b 	b.w	8005adc <__retarget_lock_release_recursive>
 80058c6:	bf00      	nop
 80058c8:	20000af1 	.word	0x20000af1

080058cc <__sinit_lock_acquire>:
 80058cc:	4801      	ldr	r0, [pc, #4]	; (80058d4 <__sinit_lock_acquire+0x8>)
 80058ce:	f000 b904 	b.w	8005ada <__retarget_lock_acquire_recursive>
 80058d2:	bf00      	nop
 80058d4:	20000af2 	.word	0x20000af2

080058d8 <__sinit_lock_release>:
 80058d8:	4801      	ldr	r0, [pc, #4]	; (80058e0 <__sinit_lock_release+0x8>)
 80058da:	f000 b8ff 	b.w	8005adc <__retarget_lock_release_recursive>
 80058de:	bf00      	nop
 80058e0:	20000af2 	.word	0x20000af2

080058e4 <__sinit>:
 80058e4:	b510      	push	{r4, lr}
 80058e6:	4604      	mov	r4, r0
 80058e8:	f7ff fff0 	bl	80058cc <__sinit_lock_acquire>
 80058ec:	69a3      	ldr	r3, [r4, #24]
 80058ee:	b11b      	cbz	r3, 80058f8 <__sinit+0x14>
 80058f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f4:	f7ff bff0 	b.w	80058d8 <__sinit_lock_release>
 80058f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058fc:	6523      	str	r3, [r4, #80]	; 0x50
 80058fe:	4b13      	ldr	r3, [pc, #76]	; (800594c <__sinit+0x68>)
 8005900:	4a13      	ldr	r2, [pc, #76]	; (8005950 <__sinit+0x6c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	62a2      	str	r2, [r4, #40]	; 0x28
 8005906:	42a3      	cmp	r3, r4
 8005908:	bf04      	itt	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	61a3      	streq	r3, [r4, #24]
 800590e:	4620      	mov	r0, r4
 8005910:	f000 f820 	bl	8005954 <__sfp>
 8005914:	6060      	str	r0, [r4, #4]
 8005916:	4620      	mov	r0, r4
 8005918:	f000 f81c 	bl	8005954 <__sfp>
 800591c:	60a0      	str	r0, [r4, #8]
 800591e:	4620      	mov	r0, r4
 8005920:	f000 f818 	bl	8005954 <__sfp>
 8005924:	2200      	movs	r2, #0
 8005926:	60e0      	str	r0, [r4, #12]
 8005928:	2104      	movs	r1, #4
 800592a:	6860      	ldr	r0, [r4, #4]
 800592c:	f7ff ff82 	bl	8005834 <std>
 8005930:	68a0      	ldr	r0, [r4, #8]
 8005932:	2201      	movs	r2, #1
 8005934:	2109      	movs	r1, #9
 8005936:	f7ff ff7d 	bl	8005834 <std>
 800593a:	68e0      	ldr	r0, [r4, #12]
 800593c:	2202      	movs	r2, #2
 800593e:	2112      	movs	r1, #18
 8005940:	f7ff ff78 	bl	8005834 <std>
 8005944:	2301      	movs	r3, #1
 8005946:	61a3      	str	r3, [r4, #24]
 8005948:	e7d2      	b.n	80058f0 <__sinit+0xc>
 800594a:	bf00      	nop
 800594c:	08006a90 	.word	0x08006a90
 8005950:	0800587d 	.word	0x0800587d

08005954 <__sfp>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	4607      	mov	r7, r0
 8005958:	f7ff ffac 	bl	80058b4 <__sfp_lock_acquire>
 800595c:	4b1e      	ldr	r3, [pc, #120]	; (80059d8 <__sfp+0x84>)
 800595e:	681e      	ldr	r6, [r3, #0]
 8005960:	69b3      	ldr	r3, [r6, #24]
 8005962:	b913      	cbnz	r3, 800596a <__sfp+0x16>
 8005964:	4630      	mov	r0, r6
 8005966:	f7ff ffbd 	bl	80058e4 <__sinit>
 800596a:	3648      	adds	r6, #72	; 0x48
 800596c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005970:	3b01      	subs	r3, #1
 8005972:	d503      	bpl.n	800597c <__sfp+0x28>
 8005974:	6833      	ldr	r3, [r6, #0]
 8005976:	b30b      	cbz	r3, 80059bc <__sfp+0x68>
 8005978:	6836      	ldr	r6, [r6, #0]
 800597a:	e7f7      	b.n	800596c <__sfp+0x18>
 800597c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005980:	b9d5      	cbnz	r5, 80059b8 <__sfp+0x64>
 8005982:	4b16      	ldr	r3, [pc, #88]	; (80059dc <__sfp+0x88>)
 8005984:	60e3      	str	r3, [r4, #12]
 8005986:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800598a:	6665      	str	r5, [r4, #100]	; 0x64
 800598c:	f000 f8a4 	bl	8005ad8 <__retarget_lock_init_recursive>
 8005990:	f7ff ff96 	bl	80058c0 <__sfp_lock_release>
 8005994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800599c:	6025      	str	r5, [r4, #0]
 800599e:	61a5      	str	r5, [r4, #24]
 80059a0:	2208      	movs	r2, #8
 80059a2:	4629      	mov	r1, r5
 80059a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059a8:	f7ff fbb2 	bl	8005110 <memset>
 80059ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059b4:	4620      	mov	r0, r4
 80059b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b8:	3468      	adds	r4, #104	; 0x68
 80059ba:	e7d9      	b.n	8005970 <__sfp+0x1c>
 80059bc:	2104      	movs	r1, #4
 80059be:	4638      	mov	r0, r7
 80059c0:	f7ff ff62 	bl	8005888 <__sfmoreglue>
 80059c4:	4604      	mov	r4, r0
 80059c6:	6030      	str	r0, [r6, #0]
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d1d5      	bne.n	8005978 <__sfp+0x24>
 80059cc:	f7ff ff78 	bl	80058c0 <__sfp_lock_release>
 80059d0:	230c      	movs	r3, #12
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	e7ee      	b.n	80059b4 <__sfp+0x60>
 80059d6:	bf00      	nop
 80059d8:	08006a90 	.word	0x08006a90
 80059dc:	ffff0001 	.word	0xffff0001

080059e0 <_fwalk>:
 80059e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e4:	460f      	mov	r7, r1
 80059e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059ea:	2600      	movs	r6, #0
 80059ec:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80059f0:	f1b8 0801 	subs.w	r8, r8, #1
 80059f4:	d505      	bpl.n	8005a02 <_fwalk+0x22>
 80059f6:	6824      	ldr	r4, [r4, #0]
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d1f7      	bne.n	80059ec <_fwalk+0xc>
 80059fc:	4630      	mov	r0, r6
 80059fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d906      	bls.n	8005a16 <_fwalk+0x36>
 8005a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	d002      	beq.n	8005a16 <_fwalk+0x36>
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b8      	blx	r7
 8005a14:	4306      	orrs	r6, r0
 8005a16:	3568      	adds	r5, #104	; 0x68
 8005a18:	e7ea      	b.n	80059f0 <_fwalk+0x10>

08005a1a <_fwalk_reent>:
 8005a1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a1e:	4606      	mov	r6, r0
 8005a20:	4688      	mov	r8, r1
 8005a22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a26:	2700      	movs	r7, #0
 8005a28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a2c:	f1b9 0901 	subs.w	r9, r9, #1
 8005a30:	d505      	bpl.n	8005a3e <_fwalk_reent+0x24>
 8005a32:	6824      	ldr	r4, [r4, #0]
 8005a34:	2c00      	cmp	r4, #0
 8005a36:	d1f7      	bne.n	8005a28 <_fwalk_reent+0xe>
 8005a38:	4638      	mov	r0, r7
 8005a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a3e:	89ab      	ldrh	r3, [r5, #12]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d907      	bls.n	8005a54 <_fwalk_reent+0x3a>
 8005a44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	d003      	beq.n	8005a54 <_fwalk_reent+0x3a>
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	4630      	mov	r0, r6
 8005a50:	47c0      	blx	r8
 8005a52:	4307      	orrs	r7, r0
 8005a54:	3568      	adds	r5, #104	; 0x68
 8005a56:	e7e9      	b.n	8005a2c <_fwalk_reent+0x12>

08005a58 <_getc_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	b118      	cbz	r0, 8005a68 <_getc_r+0x10>
 8005a60:	6983      	ldr	r3, [r0, #24]
 8005a62:	b90b      	cbnz	r3, 8005a68 <_getc_r+0x10>
 8005a64:	f7ff ff3e 	bl	80058e4 <__sinit>
 8005a68:	4b18      	ldr	r3, [pc, #96]	; (8005acc <_getc_r+0x74>)
 8005a6a:	429c      	cmp	r4, r3
 8005a6c:	d11e      	bne.n	8005aac <_getc_r+0x54>
 8005a6e:	686c      	ldr	r4, [r5, #4]
 8005a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a72:	07d8      	lsls	r0, r3, #31
 8005a74:	d405      	bmi.n	8005a82 <_getc_r+0x2a>
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	0599      	lsls	r1, r3, #22
 8005a7a:	d402      	bmi.n	8005a82 <_getc_r+0x2a>
 8005a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a7e:	f000 f82c 	bl	8005ada <__retarget_lock_acquire_recursive>
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	6063      	str	r3, [r4, #4]
 8005a8a:	da19      	bge.n	8005ac0 <_getc_r+0x68>
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	4621      	mov	r1, r4
 8005a90:	f000 fca8 	bl	80063e4 <__srget_r>
 8005a94:	4605      	mov	r5, r0
 8005a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a98:	07da      	lsls	r2, r3, #31
 8005a9a:	d405      	bmi.n	8005aa8 <_getc_r+0x50>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	059b      	lsls	r3, r3, #22
 8005aa0:	d402      	bmi.n	8005aa8 <_getc_r+0x50>
 8005aa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aa4:	f000 f81a 	bl	8005adc <__retarget_lock_release_recursive>
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <_getc_r+0x78>)
 8005aae:	429c      	cmp	r4, r3
 8005ab0:	d101      	bne.n	8005ab6 <_getc_r+0x5e>
 8005ab2:	68ac      	ldr	r4, [r5, #8]
 8005ab4:	e7dc      	b.n	8005a70 <_getc_r+0x18>
 8005ab6:	4b07      	ldr	r3, [pc, #28]	; (8005ad4 <_getc_r+0x7c>)
 8005ab8:	429c      	cmp	r4, r3
 8005aba:	bf08      	it	eq
 8005abc:	68ec      	ldreq	r4, [r5, #12]
 8005abe:	e7d7      	b.n	8005a70 <_getc_r+0x18>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	6022      	str	r2, [r4, #0]
 8005ac6:	781d      	ldrb	r5, [r3, #0]
 8005ac8:	e7e5      	b.n	8005a96 <_getc_r+0x3e>
 8005aca:	bf00      	nop
 8005acc:	08006bb8 	.word	0x08006bb8
 8005ad0:	08006bd8 	.word	0x08006bd8
 8005ad4:	08006b98 	.word	0x08006b98

08005ad8 <__retarget_lock_init_recursive>:
 8005ad8:	4770      	bx	lr

08005ada <__retarget_lock_acquire_recursive>:
 8005ada:	4770      	bx	lr

08005adc <__retarget_lock_release_recursive>:
 8005adc:	4770      	bx	lr

08005ade <__swhatbuf_r>:
 8005ade:	b570      	push	{r4, r5, r6, lr}
 8005ae0:	460e      	mov	r6, r1
 8005ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae6:	2900      	cmp	r1, #0
 8005ae8:	b096      	sub	sp, #88	; 0x58
 8005aea:	4614      	mov	r4, r2
 8005aec:	461d      	mov	r5, r3
 8005aee:	da08      	bge.n	8005b02 <__swhatbuf_r+0x24>
 8005af0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	602a      	str	r2, [r5, #0]
 8005af8:	061a      	lsls	r2, r3, #24
 8005afa:	d410      	bmi.n	8005b1e <__swhatbuf_r+0x40>
 8005afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b00:	e00e      	b.n	8005b20 <__swhatbuf_r+0x42>
 8005b02:	466a      	mov	r2, sp
 8005b04:	f000 fd10 	bl	8006528 <_fstat_r>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	dbf1      	blt.n	8005af0 <__swhatbuf_r+0x12>
 8005b0c:	9a01      	ldr	r2, [sp, #4]
 8005b0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b16:	425a      	negs	r2, r3
 8005b18:	415a      	adcs	r2, r3
 8005b1a:	602a      	str	r2, [r5, #0]
 8005b1c:	e7ee      	b.n	8005afc <__swhatbuf_r+0x1e>
 8005b1e:	2340      	movs	r3, #64	; 0x40
 8005b20:	2000      	movs	r0, #0
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	b016      	add	sp, #88	; 0x58
 8005b26:	bd70      	pop	{r4, r5, r6, pc}

08005b28 <__smakebuf_r>:
 8005b28:	898b      	ldrh	r3, [r1, #12]
 8005b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b2c:	079d      	lsls	r5, r3, #30
 8005b2e:	4606      	mov	r6, r0
 8005b30:	460c      	mov	r4, r1
 8005b32:	d507      	bpl.n	8005b44 <__smakebuf_r+0x1c>
 8005b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	6123      	str	r3, [r4, #16]
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	6163      	str	r3, [r4, #20]
 8005b40:	b002      	add	sp, #8
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	ab01      	add	r3, sp, #4
 8005b46:	466a      	mov	r2, sp
 8005b48:	f7ff ffc9 	bl	8005ade <__swhatbuf_r>
 8005b4c:	9900      	ldr	r1, [sp, #0]
 8005b4e:	4605      	mov	r5, r0
 8005b50:	4630      	mov	r0, r6
 8005b52:	f000 f89d 	bl	8005c90 <_malloc_r>
 8005b56:	b948      	cbnz	r0, 8005b6c <__smakebuf_r+0x44>
 8005b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b5c:	059a      	lsls	r2, r3, #22
 8005b5e:	d4ef      	bmi.n	8005b40 <__smakebuf_r+0x18>
 8005b60:	f023 0303 	bic.w	r3, r3, #3
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	e7e3      	b.n	8005b34 <__smakebuf_r+0xc>
 8005b6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <__smakebuf_r+0x7c>)
 8005b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	6020      	str	r0, [r4, #0]
 8005b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	9b00      	ldr	r3, [sp, #0]
 8005b7c:	6163      	str	r3, [r4, #20]
 8005b7e:	9b01      	ldr	r3, [sp, #4]
 8005b80:	6120      	str	r0, [r4, #16]
 8005b82:	b15b      	cbz	r3, 8005b9c <__smakebuf_r+0x74>
 8005b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f000 fcdf 	bl	800654c <_isatty_r>
 8005b8e:	b128      	cbz	r0, 8005b9c <__smakebuf_r+0x74>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	f043 0301 	orr.w	r3, r3, #1
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	89a0      	ldrh	r0, [r4, #12]
 8005b9e:	4305      	orrs	r5, r0
 8005ba0:	81a5      	strh	r5, [r4, #12]
 8005ba2:	e7cd      	b.n	8005b40 <__smakebuf_r+0x18>
 8005ba4:	0800587d 	.word	0x0800587d

08005ba8 <malloc>:
 8005ba8:	4b02      	ldr	r3, [pc, #8]	; (8005bb4 <malloc+0xc>)
 8005baa:	4601      	mov	r1, r0
 8005bac:	6818      	ldr	r0, [r3, #0]
 8005bae:	f000 b86f 	b.w	8005c90 <_malloc_r>
 8005bb2:	bf00      	nop
 8005bb4:	2000000c 	.word	0x2000000c

08005bb8 <_free_r>:
 8005bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bba:	2900      	cmp	r1, #0
 8005bbc:	d044      	beq.n	8005c48 <_free_r+0x90>
 8005bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc2:	9001      	str	r0, [sp, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f1a1 0404 	sub.w	r4, r1, #4
 8005bca:	bfb8      	it	lt
 8005bcc:	18e4      	addlt	r4, r4, r3
 8005bce:	f000 fcdf 	bl	8006590 <__malloc_lock>
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <_free_r+0x94>)
 8005bd4:	9801      	ldr	r0, [sp, #4]
 8005bd6:	6813      	ldr	r3, [r2, #0]
 8005bd8:	b933      	cbnz	r3, 8005be8 <_free_r+0x30>
 8005bda:	6063      	str	r3, [r4, #4]
 8005bdc:	6014      	str	r4, [r2, #0]
 8005bde:	b003      	add	sp, #12
 8005be0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005be4:	f000 bcda 	b.w	800659c <__malloc_unlock>
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	d908      	bls.n	8005bfe <_free_r+0x46>
 8005bec:	6825      	ldr	r5, [r4, #0]
 8005bee:	1961      	adds	r1, r4, r5
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	bf01      	itttt	eq
 8005bf4:	6819      	ldreq	r1, [r3, #0]
 8005bf6:	685b      	ldreq	r3, [r3, #4]
 8005bf8:	1949      	addeq	r1, r1, r5
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	e7ed      	b.n	8005bda <_free_r+0x22>
 8005bfe:	461a      	mov	r2, r3
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	b10b      	cbz	r3, 8005c08 <_free_r+0x50>
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d9fa      	bls.n	8005bfe <_free_r+0x46>
 8005c08:	6811      	ldr	r1, [r2, #0]
 8005c0a:	1855      	adds	r5, r2, r1
 8005c0c:	42a5      	cmp	r5, r4
 8005c0e:	d10b      	bne.n	8005c28 <_free_r+0x70>
 8005c10:	6824      	ldr	r4, [r4, #0]
 8005c12:	4421      	add	r1, r4
 8005c14:	1854      	adds	r4, r2, r1
 8005c16:	42a3      	cmp	r3, r4
 8005c18:	6011      	str	r1, [r2, #0]
 8005c1a:	d1e0      	bne.n	8005bde <_free_r+0x26>
 8005c1c:	681c      	ldr	r4, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	6053      	str	r3, [r2, #4]
 8005c22:	4421      	add	r1, r4
 8005c24:	6011      	str	r1, [r2, #0]
 8005c26:	e7da      	b.n	8005bde <_free_r+0x26>
 8005c28:	d902      	bls.n	8005c30 <_free_r+0x78>
 8005c2a:	230c      	movs	r3, #12
 8005c2c:	6003      	str	r3, [r0, #0]
 8005c2e:	e7d6      	b.n	8005bde <_free_r+0x26>
 8005c30:	6825      	ldr	r5, [r4, #0]
 8005c32:	1961      	adds	r1, r4, r5
 8005c34:	428b      	cmp	r3, r1
 8005c36:	bf04      	itt	eq
 8005c38:	6819      	ldreq	r1, [r3, #0]
 8005c3a:	685b      	ldreq	r3, [r3, #4]
 8005c3c:	6063      	str	r3, [r4, #4]
 8005c3e:	bf04      	itt	eq
 8005c40:	1949      	addeq	r1, r1, r5
 8005c42:	6021      	streq	r1, [r4, #0]
 8005c44:	6054      	str	r4, [r2, #4]
 8005c46:	e7ca      	b.n	8005bde <_free_r+0x26>
 8005c48:	b003      	add	sp, #12
 8005c4a:	bd30      	pop	{r4, r5, pc}
 8005c4c:	20000af4 	.word	0x20000af4

08005c50 <sbrk_aligned>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	4e0e      	ldr	r6, [pc, #56]	; (8005c8c <sbrk_aligned+0x3c>)
 8005c54:	460c      	mov	r4, r1
 8005c56:	6831      	ldr	r1, [r6, #0]
 8005c58:	4605      	mov	r5, r0
 8005c5a:	b911      	cbnz	r1, 8005c62 <sbrk_aligned+0x12>
 8005c5c:	f000 fbee 	bl	800643c <_sbrk_r>
 8005c60:	6030      	str	r0, [r6, #0]
 8005c62:	4621      	mov	r1, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 fbe9 	bl	800643c <_sbrk_r>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	d00a      	beq.n	8005c84 <sbrk_aligned+0x34>
 8005c6e:	1cc4      	adds	r4, r0, #3
 8005c70:	f024 0403 	bic.w	r4, r4, #3
 8005c74:	42a0      	cmp	r0, r4
 8005c76:	d007      	beq.n	8005c88 <sbrk_aligned+0x38>
 8005c78:	1a21      	subs	r1, r4, r0
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 fbde 	bl	800643c <_sbrk_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d101      	bne.n	8005c88 <sbrk_aligned+0x38>
 8005c84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c88:	4620      	mov	r0, r4
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	20000af8 	.word	0x20000af8

08005c90 <_malloc_r>:
 8005c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	1ccd      	adds	r5, r1, #3
 8005c96:	f025 0503 	bic.w	r5, r5, #3
 8005c9a:	3508      	adds	r5, #8
 8005c9c:	2d0c      	cmp	r5, #12
 8005c9e:	bf38      	it	cc
 8005ca0:	250c      	movcc	r5, #12
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	db01      	blt.n	8005cac <_malloc_r+0x1c>
 8005ca8:	42a9      	cmp	r1, r5
 8005caa:	d905      	bls.n	8005cb8 <_malloc_r+0x28>
 8005cac:	230c      	movs	r3, #12
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	2600      	movs	r6, #0
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb8:	4e2e      	ldr	r6, [pc, #184]	; (8005d74 <_malloc_r+0xe4>)
 8005cba:	f000 fc69 	bl	8006590 <__malloc_lock>
 8005cbe:	6833      	ldr	r3, [r6, #0]
 8005cc0:	461c      	mov	r4, r3
 8005cc2:	bb34      	cbnz	r4, 8005d12 <_malloc_r+0x82>
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f7ff ffc2 	bl	8005c50 <sbrk_aligned>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	4604      	mov	r4, r0
 8005cd0:	d14d      	bne.n	8005d6e <_malloc_r+0xde>
 8005cd2:	6834      	ldr	r4, [r6, #0]
 8005cd4:	4626      	mov	r6, r4
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	d140      	bne.n	8005d5c <_malloc_r+0xcc>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4638      	mov	r0, r7
 8005ce0:	eb04 0803 	add.w	r8, r4, r3
 8005ce4:	f000 fbaa 	bl	800643c <_sbrk_r>
 8005ce8:	4580      	cmp	r8, r0
 8005cea:	d13a      	bne.n	8005d62 <_malloc_r+0xd2>
 8005cec:	6821      	ldr	r1, [r4, #0]
 8005cee:	3503      	adds	r5, #3
 8005cf0:	1a6d      	subs	r5, r5, r1
 8005cf2:	f025 0503 	bic.w	r5, r5, #3
 8005cf6:	3508      	adds	r5, #8
 8005cf8:	2d0c      	cmp	r5, #12
 8005cfa:	bf38      	it	cc
 8005cfc:	250c      	movcc	r5, #12
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff ffa5 	bl	8005c50 <sbrk_aligned>
 8005d06:	3001      	adds	r0, #1
 8005d08:	d02b      	beq.n	8005d62 <_malloc_r+0xd2>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	442b      	add	r3, r5
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	e00e      	b.n	8005d30 <_malloc_r+0xa0>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	1b52      	subs	r2, r2, r5
 8005d16:	d41e      	bmi.n	8005d56 <_malloc_r+0xc6>
 8005d18:	2a0b      	cmp	r2, #11
 8005d1a:	d916      	bls.n	8005d4a <_malloc_r+0xba>
 8005d1c:	1961      	adds	r1, r4, r5
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	6025      	str	r5, [r4, #0]
 8005d22:	bf18      	it	ne
 8005d24:	6059      	strne	r1, [r3, #4]
 8005d26:	6863      	ldr	r3, [r4, #4]
 8005d28:	bf08      	it	eq
 8005d2a:	6031      	streq	r1, [r6, #0]
 8005d2c:	5162      	str	r2, [r4, r5]
 8005d2e:	604b      	str	r3, [r1, #4]
 8005d30:	4638      	mov	r0, r7
 8005d32:	f104 060b 	add.w	r6, r4, #11
 8005d36:	f000 fc31 	bl	800659c <__malloc_unlock>
 8005d3a:	f026 0607 	bic.w	r6, r6, #7
 8005d3e:	1d23      	adds	r3, r4, #4
 8005d40:	1af2      	subs	r2, r6, r3
 8005d42:	d0b6      	beq.n	8005cb2 <_malloc_r+0x22>
 8005d44:	1b9b      	subs	r3, r3, r6
 8005d46:	50a3      	str	r3, [r4, r2]
 8005d48:	e7b3      	b.n	8005cb2 <_malloc_r+0x22>
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	bf0c      	ite	eq
 8005d50:	6032      	streq	r2, [r6, #0]
 8005d52:	605a      	strne	r2, [r3, #4]
 8005d54:	e7ec      	b.n	8005d30 <_malloc_r+0xa0>
 8005d56:	4623      	mov	r3, r4
 8005d58:	6864      	ldr	r4, [r4, #4]
 8005d5a:	e7b2      	b.n	8005cc2 <_malloc_r+0x32>
 8005d5c:	4634      	mov	r4, r6
 8005d5e:	6876      	ldr	r6, [r6, #4]
 8005d60:	e7b9      	b.n	8005cd6 <_malloc_r+0x46>
 8005d62:	230c      	movs	r3, #12
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	4638      	mov	r0, r7
 8005d68:	f000 fc18 	bl	800659c <__malloc_unlock>
 8005d6c:	e7a1      	b.n	8005cb2 <_malloc_r+0x22>
 8005d6e:	6025      	str	r5, [r4, #0]
 8005d70:	e7de      	b.n	8005d30 <_malloc_r+0xa0>
 8005d72:	bf00      	nop
 8005d74:	20000af4 	.word	0x20000af4

08005d78 <__sfputc_r>:
 8005d78:	6893      	ldr	r3, [r2, #8]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	b410      	push	{r4}
 8005d80:	6093      	str	r3, [r2, #8]
 8005d82:	da08      	bge.n	8005d96 <__sfputc_r+0x1e>
 8005d84:	6994      	ldr	r4, [r2, #24]
 8005d86:	42a3      	cmp	r3, r4
 8005d88:	db01      	blt.n	8005d8e <__sfputc_r+0x16>
 8005d8a:	290a      	cmp	r1, #10
 8005d8c:	d103      	bne.n	8005d96 <__sfputc_r+0x1e>
 8005d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d92:	f7ff bbbb 	b.w	800550c <__swbuf_r>
 8005d96:	6813      	ldr	r3, [r2, #0]
 8005d98:	1c58      	adds	r0, r3, #1
 8005d9a:	6010      	str	r0, [r2, #0]
 8005d9c:	7019      	strb	r1, [r3, #0]
 8005d9e:	4608      	mov	r0, r1
 8005da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <__sfputs_r>:
 8005da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da8:	4606      	mov	r6, r0
 8005daa:	460f      	mov	r7, r1
 8005dac:	4614      	mov	r4, r2
 8005dae:	18d5      	adds	r5, r2, r3
 8005db0:	42ac      	cmp	r4, r5
 8005db2:	d101      	bne.n	8005db8 <__sfputs_r+0x12>
 8005db4:	2000      	movs	r0, #0
 8005db6:	e007      	b.n	8005dc8 <__sfputs_r+0x22>
 8005db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dbc:	463a      	mov	r2, r7
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f7ff ffda 	bl	8005d78 <__sfputc_r>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d1f3      	bne.n	8005db0 <__sfputs_r+0xa>
 8005dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005dcc <_vfiprintf_r>:
 8005dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	b09d      	sub	sp, #116	; 0x74
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	4698      	mov	r8, r3
 8005dd8:	4606      	mov	r6, r0
 8005dda:	b118      	cbz	r0, 8005de4 <_vfiprintf_r+0x18>
 8005ddc:	6983      	ldr	r3, [r0, #24]
 8005dde:	b90b      	cbnz	r3, 8005de4 <_vfiprintf_r+0x18>
 8005de0:	f7ff fd80 	bl	80058e4 <__sinit>
 8005de4:	4b89      	ldr	r3, [pc, #548]	; (800600c <_vfiprintf_r+0x240>)
 8005de6:	429d      	cmp	r5, r3
 8005de8:	d11b      	bne.n	8005e22 <_vfiprintf_r+0x56>
 8005dea:	6875      	ldr	r5, [r6, #4]
 8005dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dee:	07d9      	lsls	r1, r3, #31
 8005df0:	d405      	bmi.n	8005dfe <_vfiprintf_r+0x32>
 8005df2:	89ab      	ldrh	r3, [r5, #12]
 8005df4:	059a      	lsls	r2, r3, #22
 8005df6:	d402      	bmi.n	8005dfe <_vfiprintf_r+0x32>
 8005df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dfa:	f7ff fe6e 	bl	8005ada <__retarget_lock_acquire_recursive>
 8005dfe:	89ab      	ldrh	r3, [r5, #12]
 8005e00:	071b      	lsls	r3, r3, #28
 8005e02:	d501      	bpl.n	8005e08 <_vfiprintf_r+0x3c>
 8005e04:	692b      	ldr	r3, [r5, #16]
 8005e06:	b9eb      	cbnz	r3, 8005e44 <_vfiprintf_r+0x78>
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff fbd0 	bl	80055b0 <__swsetup_r>
 8005e10:	b1c0      	cbz	r0, 8005e44 <_vfiprintf_r+0x78>
 8005e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e14:	07dc      	lsls	r4, r3, #31
 8005e16:	d50e      	bpl.n	8005e36 <_vfiprintf_r+0x6a>
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e1c:	b01d      	add	sp, #116	; 0x74
 8005e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e22:	4b7b      	ldr	r3, [pc, #492]	; (8006010 <_vfiprintf_r+0x244>)
 8005e24:	429d      	cmp	r5, r3
 8005e26:	d101      	bne.n	8005e2c <_vfiprintf_r+0x60>
 8005e28:	68b5      	ldr	r5, [r6, #8]
 8005e2a:	e7df      	b.n	8005dec <_vfiprintf_r+0x20>
 8005e2c:	4b79      	ldr	r3, [pc, #484]	; (8006014 <_vfiprintf_r+0x248>)
 8005e2e:	429d      	cmp	r5, r3
 8005e30:	bf08      	it	eq
 8005e32:	68f5      	ldreq	r5, [r6, #12]
 8005e34:	e7da      	b.n	8005dec <_vfiprintf_r+0x20>
 8005e36:	89ab      	ldrh	r3, [r5, #12]
 8005e38:	0598      	lsls	r0, r3, #22
 8005e3a:	d4ed      	bmi.n	8005e18 <_vfiprintf_r+0x4c>
 8005e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e3e:	f7ff fe4d 	bl	8005adc <__retarget_lock_release_recursive>
 8005e42:	e7e9      	b.n	8005e18 <_vfiprintf_r+0x4c>
 8005e44:	2300      	movs	r3, #0
 8005e46:	9309      	str	r3, [sp, #36]	; 0x24
 8005e48:	2320      	movs	r3, #32
 8005e4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e52:	2330      	movs	r3, #48	; 0x30
 8005e54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006018 <_vfiprintf_r+0x24c>
 8005e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e5c:	f04f 0901 	mov.w	r9, #1
 8005e60:	4623      	mov	r3, r4
 8005e62:	469a      	mov	sl, r3
 8005e64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e68:	b10a      	cbz	r2, 8005e6e <_vfiprintf_r+0xa2>
 8005e6a:	2a25      	cmp	r2, #37	; 0x25
 8005e6c:	d1f9      	bne.n	8005e62 <_vfiprintf_r+0x96>
 8005e6e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e72:	d00b      	beq.n	8005e8c <_vfiprintf_r+0xc0>
 8005e74:	465b      	mov	r3, fp
 8005e76:	4622      	mov	r2, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f7ff ff93 	bl	8005da6 <__sfputs_r>
 8005e80:	3001      	adds	r0, #1
 8005e82:	f000 80aa 	beq.w	8005fda <_vfiprintf_r+0x20e>
 8005e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e88:	445a      	add	r2, fp
 8005e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80a2 	beq.w	8005fda <_vfiprintf_r+0x20e>
 8005e96:	2300      	movs	r3, #0
 8005e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ea0:	f10a 0a01 	add.w	sl, sl, #1
 8005ea4:	9304      	str	r3, [sp, #16]
 8005ea6:	9307      	str	r3, [sp, #28]
 8005ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005eac:	931a      	str	r3, [sp, #104]	; 0x68
 8005eae:	4654      	mov	r4, sl
 8005eb0:	2205      	movs	r2, #5
 8005eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb6:	4858      	ldr	r0, [pc, #352]	; (8006018 <_vfiprintf_r+0x24c>)
 8005eb8:	f7fa f992 	bl	80001e0 <memchr>
 8005ebc:	9a04      	ldr	r2, [sp, #16]
 8005ebe:	b9d8      	cbnz	r0, 8005ef8 <_vfiprintf_r+0x12c>
 8005ec0:	06d1      	lsls	r1, r2, #27
 8005ec2:	bf44      	itt	mi
 8005ec4:	2320      	movmi	r3, #32
 8005ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eca:	0713      	lsls	r3, r2, #28
 8005ecc:	bf44      	itt	mi
 8005ece:	232b      	movmi	r3, #43	; 0x2b
 8005ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8005eda:	d015      	beq.n	8005f08 <_vfiprintf_r+0x13c>
 8005edc:	9a07      	ldr	r2, [sp, #28]
 8005ede:	4654      	mov	r4, sl
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	f04f 0c0a 	mov.w	ip, #10
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eec:	3b30      	subs	r3, #48	; 0x30
 8005eee:	2b09      	cmp	r3, #9
 8005ef0:	d94e      	bls.n	8005f90 <_vfiprintf_r+0x1c4>
 8005ef2:	b1b0      	cbz	r0, 8005f22 <_vfiprintf_r+0x156>
 8005ef4:	9207      	str	r2, [sp, #28]
 8005ef6:	e014      	b.n	8005f22 <_vfiprintf_r+0x156>
 8005ef8:	eba0 0308 	sub.w	r3, r0, r8
 8005efc:	fa09 f303 	lsl.w	r3, r9, r3
 8005f00:	4313      	orrs	r3, r2
 8005f02:	9304      	str	r3, [sp, #16]
 8005f04:	46a2      	mov	sl, r4
 8005f06:	e7d2      	b.n	8005eae <_vfiprintf_r+0xe2>
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	1d19      	adds	r1, r3, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	9103      	str	r1, [sp, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bfbb      	ittet	lt
 8005f14:	425b      	neglt	r3, r3
 8005f16:	f042 0202 	orrlt.w	r2, r2, #2
 8005f1a:	9307      	strge	r3, [sp, #28]
 8005f1c:	9307      	strlt	r3, [sp, #28]
 8005f1e:	bfb8      	it	lt
 8005f20:	9204      	strlt	r2, [sp, #16]
 8005f22:	7823      	ldrb	r3, [r4, #0]
 8005f24:	2b2e      	cmp	r3, #46	; 0x2e
 8005f26:	d10c      	bne.n	8005f42 <_vfiprintf_r+0x176>
 8005f28:	7863      	ldrb	r3, [r4, #1]
 8005f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f2c:	d135      	bne.n	8005f9a <_vfiprintf_r+0x1ce>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	1d1a      	adds	r2, r3, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	9203      	str	r2, [sp, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bfb8      	it	lt
 8005f3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f3e:	3402      	adds	r4, #2
 8005f40:	9305      	str	r3, [sp, #20]
 8005f42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006028 <_vfiprintf_r+0x25c>
 8005f46:	7821      	ldrb	r1, [r4, #0]
 8005f48:	2203      	movs	r2, #3
 8005f4a:	4650      	mov	r0, sl
 8005f4c:	f7fa f948 	bl	80001e0 <memchr>
 8005f50:	b140      	cbz	r0, 8005f64 <_vfiprintf_r+0x198>
 8005f52:	2340      	movs	r3, #64	; 0x40
 8005f54:	eba0 000a 	sub.w	r0, r0, sl
 8005f58:	fa03 f000 	lsl.w	r0, r3, r0
 8005f5c:	9b04      	ldr	r3, [sp, #16]
 8005f5e:	4303      	orrs	r3, r0
 8005f60:	3401      	adds	r4, #1
 8005f62:	9304      	str	r3, [sp, #16]
 8005f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f68:	482c      	ldr	r0, [pc, #176]	; (800601c <_vfiprintf_r+0x250>)
 8005f6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f6e:	2206      	movs	r2, #6
 8005f70:	f7fa f936 	bl	80001e0 <memchr>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d03f      	beq.n	8005ff8 <_vfiprintf_r+0x22c>
 8005f78:	4b29      	ldr	r3, [pc, #164]	; (8006020 <_vfiprintf_r+0x254>)
 8005f7a:	bb1b      	cbnz	r3, 8005fc4 <_vfiprintf_r+0x1f8>
 8005f7c:	9b03      	ldr	r3, [sp, #12]
 8005f7e:	3307      	adds	r3, #7
 8005f80:	f023 0307 	bic.w	r3, r3, #7
 8005f84:	3308      	adds	r3, #8
 8005f86:	9303      	str	r3, [sp, #12]
 8005f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8a:	443b      	add	r3, r7
 8005f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f8e:	e767      	b.n	8005e60 <_vfiprintf_r+0x94>
 8005f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f94:	460c      	mov	r4, r1
 8005f96:	2001      	movs	r0, #1
 8005f98:	e7a5      	b.n	8005ee6 <_vfiprintf_r+0x11a>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	3401      	adds	r4, #1
 8005f9e:	9305      	str	r3, [sp, #20]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	f04f 0c0a 	mov.w	ip, #10
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fac:	3a30      	subs	r2, #48	; 0x30
 8005fae:	2a09      	cmp	r2, #9
 8005fb0:	d903      	bls.n	8005fba <_vfiprintf_r+0x1ee>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0c5      	beq.n	8005f42 <_vfiprintf_r+0x176>
 8005fb6:	9105      	str	r1, [sp, #20]
 8005fb8:	e7c3      	b.n	8005f42 <_vfiprintf_r+0x176>
 8005fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e7f0      	b.n	8005fa6 <_vfiprintf_r+0x1da>
 8005fc4:	ab03      	add	r3, sp, #12
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	462a      	mov	r2, r5
 8005fca:	4b16      	ldr	r3, [pc, #88]	; (8006024 <_vfiprintf_r+0x258>)
 8005fcc:	a904      	add	r1, sp, #16
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f3af 8000 	nop.w
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	1c78      	adds	r0, r7, #1
 8005fd8:	d1d6      	bne.n	8005f88 <_vfiprintf_r+0x1bc>
 8005fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fdc:	07d9      	lsls	r1, r3, #31
 8005fde:	d405      	bmi.n	8005fec <_vfiprintf_r+0x220>
 8005fe0:	89ab      	ldrh	r3, [r5, #12]
 8005fe2:	059a      	lsls	r2, r3, #22
 8005fe4:	d402      	bmi.n	8005fec <_vfiprintf_r+0x220>
 8005fe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fe8:	f7ff fd78 	bl	8005adc <__retarget_lock_release_recursive>
 8005fec:	89ab      	ldrh	r3, [r5, #12]
 8005fee:	065b      	lsls	r3, r3, #25
 8005ff0:	f53f af12 	bmi.w	8005e18 <_vfiprintf_r+0x4c>
 8005ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ff6:	e711      	b.n	8005e1c <_vfiprintf_r+0x50>
 8005ff8:	ab03      	add	r3, sp, #12
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	4b09      	ldr	r3, [pc, #36]	; (8006024 <_vfiprintf_r+0x258>)
 8006000:	a904      	add	r1, sp, #16
 8006002:	4630      	mov	r0, r6
 8006004:	f000 f880 	bl	8006108 <_printf_i>
 8006008:	e7e4      	b.n	8005fd4 <_vfiprintf_r+0x208>
 800600a:	bf00      	nop
 800600c:	08006bb8 	.word	0x08006bb8
 8006010:	08006bd8 	.word	0x08006bd8
 8006014:	08006b98 	.word	0x08006b98
 8006018:	08006bf8 	.word	0x08006bf8
 800601c:	08006c02 	.word	0x08006c02
 8006020:	00000000 	.word	0x00000000
 8006024:	08005da7 	.word	0x08005da7
 8006028:	08006bfe 	.word	0x08006bfe

0800602c <_printf_common>:
 800602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	4616      	mov	r6, r2
 8006032:	4699      	mov	r9, r3
 8006034:	688a      	ldr	r2, [r1, #8]
 8006036:	690b      	ldr	r3, [r1, #16]
 8006038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800603c:	4293      	cmp	r3, r2
 800603e:	bfb8      	it	lt
 8006040:	4613      	movlt	r3, r2
 8006042:	6033      	str	r3, [r6, #0]
 8006044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006048:	4607      	mov	r7, r0
 800604a:	460c      	mov	r4, r1
 800604c:	b10a      	cbz	r2, 8006052 <_printf_common+0x26>
 800604e:	3301      	adds	r3, #1
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	0699      	lsls	r1, r3, #26
 8006056:	bf42      	ittt	mi
 8006058:	6833      	ldrmi	r3, [r6, #0]
 800605a:	3302      	addmi	r3, #2
 800605c:	6033      	strmi	r3, [r6, #0]
 800605e:	6825      	ldr	r5, [r4, #0]
 8006060:	f015 0506 	ands.w	r5, r5, #6
 8006064:	d106      	bne.n	8006074 <_printf_common+0x48>
 8006066:	f104 0a19 	add.w	sl, r4, #25
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	6832      	ldr	r2, [r6, #0]
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	42ab      	cmp	r3, r5
 8006072:	dc26      	bgt.n	80060c2 <_printf_common+0x96>
 8006074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006078:	1e13      	subs	r3, r2, #0
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	bf18      	it	ne
 800607e:	2301      	movne	r3, #1
 8006080:	0692      	lsls	r2, r2, #26
 8006082:	d42b      	bmi.n	80060dc <_printf_common+0xb0>
 8006084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006088:	4649      	mov	r1, r9
 800608a:	4638      	mov	r0, r7
 800608c:	47c0      	blx	r8
 800608e:	3001      	adds	r0, #1
 8006090:	d01e      	beq.n	80060d0 <_printf_common+0xa4>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	68e5      	ldr	r5, [r4, #12]
 8006096:	6832      	ldr	r2, [r6, #0]
 8006098:	f003 0306 	and.w	r3, r3, #6
 800609c:	2b04      	cmp	r3, #4
 800609e:	bf08      	it	eq
 80060a0:	1aad      	subeq	r5, r5, r2
 80060a2:	68a3      	ldr	r3, [r4, #8]
 80060a4:	6922      	ldr	r2, [r4, #16]
 80060a6:	bf0c      	ite	eq
 80060a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060ac:	2500      	movne	r5, #0
 80060ae:	4293      	cmp	r3, r2
 80060b0:	bfc4      	itt	gt
 80060b2:	1a9b      	subgt	r3, r3, r2
 80060b4:	18ed      	addgt	r5, r5, r3
 80060b6:	2600      	movs	r6, #0
 80060b8:	341a      	adds	r4, #26
 80060ba:	42b5      	cmp	r5, r6
 80060bc:	d11a      	bne.n	80060f4 <_printf_common+0xc8>
 80060be:	2000      	movs	r0, #0
 80060c0:	e008      	b.n	80060d4 <_printf_common+0xa8>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4652      	mov	r2, sl
 80060c6:	4649      	mov	r1, r9
 80060c8:	4638      	mov	r0, r7
 80060ca:	47c0      	blx	r8
 80060cc:	3001      	adds	r0, #1
 80060ce:	d103      	bne.n	80060d8 <_printf_common+0xac>
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d8:	3501      	adds	r5, #1
 80060da:	e7c6      	b.n	800606a <_printf_common+0x3e>
 80060dc:	18e1      	adds	r1, r4, r3
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	2030      	movs	r0, #48	; 0x30
 80060e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060e6:	4422      	add	r2, r4
 80060e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f0:	3302      	adds	r3, #2
 80060f2:	e7c7      	b.n	8006084 <_printf_common+0x58>
 80060f4:	2301      	movs	r3, #1
 80060f6:	4622      	mov	r2, r4
 80060f8:	4649      	mov	r1, r9
 80060fa:	4638      	mov	r0, r7
 80060fc:	47c0      	blx	r8
 80060fe:	3001      	adds	r0, #1
 8006100:	d0e6      	beq.n	80060d0 <_printf_common+0xa4>
 8006102:	3601      	adds	r6, #1
 8006104:	e7d9      	b.n	80060ba <_printf_common+0x8e>
	...

08006108 <_printf_i>:
 8006108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	7e0f      	ldrb	r7, [r1, #24]
 800610e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006110:	2f78      	cmp	r7, #120	; 0x78
 8006112:	4691      	mov	r9, r2
 8006114:	4680      	mov	r8, r0
 8006116:	460c      	mov	r4, r1
 8006118:	469a      	mov	sl, r3
 800611a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800611e:	d807      	bhi.n	8006130 <_printf_i+0x28>
 8006120:	2f62      	cmp	r7, #98	; 0x62
 8006122:	d80a      	bhi.n	800613a <_printf_i+0x32>
 8006124:	2f00      	cmp	r7, #0
 8006126:	f000 80d8 	beq.w	80062da <_printf_i+0x1d2>
 800612a:	2f58      	cmp	r7, #88	; 0x58
 800612c:	f000 80a3 	beq.w	8006276 <_printf_i+0x16e>
 8006130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006138:	e03a      	b.n	80061b0 <_printf_i+0xa8>
 800613a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800613e:	2b15      	cmp	r3, #21
 8006140:	d8f6      	bhi.n	8006130 <_printf_i+0x28>
 8006142:	a101      	add	r1, pc, #4	; (adr r1, 8006148 <_printf_i+0x40>)
 8006144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006148:	080061a1 	.word	0x080061a1
 800614c:	080061b5 	.word	0x080061b5
 8006150:	08006131 	.word	0x08006131
 8006154:	08006131 	.word	0x08006131
 8006158:	08006131 	.word	0x08006131
 800615c:	08006131 	.word	0x08006131
 8006160:	080061b5 	.word	0x080061b5
 8006164:	08006131 	.word	0x08006131
 8006168:	08006131 	.word	0x08006131
 800616c:	08006131 	.word	0x08006131
 8006170:	08006131 	.word	0x08006131
 8006174:	080062c1 	.word	0x080062c1
 8006178:	080061e5 	.word	0x080061e5
 800617c:	080062a3 	.word	0x080062a3
 8006180:	08006131 	.word	0x08006131
 8006184:	08006131 	.word	0x08006131
 8006188:	080062e3 	.word	0x080062e3
 800618c:	08006131 	.word	0x08006131
 8006190:	080061e5 	.word	0x080061e5
 8006194:	08006131 	.word	0x08006131
 8006198:	08006131 	.word	0x08006131
 800619c:	080062ab 	.word	0x080062ab
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	602a      	str	r2, [r5, #0]
 80061a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0a3      	b.n	80062fc <_printf_i+0x1f4>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	6829      	ldr	r1, [r5, #0]
 80061b8:	0606      	lsls	r6, r0, #24
 80061ba:	f101 0304 	add.w	r3, r1, #4
 80061be:	d50a      	bpl.n	80061d6 <_printf_i+0xce>
 80061c0:	680e      	ldr	r6, [r1, #0]
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	da03      	bge.n	80061d0 <_printf_i+0xc8>
 80061c8:	232d      	movs	r3, #45	; 0x2d
 80061ca:	4276      	negs	r6, r6
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d0:	485e      	ldr	r0, [pc, #376]	; (800634c <_printf_i+0x244>)
 80061d2:	230a      	movs	r3, #10
 80061d4:	e019      	b.n	800620a <_printf_i+0x102>
 80061d6:	680e      	ldr	r6, [r1, #0]
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061de:	bf18      	it	ne
 80061e0:	b236      	sxthne	r6, r6
 80061e2:	e7ef      	b.n	80061c4 <_printf_i+0xbc>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	6820      	ldr	r0, [r4, #0]
 80061e8:	1d19      	adds	r1, r3, #4
 80061ea:	6029      	str	r1, [r5, #0]
 80061ec:	0601      	lsls	r1, r0, #24
 80061ee:	d501      	bpl.n	80061f4 <_printf_i+0xec>
 80061f0:	681e      	ldr	r6, [r3, #0]
 80061f2:	e002      	b.n	80061fa <_printf_i+0xf2>
 80061f4:	0646      	lsls	r6, r0, #25
 80061f6:	d5fb      	bpl.n	80061f0 <_printf_i+0xe8>
 80061f8:	881e      	ldrh	r6, [r3, #0]
 80061fa:	4854      	ldr	r0, [pc, #336]	; (800634c <_printf_i+0x244>)
 80061fc:	2f6f      	cmp	r7, #111	; 0x6f
 80061fe:	bf0c      	ite	eq
 8006200:	2308      	moveq	r3, #8
 8006202:	230a      	movne	r3, #10
 8006204:	2100      	movs	r1, #0
 8006206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800620a:	6865      	ldr	r5, [r4, #4]
 800620c:	60a5      	str	r5, [r4, #8]
 800620e:	2d00      	cmp	r5, #0
 8006210:	bfa2      	ittt	ge
 8006212:	6821      	ldrge	r1, [r4, #0]
 8006214:	f021 0104 	bicge.w	r1, r1, #4
 8006218:	6021      	strge	r1, [r4, #0]
 800621a:	b90e      	cbnz	r6, 8006220 <_printf_i+0x118>
 800621c:	2d00      	cmp	r5, #0
 800621e:	d04d      	beq.n	80062bc <_printf_i+0x1b4>
 8006220:	4615      	mov	r5, r2
 8006222:	fbb6 f1f3 	udiv	r1, r6, r3
 8006226:	fb03 6711 	mls	r7, r3, r1, r6
 800622a:	5dc7      	ldrb	r7, [r0, r7]
 800622c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006230:	4637      	mov	r7, r6
 8006232:	42bb      	cmp	r3, r7
 8006234:	460e      	mov	r6, r1
 8006236:	d9f4      	bls.n	8006222 <_printf_i+0x11a>
 8006238:	2b08      	cmp	r3, #8
 800623a:	d10b      	bne.n	8006254 <_printf_i+0x14c>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	07de      	lsls	r6, r3, #31
 8006240:	d508      	bpl.n	8006254 <_printf_i+0x14c>
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	6861      	ldr	r1, [r4, #4]
 8006246:	4299      	cmp	r1, r3
 8006248:	bfde      	ittt	le
 800624a:	2330      	movle	r3, #48	; 0x30
 800624c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006250:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006254:	1b52      	subs	r2, r2, r5
 8006256:	6122      	str	r2, [r4, #16]
 8006258:	f8cd a000 	str.w	sl, [sp]
 800625c:	464b      	mov	r3, r9
 800625e:	aa03      	add	r2, sp, #12
 8006260:	4621      	mov	r1, r4
 8006262:	4640      	mov	r0, r8
 8006264:	f7ff fee2 	bl	800602c <_printf_common>
 8006268:	3001      	adds	r0, #1
 800626a:	d14c      	bne.n	8006306 <_printf_i+0x1fe>
 800626c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006270:	b004      	add	sp, #16
 8006272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006276:	4835      	ldr	r0, [pc, #212]	; (800634c <_printf_i+0x244>)
 8006278:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800627c:	6829      	ldr	r1, [r5, #0]
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	f851 6b04 	ldr.w	r6, [r1], #4
 8006284:	6029      	str	r1, [r5, #0]
 8006286:	061d      	lsls	r5, r3, #24
 8006288:	d514      	bpl.n	80062b4 <_printf_i+0x1ac>
 800628a:	07df      	lsls	r7, r3, #31
 800628c:	bf44      	itt	mi
 800628e:	f043 0320 	orrmi.w	r3, r3, #32
 8006292:	6023      	strmi	r3, [r4, #0]
 8006294:	b91e      	cbnz	r6, 800629e <_printf_i+0x196>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	f023 0320 	bic.w	r3, r3, #32
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	2310      	movs	r3, #16
 80062a0:	e7b0      	b.n	8006204 <_printf_i+0xfc>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	f043 0320 	orr.w	r3, r3, #32
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	2378      	movs	r3, #120	; 0x78
 80062ac:	4828      	ldr	r0, [pc, #160]	; (8006350 <_printf_i+0x248>)
 80062ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062b2:	e7e3      	b.n	800627c <_printf_i+0x174>
 80062b4:	0659      	lsls	r1, r3, #25
 80062b6:	bf48      	it	mi
 80062b8:	b2b6      	uxthmi	r6, r6
 80062ba:	e7e6      	b.n	800628a <_printf_i+0x182>
 80062bc:	4615      	mov	r5, r2
 80062be:	e7bb      	b.n	8006238 <_printf_i+0x130>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	6826      	ldr	r6, [r4, #0]
 80062c4:	6961      	ldr	r1, [r4, #20]
 80062c6:	1d18      	adds	r0, r3, #4
 80062c8:	6028      	str	r0, [r5, #0]
 80062ca:	0635      	lsls	r5, r6, #24
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	d501      	bpl.n	80062d4 <_printf_i+0x1cc>
 80062d0:	6019      	str	r1, [r3, #0]
 80062d2:	e002      	b.n	80062da <_printf_i+0x1d2>
 80062d4:	0670      	lsls	r0, r6, #25
 80062d6:	d5fb      	bpl.n	80062d0 <_printf_i+0x1c8>
 80062d8:	8019      	strh	r1, [r3, #0]
 80062da:	2300      	movs	r3, #0
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	4615      	mov	r5, r2
 80062e0:	e7ba      	b.n	8006258 <_printf_i+0x150>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	602a      	str	r2, [r5, #0]
 80062e8:	681d      	ldr	r5, [r3, #0]
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	2100      	movs	r1, #0
 80062ee:	4628      	mov	r0, r5
 80062f0:	f7f9 ff76 	bl	80001e0 <memchr>
 80062f4:	b108      	cbz	r0, 80062fa <_printf_i+0x1f2>
 80062f6:	1b40      	subs	r0, r0, r5
 80062f8:	6060      	str	r0, [r4, #4]
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	2300      	movs	r3, #0
 8006300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006304:	e7a8      	b.n	8006258 <_printf_i+0x150>
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	462a      	mov	r2, r5
 800630a:	4649      	mov	r1, r9
 800630c:	4640      	mov	r0, r8
 800630e:	47d0      	blx	sl
 8006310:	3001      	adds	r0, #1
 8006312:	d0ab      	beq.n	800626c <_printf_i+0x164>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	079b      	lsls	r3, r3, #30
 8006318:	d413      	bmi.n	8006342 <_printf_i+0x23a>
 800631a:	68e0      	ldr	r0, [r4, #12]
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	4298      	cmp	r0, r3
 8006320:	bfb8      	it	lt
 8006322:	4618      	movlt	r0, r3
 8006324:	e7a4      	b.n	8006270 <_printf_i+0x168>
 8006326:	2301      	movs	r3, #1
 8006328:	4632      	mov	r2, r6
 800632a:	4649      	mov	r1, r9
 800632c:	4640      	mov	r0, r8
 800632e:	47d0      	blx	sl
 8006330:	3001      	adds	r0, #1
 8006332:	d09b      	beq.n	800626c <_printf_i+0x164>
 8006334:	3501      	adds	r5, #1
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	9903      	ldr	r1, [sp, #12]
 800633a:	1a5b      	subs	r3, r3, r1
 800633c:	42ab      	cmp	r3, r5
 800633e:	dcf2      	bgt.n	8006326 <_printf_i+0x21e>
 8006340:	e7eb      	b.n	800631a <_printf_i+0x212>
 8006342:	2500      	movs	r5, #0
 8006344:	f104 0619 	add.w	r6, r4, #25
 8006348:	e7f5      	b.n	8006336 <_printf_i+0x22e>
 800634a:	bf00      	nop
 800634c:	08006c09 	.word	0x08006c09
 8006350:	08006c1a 	.word	0x08006c1a

08006354 <_putc_r>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	460d      	mov	r5, r1
 8006358:	4614      	mov	r4, r2
 800635a:	4606      	mov	r6, r0
 800635c:	b118      	cbz	r0, 8006366 <_putc_r+0x12>
 800635e:	6983      	ldr	r3, [r0, #24]
 8006360:	b90b      	cbnz	r3, 8006366 <_putc_r+0x12>
 8006362:	f7ff fabf 	bl	80058e4 <__sinit>
 8006366:	4b1c      	ldr	r3, [pc, #112]	; (80063d8 <_putc_r+0x84>)
 8006368:	429c      	cmp	r4, r3
 800636a:	d124      	bne.n	80063b6 <_putc_r+0x62>
 800636c:	6874      	ldr	r4, [r6, #4]
 800636e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006370:	07d8      	lsls	r0, r3, #31
 8006372:	d405      	bmi.n	8006380 <_putc_r+0x2c>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	0599      	lsls	r1, r3, #22
 8006378:	d402      	bmi.n	8006380 <_putc_r+0x2c>
 800637a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800637c:	f7ff fbad 	bl	8005ada <__retarget_lock_acquire_recursive>
 8006380:	68a3      	ldr	r3, [r4, #8]
 8006382:	3b01      	subs	r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	60a3      	str	r3, [r4, #8]
 8006388:	da05      	bge.n	8006396 <_putc_r+0x42>
 800638a:	69a2      	ldr	r2, [r4, #24]
 800638c:	4293      	cmp	r3, r2
 800638e:	db1c      	blt.n	80063ca <_putc_r+0x76>
 8006390:	b2eb      	uxtb	r3, r5
 8006392:	2b0a      	cmp	r3, #10
 8006394:	d019      	beq.n	80063ca <_putc_r+0x76>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	6022      	str	r2, [r4, #0]
 800639c:	701d      	strb	r5, [r3, #0]
 800639e:	b2ed      	uxtb	r5, r5
 80063a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063a2:	07da      	lsls	r2, r3, #31
 80063a4:	d405      	bmi.n	80063b2 <_putc_r+0x5e>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	059b      	lsls	r3, r3, #22
 80063aa:	d402      	bmi.n	80063b2 <_putc_r+0x5e>
 80063ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ae:	f7ff fb95 	bl	8005adc <__retarget_lock_release_recursive>
 80063b2:	4628      	mov	r0, r5
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <_putc_r+0x88>)
 80063b8:	429c      	cmp	r4, r3
 80063ba:	d101      	bne.n	80063c0 <_putc_r+0x6c>
 80063bc:	68b4      	ldr	r4, [r6, #8]
 80063be:	e7d6      	b.n	800636e <_putc_r+0x1a>
 80063c0:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <_putc_r+0x8c>)
 80063c2:	429c      	cmp	r4, r3
 80063c4:	bf08      	it	eq
 80063c6:	68f4      	ldreq	r4, [r6, #12]
 80063c8:	e7d1      	b.n	800636e <_putc_r+0x1a>
 80063ca:	4629      	mov	r1, r5
 80063cc:	4622      	mov	r2, r4
 80063ce:	4630      	mov	r0, r6
 80063d0:	f7ff f89c 	bl	800550c <__swbuf_r>
 80063d4:	4605      	mov	r5, r0
 80063d6:	e7e3      	b.n	80063a0 <_putc_r+0x4c>
 80063d8:	08006bb8 	.word	0x08006bb8
 80063dc:	08006bd8 	.word	0x08006bd8
 80063e0:	08006b98 	.word	0x08006b98

080063e4 <__srget_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	460c      	mov	r4, r1
 80063e8:	4605      	mov	r5, r0
 80063ea:	b118      	cbz	r0, 80063f4 <__srget_r+0x10>
 80063ec:	6983      	ldr	r3, [r0, #24]
 80063ee:	b90b      	cbnz	r3, 80063f4 <__srget_r+0x10>
 80063f0:	f7ff fa78 	bl	80058e4 <__sinit>
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <__srget_r+0x4c>)
 80063f6:	429c      	cmp	r4, r3
 80063f8:	d10d      	bne.n	8006416 <__srget_r+0x32>
 80063fa:	686c      	ldr	r4, [r5, #4]
 80063fc:	4621      	mov	r1, r4
 80063fe:	4628      	mov	r0, r5
 8006400:	f000 f8ee 	bl	80065e0 <__srefill_r>
 8006404:	b988      	cbnz	r0, 800642a <__srget_r+0x46>
 8006406:	6863      	ldr	r3, [r4, #4]
 8006408:	3b01      	subs	r3, #1
 800640a:	6063      	str	r3, [r4, #4]
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	6022      	str	r2, [r4, #0]
 8006412:	7818      	ldrb	r0, [r3, #0]
 8006414:	bd38      	pop	{r3, r4, r5, pc}
 8006416:	4b07      	ldr	r3, [pc, #28]	; (8006434 <__srget_r+0x50>)
 8006418:	429c      	cmp	r4, r3
 800641a:	d101      	bne.n	8006420 <__srget_r+0x3c>
 800641c:	68ac      	ldr	r4, [r5, #8]
 800641e:	e7ed      	b.n	80063fc <__srget_r+0x18>
 8006420:	4b05      	ldr	r3, [pc, #20]	; (8006438 <__srget_r+0x54>)
 8006422:	429c      	cmp	r4, r3
 8006424:	bf08      	it	eq
 8006426:	68ec      	ldreq	r4, [r5, #12]
 8006428:	e7e8      	b.n	80063fc <__srget_r+0x18>
 800642a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800642e:	e7f1      	b.n	8006414 <__srget_r+0x30>
 8006430:	08006bb8 	.word	0x08006bb8
 8006434:	08006bd8 	.word	0x08006bd8
 8006438:	08006b98 	.word	0x08006b98

0800643c <_sbrk_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d06      	ldr	r5, [pc, #24]	; (8006458 <_sbrk_r+0x1c>)
 8006440:	2300      	movs	r3, #0
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	602b      	str	r3, [r5, #0]
 8006448:	f7fb f8b2 	bl	80015b0 <_sbrk>
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	d102      	bne.n	8006456 <_sbrk_r+0x1a>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	b103      	cbz	r3, 8006456 <_sbrk_r+0x1a>
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	bd38      	pop	{r3, r4, r5, pc}
 8006458:	20000afc 	.word	0x20000afc

0800645c <__sread>:
 800645c:	b510      	push	{r4, lr}
 800645e:	460c      	mov	r4, r1
 8006460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006464:	f000 f8a0 	bl	80065a8 <_read_r>
 8006468:	2800      	cmp	r0, #0
 800646a:	bfab      	itete	ge
 800646c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800646e:	89a3      	ldrhlt	r3, [r4, #12]
 8006470:	181b      	addge	r3, r3, r0
 8006472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006476:	bfac      	ite	ge
 8006478:	6563      	strge	r3, [r4, #84]	; 0x54
 800647a:	81a3      	strhlt	r3, [r4, #12]
 800647c:	bd10      	pop	{r4, pc}

0800647e <__swrite>:
 800647e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006482:	461f      	mov	r7, r3
 8006484:	898b      	ldrh	r3, [r1, #12]
 8006486:	05db      	lsls	r3, r3, #23
 8006488:	4605      	mov	r5, r0
 800648a:	460c      	mov	r4, r1
 800648c:	4616      	mov	r6, r2
 800648e:	d505      	bpl.n	800649c <__swrite+0x1e>
 8006490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006494:	2302      	movs	r3, #2
 8006496:	2200      	movs	r2, #0
 8006498:	f000 f868 	bl	800656c <_lseek_r>
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064a6:	81a3      	strh	r3, [r4, #12]
 80064a8:	4632      	mov	r2, r6
 80064aa:	463b      	mov	r3, r7
 80064ac:	4628      	mov	r0, r5
 80064ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064b2:	f000 b817 	b.w	80064e4 <_write_r>

080064b6 <__sseek>:
 80064b6:	b510      	push	{r4, lr}
 80064b8:	460c      	mov	r4, r1
 80064ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064be:	f000 f855 	bl	800656c <_lseek_r>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	bf15      	itete	ne
 80064c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80064ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064d2:	81a3      	strheq	r3, [r4, #12]
 80064d4:	bf18      	it	ne
 80064d6:	81a3      	strhne	r3, [r4, #12]
 80064d8:	bd10      	pop	{r4, pc}

080064da <__sclose>:
 80064da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064de:	f000 b813 	b.w	8006508 <_close_r>
	...

080064e4 <_write_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4d07      	ldr	r5, [pc, #28]	; (8006504 <_write_r+0x20>)
 80064e8:	4604      	mov	r4, r0
 80064ea:	4608      	mov	r0, r1
 80064ec:	4611      	mov	r1, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	602a      	str	r2, [r5, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f7fa fdc4 	bl	8001080 <_write>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_write_r+0x1e>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_write_r+0x1e>
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	20000afc 	.word	0x20000afc

08006508 <_close_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d06      	ldr	r5, [pc, #24]	; (8006524 <_close_r+0x1c>)
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	f7fb f818 	bl	8001548 <_close>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_close_r+0x1a>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_close_r+0x1a>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	20000afc 	.word	0x20000afc

08006528 <_fstat_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4d07      	ldr	r5, [pc, #28]	; (8006548 <_fstat_r+0x20>)
 800652c:	2300      	movs	r3, #0
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
 8006532:	4611      	mov	r1, r2
 8006534:	602b      	str	r3, [r5, #0]
 8006536:	f7fb f813 	bl	8001560 <_fstat>
 800653a:	1c43      	adds	r3, r0, #1
 800653c:	d102      	bne.n	8006544 <_fstat_r+0x1c>
 800653e:	682b      	ldr	r3, [r5, #0]
 8006540:	b103      	cbz	r3, 8006544 <_fstat_r+0x1c>
 8006542:	6023      	str	r3, [r4, #0]
 8006544:	bd38      	pop	{r3, r4, r5, pc}
 8006546:	bf00      	nop
 8006548:	20000afc 	.word	0x20000afc

0800654c <_isatty_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4d06      	ldr	r5, [pc, #24]	; (8006568 <_isatty_r+0x1c>)
 8006550:	2300      	movs	r3, #0
 8006552:	4604      	mov	r4, r0
 8006554:	4608      	mov	r0, r1
 8006556:	602b      	str	r3, [r5, #0]
 8006558:	f7fb f812 	bl	8001580 <_isatty>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d102      	bne.n	8006566 <_isatty_r+0x1a>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	b103      	cbz	r3, 8006566 <_isatty_r+0x1a>
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	bd38      	pop	{r3, r4, r5, pc}
 8006568:	20000afc 	.word	0x20000afc

0800656c <_lseek_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4d07      	ldr	r5, [pc, #28]	; (800658c <_lseek_r+0x20>)
 8006570:	4604      	mov	r4, r0
 8006572:	4608      	mov	r0, r1
 8006574:	4611      	mov	r1, r2
 8006576:	2200      	movs	r2, #0
 8006578:	602a      	str	r2, [r5, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	f7fb f80b 	bl	8001596 <_lseek>
 8006580:	1c43      	adds	r3, r0, #1
 8006582:	d102      	bne.n	800658a <_lseek_r+0x1e>
 8006584:	682b      	ldr	r3, [r5, #0]
 8006586:	b103      	cbz	r3, 800658a <_lseek_r+0x1e>
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	bd38      	pop	{r3, r4, r5, pc}
 800658c:	20000afc 	.word	0x20000afc

08006590 <__malloc_lock>:
 8006590:	4801      	ldr	r0, [pc, #4]	; (8006598 <__malloc_lock+0x8>)
 8006592:	f7ff baa2 	b.w	8005ada <__retarget_lock_acquire_recursive>
 8006596:	bf00      	nop
 8006598:	20000af0 	.word	0x20000af0

0800659c <__malloc_unlock>:
 800659c:	4801      	ldr	r0, [pc, #4]	; (80065a4 <__malloc_unlock+0x8>)
 800659e:	f7ff ba9d 	b.w	8005adc <__retarget_lock_release_recursive>
 80065a2:	bf00      	nop
 80065a4:	20000af0 	.word	0x20000af0

080065a8 <_read_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d07      	ldr	r5, [pc, #28]	; (80065c8 <_read_r+0x20>)
 80065ac:	4604      	mov	r4, r0
 80065ae:	4608      	mov	r0, r1
 80065b0:	4611      	mov	r1, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	602a      	str	r2, [r5, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fa fd3c 	bl	8001034 <_read>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_read_r+0x1e>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_read_r+0x1e>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20000afc 	.word	0x20000afc

080065cc <lflush>:
 80065cc:	8983      	ldrh	r3, [r0, #12]
 80065ce:	f003 0309 	and.w	r3, r3, #9
 80065d2:	2b09      	cmp	r3, #9
 80065d4:	d101      	bne.n	80065da <lflush+0xe>
 80065d6:	f7ff b91b 	b.w	8005810 <fflush>
 80065da:	2000      	movs	r0, #0
 80065dc:	4770      	bx	lr
	...

080065e0 <__srefill_r>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	460c      	mov	r4, r1
 80065e4:	4605      	mov	r5, r0
 80065e6:	b118      	cbz	r0, 80065f0 <__srefill_r+0x10>
 80065e8:	6983      	ldr	r3, [r0, #24]
 80065ea:	b90b      	cbnz	r3, 80065f0 <__srefill_r+0x10>
 80065ec:	f7ff f97a 	bl	80058e4 <__sinit>
 80065f0:	4b3b      	ldr	r3, [pc, #236]	; (80066e0 <__srefill_r+0x100>)
 80065f2:	429c      	cmp	r4, r3
 80065f4:	d10a      	bne.n	800660c <__srefill_r+0x2c>
 80065f6:	686c      	ldr	r4, [r5, #4]
 80065f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065fc:	2300      	movs	r3, #0
 80065fe:	6063      	str	r3, [r4, #4]
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	069e      	lsls	r6, r3, #26
 8006604:	d50c      	bpl.n	8006620 <__srefill_r+0x40>
 8006606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800660a:	e066      	b.n	80066da <__srefill_r+0xfa>
 800660c:	4b35      	ldr	r3, [pc, #212]	; (80066e4 <__srefill_r+0x104>)
 800660e:	429c      	cmp	r4, r3
 8006610:	d101      	bne.n	8006616 <__srefill_r+0x36>
 8006612:	68ac      	ldr	r4, [r5, #8]
 8006614:	e7f0      	b.n	80065f8 <__srefill_r+0x18>
 8006616:	4b34      	ldr	r3, [pc, #208]	; (80066e8 <__srefill_r+0x108>)
 8006618:	429c      	cmp	r4, r3
 800661a:	bf08      	it	eq
 800661c:	68ec      	ldreq	r4, [r5, #12]
 800661e:	e7eb      	b.n	80065f8 <__srefill_r+0x18>
 8006620:	0758      	lsls	r0, r3, #29
 8006622:	d448      	bmi.n	80066b6 <__srefill_r+0xd6>
 8006624:	06d9      	lsls	r1, r3, #27
 8006626:	d405      	bmi.n	8006634 <__srefill_r+0x54>
 8006628:	2309      	movs	r3, #9
 800662a:	602b      	str	r3, [r5, #0]
 800662c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006630:	81a3      	strh	r3, [r4, #12]
 8006632:	e7e8      	b.n	8006606 <__srefill_r+0x26>
 8006634:	071a      	lsls	r2, r3, #28
 8006636:	d50b      	bpl.n	8006650 <__srefill_r+0x70>
 8006638:	4621      	mov	r1, r4
 800663a:	4628      	mov	r0, r5
 800663c:	f7ff f8ac 	bl	8005798 <_fflush_r>
 8006640:	2800      	cmp	r0, #0
 8006642:	d1e0      	bne.n	8006606 <__srefill_r+0x26>
 8006644:	89a3      	ldrh	r3, [r4, #12]
 8006646:	60a0      	str	r0, [r4, #8]
 8006648:	f023 0308 	bic.w	r3, r3, #8
 800664c:	81a3      	strh	r3, [r4, #12]
 800664e:	61a0      	str	r0, [r4, #24]
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f043 0304 	orr.w	r3, r3, #4
 8006656:	81a3      	strh	r3, [r4, #12]
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	b91b      	cbnz	r3, 8006664 <__srefill_r+0x84>
 800665c:	4621      	mov	r1, r4
 800665e:	4628      	mov	r0, r5
 8006660:	f7ff fa62 	bl	8005b28 <__smakebuf_r>
 8006664:	89a6      	ldrh	r6, [r4, #12]
 8006666:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800666a:	07b3      	lsls	r3, r6, #30
 800666c:	d00f      	beq.n	800668e <__srefill_r+0xae>
 800666e:	2301      	movs	r3, #1
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	4b1e      	ldr	r3, [pc, #120]	; (80066ec <__srefill_r+0x10c>)
 8006674:	491e      	ldr	r1, [pc, #120]	; (80066f0 <__srefill_r+0x110>)
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	f006 0609 	and.w	r6, r6, #9
 800667c:	f7ff f9b0 	bl	80059e0 <_fwalk>
 8006680:	2e09      	cmp	r6, #9
 8006682:	81a7      	strh	r7, [r4, #12]
 8006684:	d103      	bne.n	800668e <__srefill_r+0xae>
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f7fe ffff 	bl	800568c <__sflush_r>
 800668e:	6922      	ldr	r2, [r4, #16]
 8006690:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006692:	6963      	ldr	r3, [r4, #20]
 8006694:	6a21      	ldr	r1, [r4, #32]
 8006696:	6022      	str	r2, [r4, #0]
 8006698:	4628      	mov	r0, r5
 800669a:	47b0      	blx	r6
 800669c:	2800      	cmp	r0, #0
 800669e:	6060      	str	r0, [r4, #4]
 80066a0:	dc1c      	bgt.n	80066dc <__srefill_r+0xfc>
 80066a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a6:	bf17      	itett	ne
 80066a8:	2200      	movne	r2, #0
 80066aa:	f043 0320 	orreq.w	r3, r3, #32
 80066ae:	6062      	strne	r2, [r4, #4]
 80066b0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80066b4:	e7bc      	b.n	8006630 <__srefill_r+0x50>
 80066b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066b8:	2900      	cmp	r1, #0
 80066ba:	d0cd      	beq.n	8006658 <__srefill_r+0x78>
 80066bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066c0:	4299      	cmp	r1, r3
 80066c2:	d002      	beq.n	80066ca <__srefill_r+0xea>
 80066c4:	4628      	mov	r0, r5
 80066c6:	f7ff fa77 	bl	8005bb8 <_free_r>
 80066ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066cc:	6063      	str	r3, [r4, #4]
 80066ce:	2000      	movs	r0, #0
 80066d0:	6360      	str	r0, [r4, #52]	; 0x34
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0c0      	beq.n	8006658 <__srefill_r+0x78>
 80066d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066dc:	2000      	movs	r0, #0
 80066de:	e7fc      	b.n	80066da <__srefill_r+0xfa>
 80066e0:	08006bb8 	.word	0x08006bb8
 80066e4:	08006bd8 	.word	0x08006bd8
 80066e8:	08006b98 	.word	0x08006b98
 80066ec:	08006a90 	.word	0x08006a90
 80066f0:	080065cd 	.word	0x080065cd

080066f4 <_init>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr

08006700 <_fini>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr
