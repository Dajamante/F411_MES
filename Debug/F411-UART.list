
F411-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000641c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aac  08006aac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab4  08006ab4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ab8  08006ab8  00016ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a88  20000070  08006b2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  08006b2c  00020af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012701  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7a  00000000  00000000  000327a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00035520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  000364c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019af3  00000000  00000000  00037328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e76  00000000  00000000  00050e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009be0e  00000000  00000000  00064c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100a9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a08  00000000  00000000  00100af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065a4 	.word	0x080065a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080065a4 	.word	0x080065a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_ADC1_Init+0xa0>)
 8000598:	4a23      	ldr	r2, [pc, #140]	; (8000628 <MX_ADC1_Init+0xa4>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_ADC1_Init+0xa0>)
 800059e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005c2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005d8:	2201      	movs	r2, #1
 80005da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <MX_ADC1_Init+0xa0>)
 80005ec:	f001 fa34 	bl	8001a58 <HAL_ADC_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80005f6:	f000 feff 	bl	80013f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80005fa:	230e      	movs	r3, #14
 80005fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_ADC1_Init+0xa0>)
 800060c:	f001 fbc6 	bl	8001d9c <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000616:	f000 feef 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000008c 	.word	0x2000008c
 8000628:	40012000 	.word	0x40012000

0800062c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <HAL_ADC_MspInit+0xdc>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d157      	bne.n	80006fe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	4a2d      	ldr	r2, [pc, #180]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065c:	6453      	str	r3, [r2, #68]	; 0x44
 800065e:	4b2b      	ldr	r3, [pc, #172]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a26      	ldr	r2, [pc, #152]	; (800070c <HAL_ADC_MspInit+0xe0>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b24      	ldr	r3, [pc, #144]	; (800070c <HAL_ADC_MspInit+0xe0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000686:	2310      	movs	r3, #16
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068a:	2303      	movs	r3, #3
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	481d      	ldr	r0, [pc, #116]	; (8000710 <HAL_ADC_MspInit+0xe4>)
 800069a:	f002 fb21 	bl	8002ce0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <HAL_ADC_MspInit+0xec>)
 80006a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006e4:	f001 ff1c 	bl	8002520 <HAL_DMA_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006ee:	f000 fe83 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006f6:	639a      	str	r2, [r3, #56]	; 0x38
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <HAL_ADC_MspInit+0xe8>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40012000 	.word	0x40012000
 800070c:	40023800 	.word	0x40023800
 8000710:	40020800 	.word	0x40020800
 8000714:	200000d4 	.word	0x200000d4
 8000718:	40026410 	.word	0x40026410

0800071c <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	440b      	add	r3, r1
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	429a      	cmp	r2, r3
 8000740:	d114      	bne.n	800076c <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000742:	2301      	movs	r3, #1
 8000744:	60bb      	str	r3, [r7, #8]
		i++;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3301      	adds	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 800074c:	e00e      	b.n	800076c <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4413      	add	r3, r2
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	440b      	add	r3, r1
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	429a      	cmp	r2, r3
 8000760:	d001      	beq.n	8000766 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3301      	adds	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d11a      	bne.n	80007a8 <ConsoleCommandMatch+0x8c>
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b09      	cmp	r3, #9
 8000776:	d817      	bhi.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000778:	683a      	ldr	r2, [r7, #0]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000780:	2b20      	cmp	r3, #32
 8000782:	d011      	beq.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800078c:	2b0a      	cmp	r3, #10
 800078e:	d00b      	beq.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b0d      	cmp	r3, #13
 800079a:	d005      	beq.n	80007a8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1d2      	bne.n	800074e <ConsoleCommandMatch+0x32>
	}

	return result;
 80007a8:	68bb      	ldr	r3, [r7, #8]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b087      	sub	sp, #28
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	60f8      	str	r0, [r7, #12]
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80007ce:	e00d      	b.n	80007ec <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	441a      	add	r2, r3
 80007d6:	68f9      	ldr	r1, [r7, #12]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	440b      	add	r3, r1
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	701a      	strb	r2, [r3, #0]
		i++;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3ed      	bcc.n	80007d0 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80007f4:	e007      	b.n	8000806 <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	4413      	add	r3, r2
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3301      	adds	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	2bff      	cmp	r3, #255	; 0xff
 800080a:	d9f4      	bls.n	80007f6 <ConsoleResetBuffer+0x40>
	}
	return remaining;
 800080c:	693b      	ldr	r3, [r7, #16]
}
 800080e:	4618      	mov	r0, r3
 8000810:	371c      	adds	r7, #28
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082c:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800082e:	e002      	b.n	8000836 <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3301      	adds	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b0d      	cmp	r3, #13
 8000840:	d009      	beq.n	8000856 <ConsoleCommandEndline+0x3c>
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b0a      	cmp	r3, #10
 800084c:	d003      	beq.n	8000856 <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d3ec      	bcc.n	8000830 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	429a      	cmp	r2, r3
 800085c:	d201      	bcs.n	8000862 <ConsoleCommandEndline+0x48>
	{
		result = i;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000862:	68bb      	ldr	r3, [r7, #8]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000876:	f000 fc17 	bl	80010a8 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to El Consolo, your gateway to testing code and hardware.");
 800087a:	480f      	ldr	r0, [pc, #60]	; (80008b8 <ConsoleInit+0x48>)
 800087c:	f000 fc48 	bl	8001110 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000880:	480e      	ldr	r0, [pc, #56]	; (80008bc <ConsoleInit+0x4c>)
 8000882:	f000 fc45 	bl	8001110 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <ConsoleInit+0x50>)
 8000888:	f000 fc42 	bl	8001110 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <ConsoleInit+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e007      	b.n	80008a8 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <ConsoleInit+0x58>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2bff      	cmp	r3, #255	; 0xff
 80008ac:	d9f4      	bls.n	8000898 <ConsoleInit+0x28>
	}

}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	080065bc 	.word	0x080065bc
 80008bc:	08006600 	.word	0x08006600
 80008c0:	08006604 	.word	0x08006604
 80008c4:	20000234 	.word	0x20000234
 80008c8:	20000134 	.word	0x20000134

080008cc <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80008d2:	4b54      	ldr	r3, [pc, #336]	; (8000a24 <ConsoleProcess+0x158>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a54      	ldr	r2, [pc, #336]	; (8000a28 <ConsoleProcess+0x15c>)
 80008d8:	1898      	adds	r0, r3, r2
 80008da:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <ConsoleProcess+0x158>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80008e2:	463a      	mov	r2, r7
 80008e4:	4619      	mov	r1, r3
 80008e6:	f000 fbe6 	bl	80010b6 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <ConsoleProcess+0x2e>
 80008f0:	4b4e      	ldr	r3, [pc, #312]	; (8000a2c <ConsoleProcess+0x160>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 8091 	beq.w	8000a1c <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 80008fa:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <ConsoleProcess+0x160>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000900:	4b48      	ldr	r3, [pc, #288]	; (8000a24 <ConsoleProcess+0x158>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a46      	ldr	r2, [pc, #280]	; (8000a24 <ConsoleProcess+0x158>)
 800090a:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 800090c:	4b45      	ldr	r3, [pc, #276]	; (8000a24 <ConsoleProcess+0x158>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	4845      	ldr	r0, [pc, #276]	; (8000a28 <ConsoleProcess+0x15c>)
 8000914:	f7ff ff81 	bl	800081a <ConsoleCommandEndline>
 8000918:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db7d      	blt.n	8000a1c <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000920:	f000 fb7e 	bl	8001020 <ConsoleCommandsGetTable>
 8000924:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800092e:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000930:	e03d      	b.n	80009ae <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	4613      	mov	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	4413      	add	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	461a      	mov	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4938      	ldr	r1, [pc, #224]	; (8000a28 <ConsoleProcess+0x15c>)
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fee8 	bl	800071c <ConsoleCommandMatch>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d02a      	beq.n	80009a8 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4613      	mov	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	461a      	mov	r2, r3
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4413      	add	r3, r2
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4830      	ldr	r0, [pc, #192]	; (8000a28 <ConsoleProcess+0x15c>)
 8000966:	4798      	blx	r3
 8000968:	4603      	mov	r3, r0
 800096a:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d017      	beq.n	80009a2 <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 8000972:	482f      	ldr	r0, [pc, #188]	; (8000a30 <ConsoleProcess+0x164>)
 8000974:	f000 fbcc 	bl	8001110 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 8000978:	482b      	ldr	r0, [pc, #172]	; (8000a28 <ConsoleProcess+0x15c>)
 800097a:	f000 fbc9 	bl	8001110 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800097e:	482d      	ldr	r0, [pc, #180]	; (8000a34 <ConsoleProcess+0x168>)
 8000980:	f000 fbc6 	bl	8001110 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	4613      	mov	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	4413      	add	r3, r2
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	461a      	mov	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4413      	add	r3, r2
 8000994:	3308      	adds	r3, #8
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fbba 	bl	8001110 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 800099c:	4826      	ldr	r0, [pc, #152]	; (8000a38 <ConsoleProcess+0x16c>)
 800099e:	f000 fbb7 	bl	8001110 <ConsoleIoSendString>

					}
					found = cmdIndex;
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	e002      	b.n	80009ae <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3301      	adds	r3, #1
 80009ac:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	4613      	mov	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	4413      	add	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	461a      	mov	r2, r3
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <ConsoleProcess+0x100>
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009ca:	d0b2      	beq.n	8000932 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00d      	beq.n	80009ee <ConsoleProcess+0x122>
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009d8:	d109      	bne.n	80009ee <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <ConsoleProcess+0x158>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d905      	bls.n	80009ee <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 80009e2:	4816      	ldr	r0, [pc, #88]	; (8000a3c <ConsoleProcess+0x170>)
 80009e4:	f000 fb94 	bl	8001110 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <ConsoleProcess+0x16c>)
 80009ea:	f000 fb91 	bl	8001110 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <ConsoleProcess+0x158>)
 80009f0:	6819      	ldr	r1, [r3, #0]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	461a      	mov	r2, r3
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <ConsoleProcess+0x15c>)
 80009fa:	f7ff fedc 	bl	80007b6 <ConsoleResetBuffer>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <ConsoleProcess+0x158>)
 8000a02:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <ConsoleProcess+0x158>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf14      	ite	ne
 8000a0c:	2301      	movne	r3, #1
 8000a0e:	2300      	moveq	r3, #0
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <ConsoleProcess+0x160>)
 8000a14:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000a16:	480a      	ldr	r0, [pc, #40]	; (8000a40 <ConsoleProcess+0x174>)
 8000a18:	f000 fb7a 	bl	8001110 <ConsoleIoSendString>
		}
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000234 	.word	0x20000234
 8000a28:	20000134 	.word	0x20000134
 8000a2c:	20000238 	.word	0x20000238
 8000a30:	08006608 	.word	0x08006608
 8000a34:	08006610 	.word	0x08006610
 8000a38:	08006600 	.word	0x08006600
 8000a3c:	08006618 	.word	0x08006618
 8000a40:	08006604 	.word	0x08006604

08000a44 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000a5e:	e00b      	b.n	8000a78 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b20      	cmp	r3, #32
 8000a6a:	d102      	bne.n	8000a72 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000a78:	7afb      	ldrb	r3, [r7, #11]
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d002      	beq.n	8000a86 <ConsoleParamFindN+0x42>
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	2bff      	cmp	r3, #255	; 0xff
 8000a84:	d9ec      	bls.n	8000a60 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a8c:	d102      	bne.n	8000a94 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	75fb      	strb	r3, [r7, #23]
 8000a92:	e002      	b.n	8000a9a <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3724      	adds	r7, #36	; 0x24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000aba:	f107 021c 	add.w	r2, r7, #28
 8000abe:	7afb      	ldrb	r3, [r7, #11]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f7ff ffbe 	bl	8000a44 <ConsoleParamFindN>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	4413      	add	r3, r2
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000ae2:	e011      	b.n	8000b08 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000ae4:	f107 0214 	add.w	r2, r7, #20
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	4413      	add	r3, r2
 8000aec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000af0:	701a      	strb	r2, [r3, #0]
		i++;
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	3301      	adds	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000af8:	69fa      	ldr	r2, [r7, #28]
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	4413      	add	r3, r2
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000b08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b0c:	2b0a      	cmp	r3, #10
 8000b0e:	d00a      	beq.n	8000b26 <ConsoleReceiveParamInt16+0x7e>
 8000b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b14:	2b0d      	cmp	r3, #13
 8000b16:	d006      	beq.n	8000b26 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000b18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b1c:	2b20      	cmp	r3, #32
 8000b1e:	d002      	beq.n	8000b26 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	d9de      	bls.n	8000ae4 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d102      	bne.n	8000b32 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10e      	bne.n	8000b58 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 8000b3a:	f107 0214 	add.w	r2, r7, #20
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	4413      	add	r3, r2
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 fa6e 	bl	800502c <atoi>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000b58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000b7a:	f107 0218 	add.w	r2, r7, #24
 8000b7e:	7afb      	ldrb	r3, [r7, #11]
 8000b80:	4619      	mov	r1, r3
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff ff5e 	bl	8000a44 <ConsoleParamFindN>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000b8c:	7ffb      	ldrb	r3, [r7, #31]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d12c      	bne.n	8000bec <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
 8000b96:	e01e      	b.n	8000bd6 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000b98:	7ffb      	ldrb	r3, [r7, #31]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10d      	bne.n	8000bba <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	f107 0217 	add.w	r2, r7, #23
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f8c5 	bl	8000d40 <ConsoleUtilHexCharToInt>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000bba:	7ffb      	ldrb	r3, [r7, #31]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d107      	bne.n	8000bd0 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000bc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bcc:	4413      	add	r3, r2
 8000bce:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d9dd      	bls.n	8000b98 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000bdc:	7ffb      	ldrb	r3, [r7, #31]
 8000bde:	2b11      	cmp	r3, #17
 8000be0:	d101      	bne.n	8000be6 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000be2:	2300      	movs	r3, #0
 8000be4:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000bea:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c00:	2300      	movs	r3, #0
 8000c02:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e01b      	b.n	8000c42 <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000c0a:	7cfb      	ldrb	r3, [r7, #19]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d115      	bne.n	8000c3c <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000c10:	88fa      	ldrh	r2, [r7, #6]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f1c3 0303 	rsb	r3, r3, #3
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	fa42 f303 	asr.w	r3, r2, r3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	f003 030f 	and.w	r3, r3, #15
 8000c24:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000c26:	f107 020c 	add.w	r2, r7, #12
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	441a      	add	r2, r3
 8000c2e:	7cbb      	ldrb	r3, [r7, #18]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f8c5 	bl	8000dc2 <ConsoleUtilsIntToHexChar>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d9e0      	bls.n	8000c0a <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000c48:	f107 020c 	add.w	r2, r7, #12
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4413      	add	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fa59 	bl	8001110 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000c74:	2300      	movs	r3, #0
 8000c76:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da07      	bge.n	8000c92 <smallItoa+0x2a>
		isNegative = true;
 8000c82:	2301      	movs	r3, #1
 8000c84:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	425b      	negs	r3, r3
 8000c8a:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000c96:	e007      	b.n	8000ca8 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ca0:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f1      	bne.n	8000c98 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	4413      	add	r3, r2
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	fb93 f2f2 	sdiv	r2, r3, r2
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	fb01 f202 	mul.w	r2, r1, r2
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	440b      	add	r3, r1
 8000ce0:	3230      	adds	r2, #48	; 0x30
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cee:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	617a      	str	r2, [r7, #20]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1e6      	bne.n	8000cc8 <smallItoa+0x60>

	if (isNegative) {
 8000cfa:	7ffb      	ldrb	r3, [r7, #31]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	222d      	movs	r2, #45	; 0x2d
 8000d04:	701a      	strb	r2, [r3, #0]
	}
}
 8000d06:	bf00      	nop
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	f107 0108 	add.w	r1, r7, #8
 8000d24:	220a      	movs	r2, #10
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff9e 	bl	8000c68 <smallItoa>
	ConsoleIoSendString(out);
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f9ed 	bl	8001110 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b2f      	cmp	r3, #47	; 0x2f
 8000d54:	d908      	bls.n	8000d68 <ConsoleUtilHexCharToInt+0x28>
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b39      	cmp	r3, #57	; 0x39
 8000d5a:	d805      	bhi.n	8000d68 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	3b30      	subs	r3, #48	; 0x30
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e025      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b40      	cmp	r3, #64	; 0x40
 8000d6c:	d908      	bls.n	8000d80 <ConsoleUtilHexCharToInt+0x40>
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b46      	cmp	r3, #70	; 0x46
 8000d72:	d805      	bhi.n	8000d80 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	3b37      	subs	r3, #55	; 0x37
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e019      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b60      	cmp	r3, #96	; 0x60
 8000d84:	d908      	bls.n	8000d98 <ConsoleUtilHexCharToInt+0x58>
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b66      	cmp	r3, #102	; 0x66
 8000d8a:	d805      	bhi.n	8000d98 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	3b57      	subs	r3, #87	; 0x57
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e00d      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b0a      	cmp	r3, #10
 8000d9c:	d105      	bne.n	8000daa <ConsoleUtilHexCharToInt+0x6a>
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b0d      	cmp	r3, #13
 8000da2:	d102      	bne.n	8000daa <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b20      	cmp	r3, #32
 8000da8:	d102      	bne.n	8000db0 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000daa:	2311      	movs	r3, #17
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e001      	b.n	8000db4 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000db0:	2310      	movs	r3, #16
 8000db2:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	6039      	str	r1, [r7, #0]
 8000dcc:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b09      	cmp	r3, #9
 8000dd6:	d805      	bhi.n	8000de4 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	3330      	adds	r3, #48	; 0x30
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e00d      	b.n	8000e00 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b09      	cmp	r3, #9
 8000de8:	d908      	bls.n	8000dfc <ConsoleUtilsIntToHexChar+0x3a>
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d805      	bhi.n	8000dfc <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	3337      	adds	r3, #55	; 0x37
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	e001      	b.n	8000e00 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <ConsoleCommandComment>:
	{"sadc", &ConsoleCommandDumpMic, HELP("Stopping the ADC mic")},
	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000e30:	2308      	movs	r3, #8
 8000e32:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e01e      	b.n	8000e78 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000e3a:	4914      	ldr	r1, [pc, #80]	; (8000e8c <ConsoleCommandHelp+0x68>)
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f960 	bl	8001110 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <ConsoleCommandHelp+0x6c>)
 8000e52:	f000 f95d 	bl	8001110 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	3308      	adds	r3, #8
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <ConsoleCommandHelp+0x68>)
 8000e64:	4413      	add	r3, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f952 	bl	8001110 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <ConsoleCommandHelp+0x70>)
 8000e6e:	f000 f94f 	bl	8001110 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3db      	bcc.n	8000e3a <ConsoleCommandHelp+0x16>
	}
	return result;
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	080066b0 	.word	0x080066b0
 8000e90:	08006654 	.word	0x08006654
 8000e94:	08006658 	.word	0x08006658

08000e98 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fdfd 	bl	8000aa8 <ConsoleReceiveParamInt16>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d116      	bne.n	8000ee6 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <ConsoleCommandParamExampleInt16+0x58>)
 8000eba:	f000 f929 	bl	8001110 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000ebe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff25 	bl	8000d12 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000ec8:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <ConsoleCommandParamExampleInt16+0x5c>)
 8000eca:	f000 f921 	bl	8001110 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000ece:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe8e 	bl	8000bf6 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <ConsoleCommandParamExampleInt16+0x60>)
 8000edc:	f000 f918 	bl	8001110 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <ConsoleCommandParamExampleInt16+0x64>)
 8000ee2:	f000 f915 	bl	8001110 <ConsoleIoSendString>
	}
	return result;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	0800665c 	.word	0x0800665c
 8000ef4:	0800666c 	.word	0x0800666c
 8000ef8:	08006674 	.word	0x08006674
 8000efc:	08006658 	.word	0x08006658

08000f00 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2101      	movs	r1, #1
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fe27 	bl	8000b64 <ConsoleReceiveParamHexUint16>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000f22:	f000 f8f5 	bl	8001110 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000f26:	89bb      	ldrh	r3, [r7, #12]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe64 	bl	8000bf6 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000f30:	f000 f8ee 	bl	8001110 <ConsoleIoSendString>
	}
	return result;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08006678 	.word	0x08006678
 8000f44:	08006658 	.word	0x08006658

08000f48 <ConsoleCommandStartMic>:


static eCommandResult_T ConsoleCommandStartMic(const char buffer[]){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result;
    IGNORE_UNUSED_VARIABLE(buffer);
	if(COMMAND_SUCCESS == result){
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d108      	bne.n	8000f68 <ConsoleCommandStartMic+0x20>

		HAL_TIM_Base_Start(&htim3);
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <ConsoleCommandStartMic+0x2c>)
 8000f58:	f002 fd52 	bl	8003a00 <HAL_TIM_Base_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcBuf, ADCBUFLEN);
 8000f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f60:	4905      	ldr	r1, [pc, #20]	; (8000f78 <ConsoleCommandStartMic+0x30>)
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <ConsoleCommandStartMic+0x34>)
 8000f64:	f000 fdbc 	bl	8001ae0 <HAL_ADC_Start_DMA>

	}

	return result;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000a58 	.word	0x20000a58
 8000f78:	2000023c 	.word	0x2000023c
 8000f7c:	2000008c 	.word	0x2000008c

08000f80 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < ADCBUFLEN; i++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e00d      	b.n	8000faa <HAL_ADC_ConvCpltCallback+0x2a>
			//ConsoleIoSendString("ADC is: ");
			ConsoleSendParamInt16(adcBuf[i]);
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff feba 	bl	8000d12 <ConsoleSendParamInt16>
			ConsoleIoSendString(" ");
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <HAL_ADC_ConvCpltCallback+0x4c>)
 8000fa0:	f000 f8b6 	bl	8001110 <ConsoleIoSendString>
	for(int i = 0; i < ADCBUFLEN; i++){
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fb0:	dbed      	blt.n	8000f8e <HAL_ADC_ConvCpltCallback+0xe>
		}
	HAL_ADC_Stop_DMA(&hadc1);
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <HAL_ADC_ConvCpltCallback+0x50>)
 8000fb4:	f000 fe84 	bl	8001cc0 <HAL_ADC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim3);
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000fba:	f002 fd7b 	bl	8003ab4 <HAL_TIM_Base_Stop>

}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000023c 	.word	0x2000023c
 8000fcc:	08006688 	.word	0x08006688
 8000fd0:	2000008c 	.word	0x2000008c
 8000fd4:	20000a58 	.word	0x20000a58

08000fd8 <ConsoleCommandDumpMic>:
static eCommandResult_T ConsoleCommandDumpMic(const char buffer[]){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    IGNORE_UNUSED_VARIABLE(buffer);

	HAL_ADC_Stop_DMA(&hadc1);
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <ConsoleCommandDumpMic+0x18>)
 8000fe2:	f000 fe6d 	bl	8001cc0 <HAL_ADC_Stop_DMA>

	return COMMAND_SUCCESS;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000008c 	.word	0x2000008c

08000ff4 <ConsoleCommandVer>:


static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <ConsoleCommandVer+0x24>)
 8001002:	f000 f885 	bl	8001110 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <ConsoleCommandVer+0x28>)
 8001008:	f000 f882 	bl	8001110 <ConsoleIoSendString>
	return result;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	0800668c 	.word	0x0800668c
 800101c:	08006658 	.word	0x08006658

08001020 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <ConsoleCommandsGetTable+0x10>)
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	080066b0 	.word	0x080066b0

08001034 <_read>:
#include <string.h>
#include <stdlib.h>

// Retargetting write and read:

int _read(int file, char *result, size_t len){
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;

	int retcode = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

	if (len != 0){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d012      	beq.n	8001070 <_read+0x3c>
		status = HAL_UART_Receive(&huart2, (uint8_t *) result, len, HAL_MAX_DELAY);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <_read+0x48>)
 8001056:	f003 fc64 	bl	8004922 <HAL_UART_Receive>
 800105a:	4603      	mov	r3, r0
 800105c:	74fb      	strb	r3, [r7, #19]

		if (status == HAL_OK){
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_read+0x36>

			retcode = len;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e002      	b.n	8001070 <_read+0x3c>
		} else {
			retcode = -1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800106e:	617b      	str	r3, [r7, #20]
		}
	}

	return retcode;
 8001070:	697b      	ldr	r3, [r7, #20]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000aa0 	.word	0x20000aa0

08001080 <_write>:

int _write(int file, char *outgoing, int len){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) outgoing, len, 100);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	b29a      	uxth	r2, r3
 8001090:	2364      	movs	r3, #100	; 0x64
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <_write+0x24>)
 8001096:	f003 fbb2 	bl	80047fe <HAL_UART_Transmit>
	return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000aa0 	.word	0x20000aa0

080010a8 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 80010ac:	f000 fbc6 	bl	800183c <MX_USART2_UART_Init>
	return CONSOLE_SUCCESS;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <ConsoleIoReceive>:
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
    uint32_t i = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
    char ch;

    ch = getchar();
 80010c6:	f003 ffbb 	bl	8005040 <getchar>
 80010ca:	4603      	mov	r3, r0
 80010cc:	74fb      	strb	r3, [r7, #19]
    while ( ( '\n' != ch ) && ( i < bufferLength ) )
 80010ce:	e00f      	b.n	80010f0 <ConsoleIoReceive+0x3a>
    {
        buffer[i] = (uint8_t) ch;
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4413      	add	r3, r2
 80010d6:	7cfa      	ldrb	r2, [r7, #19]
 80010d8:	701a      	strb	r2, [r3, #0]
        i++;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
        printf("%c", ch);
 80010e0:	7cfb      	ldrb	r3, [r7, #19]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 f802 	bl	80050ec <putchar>
        ch = getchar();
 80010e8:	f003 ffaa 	bl	8005040 <getchar>
 80010ec:	4603      	mov	r3, r0
 80010ee:	74fb      	strb	r3, [r7, #19]
    while ( ( '\n' != ch ) && ( i < bufferLength ) )
 80010f0:	7cfb      	ldrb	r3, [r7, #19]
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d003      	beq.n	80010fe <ConsoleIoReceive+0x48>
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d3e8      	bcc.n	80010d0 <ConsoleIoReceive+0x1a>
    }
    *readLength = i;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	601a      	str	r2, [r3, #0]
    return CONSOLE_SUCCESS;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <ConsoleIoSendString+0x1c>)
 800111c:	f003 ffce 	bl	80050bc <iprintf>
	return CONSOLE_SUCCESS;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	080066a4 	.word	0x080066a4

08001130 <print_counter>:

eConsoleError print_counter(){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	printf("Hello");
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <print_counter+0x10>)
 8001136:	f003 ffc1 	bl	80050bc <iprintf>
	return CONSOLE_SUCCESS;
 800113a:	2300      	movs	r3, #0

}
 800113c:	4618      	mov	r0, r3
 800113e:	bd80      	pop	{r7, pc}
 8001140:	080066a8 	.word	0x080066a8

08001144 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_pin == BUTTON_Pin){
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10d      	bne.n	8001170 <HAL_GPIO_EXTI_Callback+0x2c>
		//int val = (int) HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
		//printf("Val %d\n", val);
		if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 1){
 8001154:	2101      	movs	r1, #1
 8001156:	4808      	ldr	r0, [pc, #32]	; (8001178 <HAL_GPIO_EXTI_Callback+0x34>)
 8001158:	f001 ff46 	bl	8002fe8 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b01      	cmp	r3, #1
 8001160:	d106      	bne.n	8001170 <HAL_GPIO_EXTI_Callback+0x2c>
			HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 8001162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_GPIO_EXTI_Callback+0x38>)
 8001168:	f001 ff6f 	bl	800304a <HAL_GPIO_TogglePin>
			print_counter();
 800116c:	f7ff ffe0 	bl	8001130 <print_counter>
		}
	}
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40020000 	.word	0x40020000
 800117c:	40020c00 	.word	0x40020c00

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_DMA_Init+0x3c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <MX_DMA_Init+0x3c>)
 8001190:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_DMA_Init+0x3c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2038      	movs	r0, #56	; 0x38
 80011a8:	f001 f983 	bl	80024b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011ac:	2038      	movs	r0, #56	; 0x38
 80011ae:	f001 f99c 	bl	80024ea <HAL_NVIC_EnableIRQ>

}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800

080011c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <MX_GPIO_Init+0x100>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a38      	ldr	r2, [pc, #224]	; (80012c0 <MX_GPIO_Init+0x100>)
 80011e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <MX_GPIO_Init+0x100>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b32      	ldr	r3, [pc, #200]	; (80012c0 <MX_GPIO_Init+0x100>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a31      	ldr	r2, [pc, #196]	; (80012c0 <MX_GPIO_Init+0x100>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <MX_GPIO_Init+0x100>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <MX_GPIO_Init+0x100>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a2a      	ldr	r2, [pc, #168]	; (80012c0 <MX_GPIO_Init+0x100>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <MX_GPIO_Init+0x100>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <MX_GPIO_Init+0x100>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <MX_GPIO_Init+0x100>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_GPIO_Init+0x100>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_GPIO_Init+0x100>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <MX_GPIO_Init+0x100>)
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_GPIO_Init+0x100>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001268:	4816      	ldr	r0, [pc, #88]	; (80012c4 <MX_GPIO_Init+0x104>)
 800126a:	f001 fed5 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800126e:	2301      	movs	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001272:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4811      	ldr	r0, [pc, #68]	; (80012c8 <MX_GPIO_Init+0x108>)
 8001284:	f001 fd2c 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <MX_GPIO_Init+0x104>)
 80012a2:	f001 fd1d 	bl	8002ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2006      	movs	r0, #6
 80012ac:	f001 f901 	bl	80024b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012b0:	2006      	movs	r0, #6
 80012b2:	f001 f91a 	bl	80024ea <HAL_NVIC_EnableIRQ>

}
 80012b6:	bf00      	nop
 80012b8:	3728      	adds	r7, #40	; 0x28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40020000 	.word	0x40020000

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d0:	f000 fb50 	bl	8001974 <HAL_Init>

  /* USER CODE BEGIN Init */
  ConsoleInit();
 80012d4:	f7ff facc 	bl	8000870 <ConsoleInit>
  // Sets the read buf to zero to not wait indefinitely
  setvbuf(stdin, NULL, _IONBF, 0);
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <main+0x54>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6858      	ldr	r0, [r3, #4]
 80012de:	2300      	movs	r3, #0
 80012e0:	2202      	movs	r2, #2
 80012e2:	2100      	movs	r1, #0
 80012e4:	f003 ff18 	bl	8005118 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f81e 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f7ff ff68 	bl	80011c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012f0:	f7ff ff46 	bl	8001180 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012f4:	f000 faa2 	bl	800183c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80012f8:	f7ff f944 	bl	8000584 <MX_ADC1_Init>
  MX_TIM2_Init();
 80012fc:	f000 f96e 	bl	80015dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001300:	f000 f9e0 	bl	80016c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <main+0x58>)
 8001306:	f002 fbfd 	bl	8003b04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800130a:	2108      	movs	r1, #8
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <main+0x58>)
 800130e:	f002 fcb5 	bl	8003c7c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 2);
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <main+0x58>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2202      	movs	r2, #2
 8001318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     ConsoleProcess();
 800131a:	f7ff fad7 	bl	80008cc <ConsoleProcess>
 800131e:	e7fc      	b.n	800131a <main+0x4e>
 8001320:	2000000c 	.word	0x2000000c
 8001324:	20000a10 	.word	0x20000a10

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	; 0x50
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	2230      	movs	r2, #48	; 0x30
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f003 feb8 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <SystemClock_Config+0xc8>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <SystemClock_Config+0xc8>)
 8001356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <SystemClock_Config+0xc8>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <SystemClock_Config+0xcc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <SystemClock_Config+0xcc>)
 8001372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <SystemClock_Config+0xcc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001384:	2302      	movs	r3, #2
 8001386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138c:	2310      	movs	r3, #16
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001390:	2302      	movs	r3, #2
 8001392:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001394:	2300      	movs	r3, #0
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001398:	2308      	movs	r3, #8
 800139a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800139c:	2350      	movs	r3, #80	; 0x50
 800139e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a8:	f107 0320 	add.w	r3, r7, #32
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fe7f 	bl	80030b0 <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013b8:	f000 f81e 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013bc:	230f      	movs	r3, #15
 80013be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c0:	2302      	movs	r3, #2
 80013c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2102      	movs	r1, #2
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 f8e1 	bl	80035a0 <HAL_RCC_ClockConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013e4:	f000 f808 	bl	80013f8 <Error_Handler>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3750      	adds	r7, #80	; 0x50
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40007000 	.word	0x40007000

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>
	...

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_MspInit+0x58>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_MspInit+0x58>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_MspInit+0x58>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_MspInit+0x58>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_MspInit+0x58>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x58>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2005      	movs	r0, #5
 8001448:	f001 f833 	bl	80024b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800144c:	2005      	movs	r0, #5
 800144e:	f001 f84c 	bl	80024ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ac:	f000 fab4 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f001 fdda 	bl	8003080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <DMA2_Stream0_IRQHandler+0x10>)
 80014d6:	f001 f999 	bl	800280c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000d4 	.word	0x200000d4

080014e4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	return -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150c:	605a      	str	r2, [r3, #4]
	return 0;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_isatty>:

int _isatty(int file)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
	return 0;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f003 fd5a 	bl	8005034 <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20020000 	.word	0x20020000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	20000a0c 	.word	0x20000a0c
 80015b4:	20000af8 	.word	0x20000af8

080015b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	; 0x38
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	615a      	str	r2, [r3, #20]
 800160a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800160c:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <MX_TIM2_Init+0xe4>)
 800160e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10 -1 ;
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <MX_TIM2_Init+0xe4>)
 8001616:	2209      	movs	r2, #9
 8001618:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <MX_TIM2_Init+0xe4>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4-1;
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <MX_TIM2_Init+0xe4>)
 8001622:	2203      	movs	r2, #3
 8001624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_TIM2_Init+0xe4>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <MX_TIM2_Init+0xe4>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001632:	4823      	ldr	r0, [pc, #140]	; (80016c0 <MX_TIM2_Init+0xe4>)
 8001634:	f002 f994 	bl	8003960 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800163e:	f7ff fedb 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164c:	4619      	mov	r1, r3
 800164e:	481c      	ldr	r0, [pc, #112]	; (80016c0 <MX_TIM2_Init+0xe4>)
 8001650:	f002 fc86 	bl	8003f60 <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800165a:	f7ff fecd 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800165e:	4818      	ldr	r0, [pc, #96]	; (80016c0 <MX_TIM2_Init+0xe4>)
 8001660:	f002 fab2 	bl	8003bc8 <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800166a:	f7ff fec5 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	4619      	mov	r1, r3
 800167c:	4810      	ldr	r0, [pc, #64]	; (80016c0 <MX_TIM2_Init+0xe4>)
 800167e:	f003 f803 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001688:	f7ff feb6 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168c:	2360      	movs	r3, #96	; 0x60
 800168e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2208      	movs	r2, #8
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <MX_TIM2_Init+0xe4>)
 80016a4:	f002 fb9a 	bl	8003ddc <HAL_TIM_PWM_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80016ae:	f7ff fea3 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <MX_TIM2_Init+0xe4>)
 80016b4:	f000 f88a 	bl	80017cc <HAL_TIM_MspPostInit>

}
 80016b8:	bf00      	nop
 80016ba:	3738      	adds	r7, #56	; 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000a10 	.word	0x20000a10

080016c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_TIM3_Init+0x94>)
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <MX_TIM3_Init+0x98>)
 80016e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_TIM3_Init+0x94>)
 80016e8:	224f      	movs	r2, #79	; 0x4f
 80016ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_TIM3_Init+0x94>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_TIM3_Init+0x94>)
 80016f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_TIM3_Init+0x94>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_TIM3_Init+0x94>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001706:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_TIM3_Init+0x94>)
 8001708:	f002 f92a 	bl	8003960 <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001712:	f7ff fe71 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_TIM3_Init+0x94>)
 8001724:	f002 fc1c 	bl	8003f60 <HAL_TIM_ConfigClockSource>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800172e:	f7ff fe63 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001732:	2320      	movs	r3, #32
 8001734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_TIM3_Init+0x94>)
 8001740:	f002 ffa2 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800174a:	f7ff fe55 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000a58 	.word	0x20000a58
 800175c:	40000400 	.word	0x40000400

08001760 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001770:	d10e      	bne.n	8001790 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_TIM_Base_MspInit+0x64>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_TIM_Base_MspInit+0x64>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_TIM_Base_MspInit+0x64>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800178e:	e012      	b.n	80017b6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <HAL_TIM_Base_MspInit+0x68>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d10d      	bne.n	80017b6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_TIM_Base_MspInit+0x64>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_TIM_Base_MspInit+0x64>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_TIM_Base_MspInit+0x64>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40000400 	.word	0x40000400

080017cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ec:	d11e      	bne.n	800182c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_TIM_MspPostInit+0x68>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <HAL_TIM_MspPostInit+0x68>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_TIM_MspPostInit+0x68>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800180a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800181c:	2301      	movs	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4619      	mov	r1, r3
 8001826:	4804      	ldr	r0, [pc, #16]	; (8001838 <HAL_TIM_MspPostInit+0x6c>)
 8001828:	f001 fa5a 	bl	8002ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400

0800183c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_USART2_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001874:	f002 ff76 	bl	8004764 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f7ff fdbb 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000aa0 	.word	0x20000aa0
 800188c:	40004400 	.word	0x40004400

08001890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_UART_MspInit+0x84>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12b      	bne.n	800190a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ea:	230c      	movs	r3, #12
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fa:	2307      	movs	r3, #7
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <HAL_UART_MspInit+0x8c>)
 8001906:	f001 f9eb 	bl	8002ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40004400 	.word	0x40004400
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001926:	490e      	ldr	r1, [pc, #56]	; (8001960 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001928:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800193c:	4c0b      	ldr	r4, [pc, #44]	; (800196c <LoopFillZerobss+0x26>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800194a:	f7ff fe35 	bl	80015b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194e:	f003 fb89 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff fcbb 	bl	80012cc <main>
  bx  lr    
 8001956:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001964:	08006abc 	.word	0x08006abc
  ldr r2, =_sbss
 8001968:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800196c:	20000af8 	.word	0x20000af8

08001970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_Init+0x40>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_Init+0x40>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x40>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 fd7d 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	200f      	movs	r0, #15
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fd2c 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fd95 	bl	8002506 <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f4:	f000 fd5d 	bl	80024b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000ae4 	.word	0x20000ae4

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000ae4 	.word	0x20000ae4

08001a58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e033      	b.n	8001ad6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe fdd8 	bl	800062c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d118      	bne.n	8001ac8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a9e:	f023 0302 	bic.w	r3, r3, #2
 8001aa2:	f043 0202 	orr.w	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 faa8 	bl	8002000 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac6:	e001      	b.n	8001acc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_Start_DMA+0x1e>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e0ce      	b.n	8001c9c <HAL_ADC_Start_DMA+0x1bc>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d018      	beq.n	8001b46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b24:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <HAL_ADC_Start_DMA+0x1c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a5f      	ldr	r2, [pc, #380]	; (8001ca8 <HAL_ADC_Start_DMA+0x1c8>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0c9a      	lsrs	r2, r3, #18
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b38:	e002      	b.n	8001b40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f9      	bne.n	8001b3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b54:	d107      	bne.n	8001b66 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b64:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	f040 8086 	bne.w	8001c82 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ba0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb4:	d106      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f023 0206 	bic.w	r2, r3, #6
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8001bc2:	e002      	b.n	8001bca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bd2:	4b36      	ldr	r3, [pc, #216]	; (8001cac <HAL_ADC_Start_DMA+0x1cc>)
 8001bd4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bda:	4a35      	ldr	r2, [pc, #212]	; (8001cb0 <HAL_ADC_Start_DMA+0x1d0>)
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	4a34      	ldr	r2, [pc, #208]	; (8001cb4 <HAL_ADC_Start_DMA+0x1d4>)
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	4a33      	ldr	r2, [pc, #204]	; (8001cb8 <HAL_ADC_Start_DMA+0x1d8>)
 8001bec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c06:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c16:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	334c      	adds	r3, #76	; 0x4c
 8001c22:	4619      	mov	r1, r3
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f000 fd28 	bl	800267c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10f      	bne.n	8001c58 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d129      	bne.n	8001c9a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	e020      	b.n	8001c9a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <HAL_ADC_Start_DMA+0x1dc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d11b      	bne.n	8001c9a <HAL_ADC_Start_DMA+0x1ba>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d114      	bne.n	8001c9a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	e00b      	b.n	8001c9a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f043 0210 	orr.w	r2, r3, #16
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	080021f9 	.word	0x080021f9
 8001cb4:	080022b3 	.word	0x080022b3
 8001cb8:	080022cf 	.word	0x080022cf
 8001cbc:	40012000 	.word	0x40012000

08001cc0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_Stop_DMA+0x1a>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e048      	b.n	8001d6c <HAL_ADC_Stop_DMA+0xac>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d130      	bne.n	8001d62 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d0e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d10f      	bne.n	8001d3e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fd02 	bl	800272c <HAL_DMA_Abort>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d4c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x1c>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e113      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x244>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b09      	cmp	r3, #9
 8001dc6:	d925      	bls.n	8001e14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68d9      	ldr	r1, [r3, #12]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b1e      	subs	r3, #30
 8001dde:	2207      	movs	r2, #7
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43da      	mvns	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	400a      	ands	r2, r1
 8001dec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68d9      	ldr	r1, [r3, #12]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	4603      	mov	r3, r0
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4403      	add	r3, r0
 8001e06:	3b1e      	subs	r3, #30
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	e022      	b.n	8001e5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6919      	ldr	r1, [r3, #16]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	2207      	movs	r2, #7
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	400a      	ands	r2, r1
 8001e36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6919      	ldr	r1, [r3, #16]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4403      	add	r3, r0
 8001e50:	409a      	lsls	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d824      	bhi.n	8001eac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	3b05      	subs	r3, #5
 8001e74:	221f      	movs	r2, #31
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	400a      	ands	r2, r1
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b05      	subs	r3, #5
 8001e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eaa:	e04c      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	d824      	bhi.n	8001efe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b23      	subs	r3, #35	; 0x23
 8001ec6:	221f      	movs	r2, #31
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b23      	subs	r3, #35	; 0x23
 8001ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
 8001efc:	e023      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b41      	subs	r3, #65	; 0x41
 8001f10:	221f      	movs	r2, #31
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	3b41      	subs	r3, #65	; 0x41
 8001f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f46:	4b29      	ldr	r3, [pc, #164]	; (8001fec <HAL_ADC_ConfigChannel+0x250>)
 8001f48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <HAL_ADC_ConfigChannel+0x254>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10f      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1d8>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b12      	cmp	r3, #18
 8001f5a:	d10b      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_ADC_ConfigChannel+0x254>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d12b      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x23a>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1c      	ldr	r2, [pc, #112]	; (8001ff4 <HAL_ADC_ConfigChannel+0x258>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d003      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x1f4>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b11      	cmp	r3, #17
 8001f8e:	d122      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_ADC_ConfigChannel+0x258>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d111      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_ADC_ConfigChannel+0x25c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <HAL_ADC_ConfigChannel+0x260>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	0c9a      	lsrs	r2, r3, #18
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f9      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40012300 	.word	0x40012300
 8001ff0:	40012000 	.word	0x40012000
 8001ff4:	10000012 	.word	0x10000012
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	431bde83 	.word	0x431bde83

08002000 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002008:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <ADC_Init+0x1f0>)
 800200a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	431a      	orrs	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	021a      	lsls	r2, r3, #8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002058:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800207a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <ADC_Init+0x1f4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d022      	beq.n	80020de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6899      	ldr	r1, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	e00f      	b.n	80020fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0202 	bic.w	r2, r2, #2
 800210c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7e1b      	ldrb	r3, [r3, #24]
 8002118:	005a      	lsls	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01b      	beq.n	8002164 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800213a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800214a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	3b01      	subs	r3, #1
 8002158:	035a      	lsls	r2, r3, #13
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	e007      	b.n	8002174 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002172:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	3b01      	subs	r3, #1
 8002190:	051a      	lsls	r2, r3, #20
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6899      	ldr	r1, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b6:	025a      	lsls	r2, r3, #9
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6899      	ldr	r1, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	029a      	lsls	r2, r3, #10
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40012300 	.word	0x40012300
 80021f4:	0f000001 	.word	0x0f000001

080021f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800220e:	2b00      	cmp	r3, #0
 8002210:	d13c      	bne.n	800228c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d12b      	bne.n	8002284 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d127      	bne.n	8002284 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800224c:	2b00      	cmp	r3, #0
 800224e:	d119      	bne.n	8002284 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0220 	bic.w	r2, r2, #32
 800225e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f7fe fe7b 	bl	8000f80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800228a:	e00e      	b.n	80022aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff fd75 	bl	8001d88 <HAL_ADC_ErrorCallback>
}
 800229e:	e004      	b.n	80022aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff fd57 	bl	8001d74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f043 0204 	orr.w	r2, r3, #4
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff fd4a 	bl	8001d88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4907      	ldr	r1, [pc, #28]	; (8002398 <__NVIC_EnableIRQ+0x38>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	; (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	; (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800247c:	f7ff ff8e 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff29 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff3e 	bl	8002344 <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff8e 	bl	80023f0 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5d 	bl	800239c <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff31 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffa2 	bl	8002458 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff fa88 	bl	8001a40 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e099      	b.n	8002670 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255c:	e00f      	b.n	800257e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800255e:	f7ff fa6f 	bl	8001a40 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b05      	cmp	r3, #5
 800256a:	d908      	bls.n	800257e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2203      	movs	r2, #3
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e078      	b.n	8002670 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e8      	bne.n	800255e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4b38      	ldr	r3, [pc, #224]	; (8002678 <HAL_DMA_Init+0x158>)
 8002598:	4013      	ands	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d107      	bne.n	80025e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	4313      	orrs	r3, r2
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f023 0307 	bic.w	r3, r3, #7
 80025fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2b04      	cmp	r3, #4
 8002610:	d117      	bne.n	8002642 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00e      	beq.n	8002642 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fadf 	bl	8002be8 <DMA_CheckFifoParam>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2240      	movs	r2, #64	; 0x40
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800263e:	2301      	movs	r3, #1
 8002640:	e016      	b.n	8002670 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fa96 	bl	8002b7c <DMA_CalcBaseAndBitshift>
 8002650:	4603      	mov	r3, r0
 8002652:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002658:	223f      	movs	r2, #63	; 0x3f
 800265a:	409a      	lsls	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	f010803f 	.word	0xf010803f

0800267c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_DMA_Start_IT+0x26>
 800269e:	2302      	movs	r3, #2
 80026a0:	e040      	b.n	8002724 <HAL_DMA_Start_IT+0xa8>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d12f      	bne.n	8002716 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fa28 	bl	8002b20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	223f      	movs	r2, #63	; 0x3f
 80026d6:	409a      	lsls	r2, r3
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0216 	orr.w	r2, r2, #22
 80026ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0208 	orr.w	r2, r2, #8
 8002702:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e005      	b.n	8002722 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002722:	7dfb      	ldrb	r3, [r7, #23]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800273a:	f7ff f981 	bl	8001a40 <HAL_GetTick>
 800273e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d008      	beq.n	800275e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e052      	b.n	8002804 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0216 	bic.w	r2, r2, #22
 800276c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800277c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <HAL_DMA_Abort+0x62>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0208 	bic.w	r2, r2, #8
 800279c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ae:	e013      	b.n	80027d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b0:	f7ff f946 	bl	8001a40 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d90c      	bls.n	80027d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2203      	movs	r2, #3
 80027c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e015      	b.n	8002804 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1e4      	bne.n	80027b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	223f      	movs	r2, #63	; 0x3f
 80027ec:	409a      	lsls	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002818:	4b8e      	ldr	r3, [pc, #568]	; (8002a54 <HAL_DMA_IRQHandler+0x248>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a8e      	ldr	r2, [pc, #568]	; (8002a58 <HAL_DMA_IRQHandler+0x24c>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	2208      	movs	r2, #8
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01a      	beq.n	8002878 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0204 	bic.w	r2, r2, #4
 800285e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2208      	movs	r2, #8
 8002866:	409a      	lsls	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2201      	movs	r2, #1
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d012      	beq.n	80028ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	2201      	movs	r2, #1
 800289c:	409a      	lsls	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f043 0202 	orr.w	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	2204      	movs	r2, #4
 80028b4:	409a      	lsls	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d012      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2204      	movs	r2, #4
 80028d2:	409a      	lsls	r2, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	2210      	movs	r2, #16
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d043      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d03c      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	2210      	movs	r2, #16
 8002908:	409a      	lsls	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d018      	beq.n	800294e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d108      	bne.n	800293c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d024      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
 800293a:	e01f      	b.n	800297c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01b      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
 800294c:	e016      	b.n	800297c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d107      	bne.n	800296c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0208 	bic.w	r2, r2, #8
 800296a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	2220      	movs	r2, #32
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 808f 	beq.w	8002aac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8087 	beq.w	8002aac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	2220      	movs	r2, #32
 80029a4:	409a      	lsls	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d136      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0216 	bic.w	r2, r2, #22
 80029c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x1da>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0208 	bic.w	r2, r2, #8
 80029f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	223f      	movs	r2, #63	; 0x3f
 80029fc:	409a      	lsls	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d07e      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4798      	blx	r3
        }
        return;
 8002a22:	e079      	b.n	8002b18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10d      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d031      	beq.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
 8002a50:	e02c      	b.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
 8002a52:	bf00      	nop
 8002a54:	20000000 	.word	0x20000000
 8002a58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d023      	beq.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
 8002a6c:	e01e      	b.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10f      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0210 	bic.w	r2, r2, #16
 8002a8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d032      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d022      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2205      	movs	r2, #5
 8002ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	3301      	adds	r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d307      	bcc.n	8002af4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f2      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x2cc>
 8002af2:	e000      	b.n	8002af6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002af4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
 8002b16:	e000      	b.n	8002b1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b18:	bf00      	nop
    }
  }
}
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b40      	cmp	r3, #64	; 0x40
 8002b4c:	d108      	bne.n	8002b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b5e:	e007      	b.n	8002b70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	60da      	str	r2, [r3, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	3b10      	subs	r3, #16
 8002b8c:	4a14      	ldr	r2, [pc, #80]	; (8002be0 <DMA_CalcBaseAndBitshift+0x64>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b96:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <DMA_CalcBaseAndBitshift+0x68>)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d909      	bls.n	8002bbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	1d1a      	adds	r2, r3, #4
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	; 0x58
 8002bbc:	e007      	b.n	8002bce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bc6:	f023 0303 	bic.w	r3, r3, #3
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	aaaaaaab 	.word	0xaaaaaaab
 8002be4:	08006908 	.word	0x08006908

08002be8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d11f      	bne.n	8002c42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d856      	bhi.n	8002cb6 <DMA_CheckFifoParam+0xce>
 8002c08:	a201      	add	r2, pc, #4	; (adr r2, 8002c10 <DMA_CheckFifoParam+0x28>)
 8002c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0e:	bf00      	nop
 8002c10:	08002c21 	.word	0x08002c21
 8002c14:	08002c33 	.word	0x08002c33
 8002c18:	08002c21 	.word	0x08002c21
 8002c1c:	08002cb7 	.word	0x08002cb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d046      	beq.n	8002cba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c30:	e043      	b.n	8002cba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c3a:	d140      	bne.n	8002cbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c40:	e03d      	b.n	8002cbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4a:	d121      	bne.n	8002c90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d837      	bhi.n	8002cc2 <DMA_CheckFifoParam+0xda>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <DMA_CheckFifoParam+0x70>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c6f 	.word	0x08002c6f
 8002c60:	08002c69 	.word	0x08002c69
 8002c64:	08002c81 	.word	0x08002c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e030      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d025      	beq.n	8002cc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7e:	e022      	b.n	8002cc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c88:	d11f      	bne.n	8002cca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c8e:	e01c      	b.n	8002cca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d903      	bls.n	8002c9e <DMA_CheckFifoParam+0xb6>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d003      	beq.n	8002ca4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c9c:	e018      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca2:	e015      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00e      	beq.n	8002cce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb4:	e00b      	b.n	8002cce <DMA_CheckFifoParam+0xe6>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e00a      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e008      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e006      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e004      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e002      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cce:	bf00      	nop
    }
  } 
  
  return status; 
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop

08002ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	; 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e159      	b.n	8002fb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	f040 8148 	bne.w	8002faa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d005      	beq.n	8002d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d130      	bne.n	8002d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 0201 	and.w	r2, r3, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d017      	beq.n	8002dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d123      	bne.n	8002e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	08da      	lsrs	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3208      	adds	r2, #8
 8002de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	220f      	movs	r2, #15
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	08da      	lsrs	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3208      	adds	r2, #8
 8002e1e:	69b9      	ldr	r1, [r7, #24]
 8002e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0203 	and.w	r2, r3, #3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a2 	beq.w	8002faa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b57      	ldr	r3, [pc, #348]	; (8002fc8 <HAL_GPIO_Init+0x2e8>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	4a56      	ldr	r2, [pc, #344]	; (8002fc8 <HAL_GPIO_Init+0x2e8>)
 8002e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e74:	6453      	str	r3, [r2, #68]	; 0x44
 8002e76:	4b54      	ldr	r3, [pc, #336]	; (8002fc8 <HAL_GPIO_Init+0x2e8>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e82:	4a52      	ldr	r2, [pc, #328]	; (8002fcc <HAL_GPIO_Init+0x2ec>)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	3302      	adds	r3, #2
 8002e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	220f      	movs	r2, #15
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a49      	ldr	r2, [pc, #292]	; (8002fd0 <HAL_GPIO_Init+0x2f0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d019      	beq.n	8002ee2 <HAL_GPIO_Init+0x202>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a48      	ldr	r2, [pc, #288]	; (8002fd4 <HAL_GPIO_Init+0x2f4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_GPIO_Init+0x1fe>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a47      	ldr	r2, [pc, #284]	; (8002fd8 <HAL_GPIO_Init+0x2f8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00d      	beq.n	8002eda <HAL_GPIO_Init+0x1fa>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a46      	ldr	r2, [pc, #280]	; (8002fdc <HAL_GPIO_Init+0x2fc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <HAL_GPIO_Init+0x1f6>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a45      	ldr	r2, [pc, #276]	; (8002fe0 <HAL_GPIO_Init+0x300>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_GPIO_Init+0x1f2>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	e008      	b.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ed2:	2307      	movs	r3, #7
 8002ed4:	e006      	b.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e004      	b.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e002      	b.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f002 0203 	and.w	r2, r2, #3
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	4093      	lsls	r3, r2
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef4:	4935      	ldr	r1, [pc, #212]	; (8002fcc <HAL_GPIO_Init+0x2ec>)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	3302      	adds	r3, #2
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f02:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f26:	4a2f      	ldr	r2, [pc, #188]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f50:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f80:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <HAL_GPIO_Init+0x304>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3301      	adds	r3, #1
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	f67f aea2 	bls.w	8002cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020c00 	.word	0x40020c00
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40013c00 	.word	0x40013c00

08002fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	e001      	b.n	800300a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
 8003024:	4613      	mov	r3, r2
 8003026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003028:	787b      	ldrb	r3, [r7, #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302e:	887a      	ldrh	r2, [r7, #2]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003034:	e003      	b.n	800303e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	041a      	lsls	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	619a      	str	r2, [r3, #24]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800305c:	887a      	ldrh	r2, [r7, #2]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4013      	ands	r3, r2
 8003062:	041a      	lsls	r2, r3, #16
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	43d9      	mvns	r1, r3
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	400b      	ands	r3, r1
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	619a      	str	r2, [r3, #24]
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003096:	4a05      	ldr	r2, [pc, #20]	; (80030ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe f850 	bl	8001144 <HAL_GPIO_EXTI_Callback>
  }
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40013c00 	.word	0x40013c00

080030b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e267      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d075      	beq.n	80031ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ce:	4b88      	ldr	r3, [pc, #544]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d00c      	beq.n	80030f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b85      	ldr	r3, [pc, #532]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d112      	bne.n	800310c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e6:	4b82      	ldr	r3, [pc, #520]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f2:	d10b      	bne.n	800310c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	4b7e      	ldr	r3, [pc, #504]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d05b      	beq.n	80031b8 <HAL_RCC_OscConfig+0x108>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d157      	bne.n	80031b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e242      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x74>
 8003116:	4b76      	ldr	r3, [pc, #472]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a75      	ldr	r2, [pc, #468]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e01d      	b.n	8003160 <HAL_RCC_OscConfig+0xb0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0x98>
 800312e:	4b70      	ldr	r3, [pc, #448]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6f      	ldr	r2, [pc, #444]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6c      	ldr	r2, [pc, #432]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e00b      	b.n	8003160 <HAL_RCC_OscConfig+0xb0>
 8003148:	4b69      	ldr	r3, [pc, #420]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a68      	ldr	r2, [pc, #416]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800314e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b66      	ldr	r3, [pc, #408]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a65      	ldr	r2, [pc, #404]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800315a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fc6a 	bl	8001a40 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe fc66 	bl	8001a40 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e207      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	4b5b      	ldr	r3, [pc, #364]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0xc0>
 800318e:	e014      	b.n	80031ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe fc56 	bl	8001a40 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003198:	f7fe fc52 	bl	8001a40 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e1f3      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0xe8>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d063      	beq.n	800328e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c6:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b47      	ldr	r3, [pc, #284]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d11c      	bne.n	8003218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031de:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d116      	bne.n	8003218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x152>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e1c7      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003202:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4937      	ldr	r1, [pc, #220]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	e03a      	b.n	800328e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003220:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <HAL_RCC_OscConfig+0x244>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe fc0b 	bl	8001a40 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322e:	f7fe fc07 	bl	8001a40 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e1a8      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4925      	ldr	r1, [pc, #148]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]
 8003260:	e015      	b.n	800328e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003262:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCC_OscConfig+0x244>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fbea 	bl	8001a40 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003270:	f7fe fbe6 	bl	8001a40 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e187      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d036      	beq.n	8003308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_RCC_OscConfig+0x248>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fe fbca 	bl	8001a40 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b0:	f7fe fbc6 	bl	8001a40 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e167      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80032c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x200>
 80032ce:	e01b      	b.n	8003308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_OscConfig+0x248>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d6:	f7fe fbb3 	bl	8001a40 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	e00e      	b.n	80032fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032de:	f7fe fbaf 	bl	8001a40 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d907      	bls.n	80032fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e150      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	42470000 	.word	0x42470000
 80032f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	4b88      	ldr	r3, [pc, #544]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ea      	bne.n	80032de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8097 	beq.w	8003444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b81      	ldr	r3, [pc, #516]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10f      	bne.n	8003346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b7d      	ldr	r3, [pc, #500]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a7c      	ldr	r2, [pc, #496]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b7a      	ldr	r3, [pc, #488]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003342:	2301      	movs	r3, #1
 8003344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003346:	4b77      	ldr	r3, [pc, #476]	; (8003524 <HAL_RCC_OscConfig+0x474>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003352:	4b74      	ldr	r3, [pc, #464]	; (8003524 <HAL_RCC_OscConfig+0x474>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a73      	ldr	r2, [pc, #460]	; (8003524 <HAL_RCC_OscConfig+0x474>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335e:	f7fe fb6f 	bl	8001a40 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fe fb6b 	bl	8001a40 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e10c      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <HAL_RCC_OscConfig+0x474>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x2ea>
 800338c:	4b64      	ldr	r3, [pc, #400]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a63      	ldr	r2, [pc, #396]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	e01c      	b.n	80033d4 <HAL_RCC_OscConfig+0x324>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x30c>
 80033a2:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a5e      	ldr	r2, [pc, #376]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0304 	orr.w	r3, r3, #4
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	4b5c      	ldr	r3, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0x324>
 80033bc:	4b58      	ldr	r3, [pc, #352]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a57      	ldr	r2, [pc, #348]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	4b55      	ldr	r3, [pc, #340]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a54      	ldr	r2, [pc, #336]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033ce:	f023 0304 	bic.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe fb30 	bl	8001a40 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fe fb2c 	bl	8001a40 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0cb      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fa:	4b49      	ldr	r3, [pc, #292]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0ee      	beq.n	80033e4 <HAL_RCC_OscConfig+0x334>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003408:	f7fe fb1a 	bl	8001a40 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fe fb16 	bl	8001a40 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0b5      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003426:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ee      	bne.n	8003410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b39      	ldr	r3, [pc, #228]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	4a38      	ldr	r2, [pc, #224]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 800343e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a1 	beq.w	8003590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800344e:	4b34      	ldr	r3, [pc, #208]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b08      	cmp	r3, #8
 8003458:	d05c      	beq.n	8003514 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d141      	bne.n	80034e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b31      	ldr	r3, [pc, #196]	; (8003528 <HAL_RCC_OscConfig+0x478>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe faea 	bl	8001a40 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe fae6 	bl	8001a40 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e087      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	3b01      	subs	r3, #1
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	491b      	ldr	r1, [pc, #108]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <HAL_RCC_OscConfig+0x478>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fe fabf 	bl	8001a40 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fe fabb 	bl	8001a40 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e05c      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x416>
 80034e4:	e054      	b.n	8003590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <HAL_RCC_OscConfig+0x478>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fe faa8 	bl	8001a40 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe faa4 	bl	8001a40 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e045      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x444>
 8003512:	e03d      	b.n	8003590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d107      	bne.n	800352c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e038      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000
 8003528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x4ec>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d028      	beq.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d121      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d11a      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800355c:	4013      	ands	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003564:	4293      	cmp	r3, r2
 8003566:	d111      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	3b01      	subs	r3, #1
 8003576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d107      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0cc      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b68      	ldr	r3, [pc, #416]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d90c      	bls.n	80035dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b65      	ldr	r3, [pc, #404]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b63      	ldr	r3, [pc, #396]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0b8      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f4:	4b59      	ldr	r3, [pc, #356]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a58      	ldr	r2, [pc, #352]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800360c:	4b53      	ldr	r3, [pc, #332]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a52      	ldr	r2, [pc, #328]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b50      	ldr	r3, [pc, #320]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	494d      	ldr	r1, [pc, #308]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d044      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d119      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e07f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d003      	beq.n	800365e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365a:	2b03      	cmp	r3, #3
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365e:	4b3f      	ldr	r3, [pc, #252]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e06f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e067      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4934      	ldr	r1, [pc, #208]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003690:	f7fe f9d6 	bl	8001a40 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fe f9d2 	bl	8001a40 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e04f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b25      	ldr	r3, [pc, #148]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d20c      	bcs.n	80036e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b22      	ldr	r3, [pc, #136]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e032      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4916      	ldr	r1, [pc, #88]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	490e      	ldr	r1, [pc, #56]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003726:	f000 f821 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800372a:	4602      	mov	r2, r0
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	490a      	ldr	r1, [pc, #40]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	5ccb      	ldrb	r3, [r1, r3]
 800373a:	fa22 f303 	lsr.w	r3, r2, r3
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe f936 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023c00 	.word	0x40023c00
 800375c:	40023800 	.word	0x40023800
 8003760:	080068f0 	.word	0x080068f0
 8003764:	20000000 	.word	0x20000000
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003770:	b090      	sub	sp, #64	; 0x40
 8003772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
 8003778:	2300      	movs	r3, #0
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377c:	2300      	movs	r3, #0
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003784:	4b59      	ldr	r3, [pc, #356]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	d00d      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x40>
 8003790:	2b08      	cmp	r3, #8
 8003792:	f200 80a1 	bhi.w	80038d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x34>
 800379a:	2b04      	cmp	r3, #4
 800379c:	d003      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800379e:	e09b      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a0:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80037a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037a4:	e09b      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a6:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037aa:	e098      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ac:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037b6:	4b4d      	ldr	r3, [pc, #308]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d028      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c2:	4b4a      	ldr	r3, [pc, #296]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	2200      	movs	r2, #0
 80037ca:	623b      	str	r3, [r7, #32]
 80037cc:	627a      	str	r2, [r7, #36]	; 0x24
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037d4:	2100      	movs	r1, #0
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d8:	fb03 f201 	mul.w	r2, r3, r1
 80037dc:	2300      	movs	r3, #0
 80037de:	fb00 f303 	mul.w	r3, r0, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	4a43      	ldr	r2, [pc, #268]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037e6:	fba0 1202 	umull	r1, r2, r0, r2
 80037ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037ec:	460a      	mov	r2, r1
 80037ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80037f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f2:	4413      	add	r3, r2
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f8:	2200      	movs	r2, #0
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	61fa      	str	r2, [r7, #28]
 80037fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003802:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003806:	f7fc fd3b 	bl	8000280 <__aeabi_uldivmod>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4613      	mov	r3, r2
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003812:	e053      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003814:	4b35      	ldr	r3, [pc, #212]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	2200      	movs	r2, #0
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	617a      	str	r2, [r7, #20]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003826:	f04f 0b00 	mov.w	fp, #0
 800382a:	4652      	mov	r2, sl
 800382c:	465b      	mov	r3, fp
 800382e:	f04f 0000 	mov.w	r0, #0
 8003832:	f04f 0100 	mov.w	r1, #0
 8003836:	0159      	lsls	r1, r3, #5
 8003838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800383c:	0150      	lsls	r0, r2, #5
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	ebb2 080a 	subs.w	r8, r2, sl
 8003846:	eb63 090b 	sbc.w	r9, r3, fp
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003856:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800385a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800385e:	ebb2 0408 	subs.w	r4, r2, r8
 8003862:	eb63 0509 	sbc.w	r5, r3, r9
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	00eb      	lsls	r3, r5, #3
 8003870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003874:	00e2      	lsls	r2, r4, #3
 8003876:	4614      	mov	r4, r2
 8003878:	461d      	mov	r5, r3
 800387a:	eb14 030a 	adds.w	r3, r4, sl
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	eb45 030b 	adc.w	r3, r5, fp
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003892:	4629      	mov	r1, r5
 8003894:	028b      	lsls	r3, r1, #10
 8003896:	4621      	mov	r1, r4
 8003898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800389c:	4621      	mov	r1, r4
 800389e:	028a      	lsls	r2, r1, #10
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a6:	2200      	movs	r2, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	60fa      	str	r2, [r7, #12]
 80038ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b0:	f7fc fce6 	bl	8000280 <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4613      	mov	r3, r2
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	3301      	adds	r3, #1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038d6:	e002      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80038da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3740      	adds	r7, #64	; 0x40
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	017d7840 	.word	0x017d7840

080038f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <HAL_RCC_GetHCLKFreq+0x14>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000

08003910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003914:	f7ff fff0 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0a9b      	lsrs	r3, r3, #10
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	08006900 	.word	0x08006900

08003938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800393c:	f7ff ffdc 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0b5b      	lsrs	r3, r3, #13
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <HAL_RCC_GetPCLK2Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	08006900 	.word	0x08006900

08003960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e041      	b.n	80039f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd feea 	bl	8001760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f000 fba6 	bl	80040f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d001      	beq.n	8003a18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e03c      	b.n	8003a92 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <HAL_TIM_Base_Start+0xa0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d018      	beq.n	8003a5c <HAL_TIM_Base_Start+0x5c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d013      	beq.n	8003a5c <HAL_TIM_Base_Start+0x5c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <HAL_TIM_Base_Start+0xa4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00e      	beq.n	8003a5c <HAL_TIM_Base_Start+0x5c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <HAL_TIM_Base_Start+0xa8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d009      	beq.n	8003a5c <HAL_TIM_Base_Start+0x5c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a17      	ldr	r2, [pc, #92]	; (8003aac <HAL_TIM_Base_Start+0xac>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <HAL_TIM_Base_Start+0x5c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <HAL_TIM_Base_Start+0xb0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d111      	bne.n	8003a80 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d010      	beq.n	8003a90 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7e:	e007      	b.n	8003a90 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40014000 	.word	0x40014000

08003ab4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a1a      	ldr	r2, [r3, #32]
 8003ac2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10f      	bne.n	8003aec <HAL_TIM_Base_Stop+0x38>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	f240 4344 	movw	r3, #1092	; 0x444
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_Base_Stop+0x38>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d001      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e044      	b.n	8003ba6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d018      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x6c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b46:	d013      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x6c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1a      	ldr	r2, [pc, #104]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x6c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_TIM_Base_Start_IT+0xb8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x6c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x6c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d111      	bne.n	8003b94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d010      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	e007      	b.n	8003ba4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40014000 	.word	0x40014000

08003bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e041      	b.n	8003c5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f839 	bl	8003c66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f000 fa72 	bl	80040f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_TIM_PWM_Start+0x24>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e022      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x6a>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d109      	bne.n	8003cba <HAL_TIM_PWM_Start+0x3e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	bf14      	ite	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	2300      	moveq	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e015      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x6a>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d109      	bne.n	8003cd4 <HAL_TIM_PWM_Start+0x58>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e008      	b.n	8003ce6 <HAL_TIM_PWM_Start+0x6a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e068      	b.n	8003dc0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_PWM_Start+0x82>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cfc:	e013      	b.n	8003d26 <HAL_TIM_PWM_Start+0xaa>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_PWM_Start+0x92>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d0c:	e00b      	b.n	8003d26 <HAL_TIM_PWM_Start+0xaa>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_PWM_Start+0xa2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d1c:	e003      	b.n	8003d26 <HAL_TIM_PWM_Start+0xaa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fc84 	bl	800463c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a23      	ldr	r2, [pc, #140]	; (8003dc8 <HAL_TIM_PWM_Start+0x14c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d107      	bne.n	8003d4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_TIM_PWM_Start+0x14c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x10e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d013      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x10e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <HAL_TIM_PWM_Start+0x150>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x10e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <HAL_TIM_PWM_Start+0x154>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x10e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <HAL_TIM_PWM_Start+0x158>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_TIM_PWM_Start+0x10e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <HAL_TIM_PWM_Start+0x15c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d111      	bne.n	8003dae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d010      	beq.n	8003dbe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dac:	e007      	b.n	8003dbe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40010000 	.word	0x40010000
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40000800 	.word	0x40000800
 8003dd4:	40000c00 	.word	0x40000c00
 8003dd8:	40014000 	.word	0x40014000

08003ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e0ae      	b.n	8003f58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	f200 809f 	bhi.w	8003f48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e45 	.word	0x08003e45
 8003e14:	08003f49 	.word	0x08003f49
 8003e18:	08003f49 	.word	0x08003f49
 8003e1c:	08003f49 	.word	0x08003f49
 8003e20:	08003e85 	.word	0x08003e85
 8003e24:	08003f49 	.word	0x08003f49
 8003e28:	08003f49 	.word	0x08003f49
 8003e2c:	08003f49 	.word	0x08003f49
 8003e30:	08003ec7 	.word	0x08003ec7
 8003e34:	08003f49 	.word	0x08003f49
 8003e38:	08003f49 	.word	0x08003f49
 8003e3c:	08003f49 	.word	0x08003f49
 8003e40:	08003f07 	.word	0x08003f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f9d0 	bl	80041f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0208 	orr.w	r2, r2, #8
 8003e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0204 	bic.w	r2, r2, #4
 8003e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6999      	ldr	r1, [r3, #24]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	619a      	str	r2, [r3, #24]
      break;
 8003e82:	e064      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fa16 	bl	80042bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6999      	ldr	r1, [r3, #24]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	021a      	lsls	r2, r3, #8
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	619a      	str	r2, [r3, #24]
      break;
 8003ec4:	e043      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fa61 	bl	8004394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0208 	orr.w	r2, r2, #8
 8003ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0204 	bic.w	r2, r2, #4
 8003ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69d9      	ldr	r1, [r3, #28]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	61da      	str	r2, [r3, #28]
      break;
 8003f04:	e023      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 faab 	bl	8004468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69d9      	ldr	r1, [r3, #28]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	021a      	lsls	r2, r3, #8
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	61da      	str	r2, [r3, #28]
      break;
 8003f46:	e002      	b.n	8003f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e0b4      	b.n	80040e6 <HAL_TIM_ConfigClockSource+0x186>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb4:	d03e      	beq.n	8004034 <HAL_TIM_ConfigClockSource+0xd4>
 8003fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fba:	f200 8087 	bhi.w	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc2:	f000 8086 	beq.w	80040d2 <HAL_TIM_ConfigClockSource+0x172>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d87f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b70      	cmp	r3, #112	; 0x70
 8003fce:	d01a      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0xa6>
 8003fd0:	2b70      	cmp	r3, #112	; 0x70
 8003fd2:	d87b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b60      	cmp	r3, #96	; 0x60
 8003fd6:	d050      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x11a>
 8003fd8:	2b60      	cmp	r3, #96	; 0x60
 8003fda:	d877      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b50      	cmp	r3, #80	; 0x50
 8003fde:	d03c      	beq.n	800405a <HAL_TIM_ConfigClockSource+0xfa>
 8003fe0:	2b50      	cmp	r3, #80	; 0x50
 8003fe2:	d873      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d058      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x13a>
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d86f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b30      	cmp	r3, #48	; 0x30
 8003fee:	d064      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8003ff0:	2b30      	cmp	r3, #48	; 0x30
 8003ff2:	d86b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d060      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d867      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05c      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	2b10      	cmp	r3, #16
 8004002:	d05a      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8004004:	e062      	b.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6899      	ldr	r1, [r3, #8]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f000 faf1 	bl	80045fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	609a      	str	r2, [r3, #8]
      break;
 8004032:	e04f      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f000 fada 	bl	80045fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004056:	609a      	str	r2, [r3, #8]
      break;
 8004058:	e03c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	461a      	mov	r2, r3
 8004068:	f000 fa4e 	bl	8004508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2150      	movs	r1, #80	; 0x50
 8004072:	4618      	mov	r0, r3
 8004074:	f000 faa7 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 8004078:	e02c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	461a      	mov	r2, r3
 8004088:	f000 fa6d 	bl	8004566 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2160      	movs	r1, #96	; 0x60
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fa97 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 8004098:	e01c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 fa2e 	bl	8004508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2140      	movs	r1, #64	; 0x40
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fa87 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 80040b8:	e00c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 fa7e 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 80040ca:	e003      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e000      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a34      	ldr	r2, [pc, #208]	; (80041d4 <TIM_Base_SetConfig+0xe4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00f      	beq.n	8004128 <TIM_Base_SetConfig+0x38>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d00b      	beq.n	8004128 <TIM_Base_SetConfig+0x38>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a31      	ldr	r2, [pc, #196]	; (80041d8 <TIM_Base_SetConfig+0xe8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d007      	beq.n	8004128 <TIM_Base_SetConfig+0x38>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a30      	ldr	r2, [pc, #192]	; (80041dc <TIM_Base_SetConfig+0xec>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_Base_SetConfig+0x38>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a2f      	ldr	r2, [pc, #188]	; (80041e0 <TIM_Base_SetConfig+0xf0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d108      	bne.n	800413a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a25      	ldr	r2, [pc, #148]	; (80041d4 <TIM_Base_SetConfig+0xe4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01b      	beq.n	800417a <TIM_Base_SetConfig+0x8a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d017      	beq.n	800417a <TIM_Base_SetConfig+0x8a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <TIM_Base_SetConfig+0xe8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <TIM_Base_SetConfig+0x8a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a21      	ldr	r2, [pc, #132]	; (80041dc <TIM_Base_SetConfig+0xec>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00f      	beq.n	800417a <TIM_Base_SetConfig+0x8a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a20      	ldr	r2, [pc, #128]	; (80041e0 <TIM_Base_SetConfig+0xf0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00b      	beq.n	800417a <TIM_Base_SetConfig+0x8a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <TIM_Base_SetConfig+0xf4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d007      	beq.n	800417a <TIM_Base_SetConfig+0x8a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <TIM_Base_SetConfig+0xf8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_Base_SetConfig+0x8a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <TIM_Base_SetConfig+0xfc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d108      	bne.n	800418c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <TIM_Base_SetConfig+0xe4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d103      	bne.n	80041c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	615a      	str	r2, [r3, #20]
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40014400 	.word	0x40014400
 80041ec:	40014800 	.word	0x40014800

080041f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f023 0201 	bic.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f023 0302 	bic.w	r3, r3, #2
 8004238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a1c      	ldr	r2, [pc, #112]	; (80042b8 <TIM_OC1_SetConfig+0xc8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10c      	bne.n	8004266 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f023 0308 	bic.w	r3, r3, #8
 8004252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 0304 	bic.w	r3, r3, #4
 8004264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <TIM_OC1_SetConfig+0xc8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d111      	bne.n	8004292 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800427c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	621a      	str	r2, [r3, #32]
}
 80042ac:	bf00      	nop
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	40010000 	.word	0x40010000

080042bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f023 0210 	bic.w	r2, r3, #16
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0320 	bic.w	r3, r3, #32
 8004306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <TIM_OC2_SetConfig+0xd4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d10d      	bne.n	8004338 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a15      	ldr	r2, [pc, #84]	; (8004390 <TIM_OC2_SetConfig+0xd4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d113      	bne.n	8004368 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800434e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40010000 	.word	0x40010000

08004394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <TIM_OC3_SetConfig+0xd0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10d      	bne.n	800440e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800440c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a14      	ldr	r2, [pc, #80]	; (8004464 <TIM_OC3_SetConfig+0xd0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d113      	bne.n	800443e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800441c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40010000 	.word	0x40010000

08004468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	031b      	lsls	r3, r3, #12
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a10      	ldr	r2, [pc, #64]	; (8004504 <TIM_OC4_SetConfig+0x9c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d109      	bne.n	80044dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000

08004508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0201 	bic.w	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f023 030a 	bic.w	r3, r3, #10
 8004544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004566:	b480      	push	{r7}
 8004568:	b087      	sub	sp, #28
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0210 	bic.w	r2, r3, #16
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	031b      	lsls	r3, r3, #12
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f043 0307 	orr.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	609a      	str	r2, [r3, #8]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	021a      	lsls	r2, r3, #8
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	431a      	orrs	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4313      	orrs	r3, r2
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	609a      	str	r2, [r3, #8]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	2201      	movs	r2, #1
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1a      	ldr	r2, [r3, #32]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	43db      	mvns	r3, r3
 800465e:	401a      	ands	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	fa01 f303 	lsl.w	r3, r1, r3
 8004674:	431a      	orrs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800469c:	2302      	movs	r3, #2
 800469e:	e050      	b.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d013      	beq.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a16      	ldr	r2, [pc, #88]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a13      	ldr	r2, [pc, #76]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d10c      	bne.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	4313      	orrs	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40010000 	.word	0x40010000
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00
 8004760:	40014000 	.word	0x40014000

08004764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e03f      	b.n	80047f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd f880 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2224      	movs	r2, #36	; 0x24
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f9cb 	bl	8004b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b08a      	sub	sp, #40	; 0x28
 8004802:	af02      	add	r7, sp, #8
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b20      	cmp	r3, #32
 800481c:	d17c      	bne.n	8004918 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_UART_Transmit+0x2c>
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e075      	b.n	800491a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_UART_Transmit+0x3e>
 8004838:	2302      	movs	r3, #2
 800483a:	e06e      	b.n	800491a <HAL_UART_Transmit+0x11c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2221      	movs	r2, #33	; 0x21
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004852:	f7fd f8f5 	bl	8001a40 <HAL_GetTick>
 8004856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	88fa      	ldrh	r2, [r7, #6]
 800485c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d108      	bne.n	8004880 <HAL_UART_Transmit+0x82>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	e003      	b.n	8004888 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004890:	e02a      	b.n	80048e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2200      	movs	r2, #0
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f8e2 	bl	8004a66 <UART_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e036      	b.n	800491a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	3302      	adds	r3, #2
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	e007      	b.n	80048da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	3301      	adds	r3, #1
 80048d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1cf      	bne.n	8004892 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2200      	movs	r2, #0
 80048fa:	2140      	movs	r1, #64	; 0x40
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f8b2 	bl	8004a66 <UART_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e006      	b.n	800491a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b08a      	sub	sp, #40	; 0x28
 8004926:	af02      	add	r7, sp, #8
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	4613      	mov	r3, r2
 8004930:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b20      	cmp	r3, #32
 8004940:	f040 808c 	bne.w	8004a5c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_UART_Receive+0x2e>
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e084      	b.n	8004a5e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_UART_Receive+0x40>
 800495e:	2302      	movs	r3, #2
 8004960:	e07d      	b.n	8004a5e <HAL_UART_Receive+0x13c>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2222      	movs	r2, #34	; 0x22
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497e:	f7fd f85f 	bl	8001a40 <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	88fa      	ldrh	r2, [r7, #6]
 800498e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d108      	bne.n	80049ac <HAL_UART_Receive+0x8a>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e003      	b.n	80049b4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80049bc:	e043      	b.n	8004a46 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2120      	movs	r1, #32
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f84c 	bl	8004a66 <UART_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e042      	b.n	8004a5e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	3302      	adds	r3, #2
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e01f      	b.n	8004a38 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a00:	d007      	beq.n	8004a12 <HAL_UART_Receive+0xf0>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <HAL_UART_Receive+0xfe>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e008      	b.n	8004a32 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1b6      	bne.n	80049be <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e000      	b.n	8004a5e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b090      	sub	sp, #64	; 0x40
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	4613      	mov	r3, r2
 8004a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a76:	e050      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a7e:	d04c      	beq.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a86:	f7fc ffdb 	bl	8001a40 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d241      	bcs.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ab6:	637a      	str	r2, [r7, #52]	; 0x34
 8004ab8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e5      	bne.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3314      	adds	r3, #20
 8004ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f023 0301 	bic.w	r3, r3, #1
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3314      	adds	r3, #20
 8004ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aea:	623a      	str	r2, [r7, #32]
 8004aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aee:	69f9      	ldr	r1, [r7, #28]
 8004af0:	6a3a      	ldr	r2, [r7, #32]
 8004af2:	e841 2300 	strex	r3, r2, [r1]
 8004af6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e5      	bne.n	8004aca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e00f      	b.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d09f      	beq.n	8004a78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3740      	adds	r7, #64	; 0x40
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b48:	b0c0      	sub	sp, #256	; 0x100
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	68d9      	ldr	r1, [r3, #12]
 8004b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	ea40 0301 	orr.w	r3, r0, r1
 8004b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b9c:	f021 010c 	bic.w	r1, r1, #12
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004baa:	430b      	orrs	r3, r1
 8004bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbe:	6999      	ldr	r1, [r3, #24]
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	ea40 0301 	orr.w	r3, r0, r1
 8004bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b8f      	ldr	r3, [pc, #572]	; (8004e10 <UART_SetConfig+0x2cc>)
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d005      	beq.n	8004be4 <UART_SetConfig+0xa0>
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b8d      	ldr	r3, [pc, #564]	; (8004e14 <UART_SetConfig+0x2d0>)
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d104      	bne.n	8004bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004be4:	f7fe fea8 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8004be8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bec:	e003      	b.n	8004bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bee:	f7fe fe8f 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c00:	f040 810c 	bne.w	8004e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c16:	4622      	mov	r2, r4
 8004c18:	462b      	mov	r3, r5
 8004c1a:	1891      	adds	r1, r2, r2
 8004c1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c1e:	415b      	adcs	r3, r3
 8004c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c26:	4621      	mov	r1, r4
 8004c28:	eb12 0801 	adds.w	r8, r2, r1
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	eb43 0901 	adc.w	r9, r3, r1
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c46:	4690      	mov	r8, r2
 8004c48:	4699      	mov	r9, r3
 8004c4a:	4623      	mov	r3, r4
 8004c4c:	eb18 0303 	adds.w	r3, r8, r3
 8004c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c54:	462b      	mov	r3, r5
 8004c56:	eb49 0303 	adc.w	r3, r9, r3
 8004c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c72:	460b      	mov	r3, r1
 8004c74:	18db      	adds	r3, r3, r3
 8004c76:	653b      	str	r3, [r7, #80]	; 0x50
 8004c78:	4613      	mov	r3, r2
 8004c7a:	eb42 0303 	adc.w	r3, r2, r3
 8004c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c88:	f7fb fafa 	bl	8000280 <__aeabi_uldivmod>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4b61      	ldr	r3, [pc, #388]	; (8004e18 <UART_SetConfig+0x2d4>)
 8004c92:	fba3 2302 	umull	r2, r3, r3, r2
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	011c      	lsls	r4, r3, #4
 8004c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cac:	4642      	mov	r2, r8
 8004cae:	464b      	mov	r3, r9
 8004cb0:	1891      	adds	r1, r2, r2
 8004cb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cb4:	415b      	adcs	r3, r3
 8004cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cdc:	4692      	mov	sl, r2
 8004cde:	469b      	mov	fp, r3
 8004ce0:	4643      	mov	r3, r8
 8004ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cea:	464b      	mov	r3, r9
 8004cec:	eb4b 0303 	adc.w	r3, fp, r3
 8004cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	18db      	adds	r3, r3, r3
 8004d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d0e:	4613      	mov	r3, r2
 8004d10:	eb42 0303 	adc.w	r3, r2, r3
 8004d14:	647b      	str	r3, [r7, #68]	; 0x44
 8004d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d1e:	f7fb faaf 	bl	8000280 <__aeabi_uldivmod>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	4b3b      	ldr	r3, [pc, #236]	; (8004e18 <UART_SetConfig+0x2d4>)
 8004d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	2264      	movs	r2, #100	; 0x64
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	1acb      	subs	r3, r1, r3
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d3e:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <UART_SetConfig+0x2d4>)
 8004d40:	fba3 2302 	umull	r2, r3, r3, r2
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d4c:	441c      	add	r4, r3
 8004d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d60:	4642      	mov	r2, r8
 8004d62:	464b      	mov	r3, r9
 8004d64:	1891      	adds	r1, r2, r2
 8004d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d68:	415b      	adcs	r3, r3
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d70:	4641      	mov	r1, r8
 8004d72:	1851      	adds	r1, r2, r1
 8004d74:	6339      	str	r1, [r7, #48]	; 0x30
 8004d76:	4649      	mov	r1, r9
 8004d78:	414b      	adcs	r3, r1
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d88:	4659      	mov	r1, fp
 8004d8a:	00cb      	lsls	r3, r1, #3
 8004d8c:	4651      	mov	r1, sl
 8004d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d92:	4651      	mov	r1, sl
 8004d94:	00ca      	lsls	r2, r1, #3
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	189b      	adds	r3, r3, r2
 8004da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004da4:	464b      	mov	r3, r9
 8004da6:	460a      	mov	r2, r1
 8004da8:	eb42 0303 	adc.w	r3, r2, r3
 8004dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	18db      	adds	r3, r3, r3
 8004dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dca:	4613      	mov	r3, r2
 8004dcc:	eb42 0303 	adc.w	r3, r2, r3
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dda:	f7fb fa51 	bl	8000280 <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <UART_SetConfig+0x2d4>)
 8004de4:	fba3 1302 	umull	r1, r3, r3, r2
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	2164      	movs	r1, #100	; 0x64
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	3332      	adds	r3, #50	; 0x32
 8004df6:	4a08      	ldr	r2, [pc, #32]	; (8004e18 <UART_SetConfig+0x2d4>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	f003 0207 	and.w	r2, r3, #7
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4422      	add	r2, r4
 8004e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e0c:	e105      	b.n	800501a <UART_SetConfig+0x4d6>
 8004e0e:	bf00      	nop
 8004e10:	40011000 	.word	0x40011000
 8004e14:	40011400 	.word	0x40011400
 8004e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e20:	2200      	movs	r2, #0
 8004e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e2e:	4642      	mov	r2, r8
 8004e30:	464b      	mov	r3, r9
 8004e32:	1891      	adds	r1, r2, r2
 8004e34:	6239      	str	r1, [r7, #32]
 8004e36:	415b      	adcs	r3, r3
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e3e:	4641      	mov	r1, r8
 8004e40:	1854      	adds	r4, r2, r1
 8004e42:	4649      	mov	r1, r9
 8004e44:	eb43 0501 	adc.w	r5, r3, r1
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	00eb      	lsls	r3, r5, #3
 8004e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e56:	00e2      	lsls	r2, r4, #3
 8004e58:	4614      	mov	r4, r2
 8004e5a:	461d      	mov	r5, r3
 8004e5c:	4643      	mov	r3, r8
 8004e5e:	18e3      	adds	r3, r4, r3
 8004e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e64:	464b      	mov	r3, r9
 8004e66:	eb45 0303 	adc.w	r3, r5, r3
 8004e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	008b      	lsls	r3, r1, #2
 8004e8e:	4621      	mov	r1, r4
 8004e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e94:	4621      	mov	r1, r4
 8004e96:	008a      	lsls	r2, r1, #2
 8004e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e9c:	f7fb f9f0 	bl	8000280 <__aeabi_uldivmod>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4b60      	ldr	r3, [pc, #384]	; (8005028 <UART_SetConfig+0x4e4>)
 8004ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	011c      	lsls	r4, r3, #4
 8004eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004eb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	1891      	adds	r1, r2, r2
 8004ec6:	61b9      	str	r1, [r7, #24]
 8004ec8:	415b      	adcs	r3, r3
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	1851      	adds	r1, r2, r1
 8004ed4:	6139      	str	r1, [r7, #16]
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	414b      	adcs	r3, r1
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ee8:	4659      	mov	r1, fp
 8004eea:	00cb      	lsls	r3, r1, #3
 8004eec:	4651      	mov	r1, sl
 8004eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ef2:	4651      	mov	r1, sl
 8004ef4:	00ca      	lsls	r2, r1, #3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	4642      	mov	r2, r8
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f04:	464b      	mov	r3, r9
 8004f06:	460a      	mov	r2, r1
 8004f08:	eb42 0303 	adc.w	r3, r2, r3
 8004f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f28:	4649      	mov	r1, r9
 8004f2a:	008b      	lsls	r3, r1, #2
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f32:	4641      	mov	r1, r8
 8004f34:	008a      	lsls	r2, r1, #2
 8004f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f3a:	f7fb f9a1 	bl	8000280 <__aeabi_uldivmod>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4b39      	ldr	r3, [pc, #228]	; (8005028 <UART_SetConfig+0x4e4>)
 8004f44:	fba3 1302 	umull	r1, r3, r3, r2
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	2164      	movs	r1, #100	; 0x64
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	3332      	adds	r3, #50	; 0x32
 8004f56:	4a34      	ldr	r2, [pc, #208]	; (8005028 <UART_SetConfig+0x4e4>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f62:	441c      	add	r4, r3
 8004f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f68:	2200      	movs	r2, #0
 8004f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004f6c:	677a      	str	r2, [r7, #116]	; 0x74
 8004f6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f72:	4642      	mov	r2, r8
 8004f74:	464b      	mov	r3, r9
 8004f76:	1891      	adds	r1, r2, r2
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	415b      	adcs	r3, r3
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f82:	4641      	mov	r1, r8
 8004f84:	1851      	adds	r1, r2, r1
 8004f86:	6039      	str	r1, [r7, #0]
 8004f88:	4649      	mov	r1, r9
 8004f8a:	414b      	adcs	r3, r1
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f9a:	4659      	mov	r1, fp
 8004f9c:	00cb      	lsls	r3, r1, #3
 8004f9e:	4651      	mov	r1, sl
 8004fa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa4:	4651      	mov	r1, sl
 8004fa6:	00ca      	lsls	r2, r1, #3
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4619      	mov	r1, r3
 8004fac:	4603      	mov	r3, r0
 8004fae:	4642      	mov	r2, r8
 8004fb0:	189b      	adds	r3, r3, r2
 8004fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	460a      	mov	r2, r1
 8004fb8:	eb42 0303 	adc.w	r3, r2, r3
 8004fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	663b      	str	r3, [r7, #96]	; 0x60
 8004fc8:	667a      	str	r2, [r7, #100]	; 0x64
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	008b      	lsls	r3, r1, #2
 8004fda:	4641      	mov	r1, r8
 8004fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	008a      	lsls	r2, r1, #2
 8004fe4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fe8:	f7fb f94a 	bl	8000280 <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <UART_SetConfig+0x4e4>)
 8004ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2164      	movs	r1, #100	; 0x64
 8004ffa:	fb01 f303 	mul.w	r3, r1, r3
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	3332      	adds	r3, #50	; 0x32
 8005004:	4a08      	ldr	r2, [pc, #32]	; (8005028 <UART_SetConfig+0x4e4>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	f003 020f 	and.w	r2, r3, #15
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4422      	add	r2, r4
 8005018:	609a      	str	r2, [r3, #8]
}
 800501a:	bf00      	nop
 800501c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005020:	46bd      	mov	sp, r7
 8005022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005026:	bf00      	nop
 8005028:	51eb851f 	.word	0x51eb851f

0800502c <atoi>:
 800502c:	220a      	movs	r2, #10
 800502e:	2100      	movs	r1, #0
 8005030:	f000 b9ba 	b.w	80053a8 <strtol>

08005034 <__errno>:
 8005034:	4b01      	ldr	r3, [pc, #4]	; (800503c <__errno+0x8>)
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	2000000c 	.word	0x2000000c

08005040 <getchar>:
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <getchar+0x20>)
 8005042:	b510      	push	{r4, lr}
 8005044:	681c      	ldr	r4, [r3, #0]
 8005046:	b124      	cbz	r4, 8005052 <getchar+0x12>
 8005048:	69a3      	ldr	r3, [r4, #24]
 800504a:	b913      	cbnz	r3, 8005052 <getchar+0x12>
 800504c:	4620      	mov	r0, r4
 800504e:	f000 fae1 	bl	8005614 <__sinit>
 8005052:	6861      	ldr	r1, [r4, #4]
 8005054:	4620      	mov	r0, r4
 8005056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800505a:	f000 bb95 	b.w	8005788 <_getc_r>
 800505e:	bf00      	nop
 8005060:	2000000c 	.word	0x2000000c

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4d0d      	ldr	r5, [pc, #52]	; (800509c <__libc_init_array+0x38>)
 8005068:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506a:	1b64      	subs	r4, r4, r5
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	2600      	movs	r6, #0
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	4d0b      	ldr	r5, [pc, #44]	; (80050a4 <__libc_init_array+0x40>)
 8005076:	4c0c      	ldr	r4, [pc, #48]	; (80050a8 <__libc_init_array+0x44>)
 8005078:	f001 fa94 	bl	80065a4 <_init>
 800507c:	1b64      	subs	r4, r4, r5
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	2600      	movs	r6, #0
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f855 3b04 	ldr.w	r3, [r5], #4
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f855 3b04 	ldr.w	r3, [r5], #4
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	08006ab4 	.word	0x08006ab4
 80050a0:	08006ab4 	.word	0x08006ab4
 80050a4:	08006ab4 	.word	0x08006ab4
 80050a8:	08006ab8 	.word	0x08006ab8

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <iprintf>:
 80050bc:	b40f      	push	{r0, r1, r2, r3}
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <iprintf+0x2c>)
 80050c0:	b513      	push	{r0, r1, r4, lr}
 80050c2:	681c      	ldr	r4, [r3, #0]
 80050c4:	b124      	cbz	r4, 80050d0 <iprintf+0x14>
 80050c6:	69a3      	ldr	r3, [r4, #24]
 80050c8:	b913      	cbnz	r3, 80050d0 <iprintf+0x14>
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 faa2 	bl	8005614 <__sinit>
 80050d0:	ab05      	add	r3, sp, #20
 80050d2:	9a04      	ldr	r2, [sp, #16]
 80050d4:	68a1      	ldr	r1, [r4, #8]
 80050d6:	9301      	str	r3, [sp, #4]
 80050d8:	4620      	mov	r0, r4
 80050da:	f000 fd0f 	bl	8005afc <_vfiprintf_r>
 80050de:	b002      	add	sp, #8
 80050e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e4:	b004      	add	sp, #16
 80050e6:	4770      	bx	lr
 80050e8:	2000000c 	.word	0x2000000c

080050ec <putchar>:
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <putchar+0x28>)
 80050ee:	b513      	push	{r0, r1, r4, lr}
 80050f0:	681c      	ldr	r4, [r3, #0]
 80050f2:	4601      	mov	r1, r0
 80050f4:	b134      	cbz	r4, 8005104 <putchar+0x18>
 80050f6:	69a3      	ldr	r3, [r4, #24]
 80050f8:	b923      	cbnz	r3, 8005104 <putchar+0x18>
 80050fa:	9001      	str	r0, [sp, #4]
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 fa89 	bl	8005614 <__sinit>
 8005102:	9901      	ldr	r1, [sp, #4]
 8005104:	68a2      	ldr	r2, [r4, #8]
 8005106:	4620      	mov	r0, r4
 8005108:	b002      	add	sp, #8
 800510a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800510e:	f000 bfb9 	b.w	8006084 <_putc_r>
 8005112:	bf00      	nop
 8005114:	2000000c 	.word	0x2000000c

08005118 <setvbuf>:
 8005118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800511c:	461d      	mov	r5, r3
 800511e:	4b5d      	ldr	r3, [pc, #372]	; (8005294 <setvbuf+0x17c>)
 8005120:	681f      	ldr	r7, [r3, #0]
 8005122:	4604      	mov	r4, r0
 8005124:	460e      	mov	r6, r1
 8005126:	4690      	mov	r8, r2
 8005128:	b127      	cbz	r7, 8005134 <setvbuf+0x1c>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	b913      	cbnz	r3, 8005134 <setvbuf+0x1c>
 800512e:	4638      	mov	r0, r7
 8005130:	f000 fa70 	bl	8005614 <__sinit>
 8005134:	4b58      	ldr	r3, [pc, #352]	; (8005298 <setvbuf+0x180>)
 8005136:	429c      	cmp	r4, r3
 8005138:	d167      	bne.n	800520a <setvbuf+0xf2>
 800513a:	687c      	ldr	r4, [r7, #4]
 800513c:	f1b8 0f02 	cmp.w	r8, #2
 8005140:	d006      	beq.n	8005150 <setvbuf+0x38>
 8005142:	f1b8 0f01 	cmp.w	r8, #1
 8005146:	f200 809f 	bhi.w	8005288 <setvbuf+0x170>
 800514a:	2d00      	cmp	r5, #0
 800514c:	f2c0 809c 	blt.w	8005288 <setvbuf+0x170>
 8005150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005152:	07db      	lsls	r3, r3, #31
 8005154:	d405      	bmi.n	8005162 <setvbuf+0x4a>
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	0598      	lsls	r0, r3, #22
 800515a:	d402      	bmi.n	8005162 <setvbuf+0x4a>
 800515c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800515e:	f000 fb54 	bl	800580a <__retarget_lock_acquire_recursive>
 8005162:	4621      	mov	r1, r4
 8005164:	4638      	mov	r0, r7
 8005166:	f000 f9af 	bl	80054c8 <_fflush_r>
 800516a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800516c:	b141      	cbz	r1, 8005180 <setvbuf+0x68>
 800516e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005172:	4299      	cmp	r1, r3
 8005174:	d002      	beq.n	800517c <setvbuf+0x64>
 8005176:	4638      	mov	r0, r7
 8005178:	f000 fbb6 	bl	80058e8 <_free_r>
 800517c:	2300      	movs	r3, #0
 800517e:	6363      	str	r3, [r4, #52]	; 0x34
 8005180:	2300      	movs	r3, #0
 8005182:	61a3      	str	r3, [r4, #24]
 8005184:	6063      	str	r3, [r4, #4]
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	0619      	lsls	r1, r3, #24
 800518a:	d503      	bpl.n	8005194 <setvbuf+0x7c>
 800518c:	6921      	ldr	r1, [r4, #16]
 800518e:	4638      	mov	r0, r7
 8005190:	f000 fbaa 	bl	80058e8 <_free_r>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	f1b8 0f02 	cmp.w	r8, #2
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	d06c      	beq.n	8005280 <setvbuf+0x168>
 80051a6:	ab01      	add	r3, sp, #4
 80051a8:	466a      	mov	r2, sp
 80051aa:	4621      	mov	r1, r4
 80051ac:	4638      	mov	r0, r7
 80051ae:	f000 fb2e 	bl	800580e <__swhatbuf_r>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	4318      	orrs	r0, r3
 80051b6:	81a0      	strh	r0, [r4, #12]
 80051b8:	2d00      	cmp	r5, #0
 80051ba:	d130      	bne.n	800521e <setvbuf+0x106>
 80051bc:	9d00      	ldr	r5, [sp, #0]
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 fb8a 	bl	80058d8 <malloc>
 80051c4:	4606      	mov	r6, r0
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d155      	bne.n	8005276 <setvbuf+0x15e>
 80051ca:	f8dd 9000 	ldr.w	r9, [sp]
 80051ce:	45a9      	cmp	r9, r5
 80051d0:	d14a      	bne.n	8005268 <setvbuf+0x150>
 80051d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051d6:	2200      	movs	r2, #0
 80051d8:	60a2      	str	r2, [r4, #8]
 80051da:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80051de:	6022      	str	r2, [r4, #0]
 80051e0:	6122      	str	r2, [r4, #16]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e8:	6162      	str	r2, [r4, #20]
 80051ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051ec:	f043 0302 	orr.w	r3, r3, #2
 80051f0:	07d2      	lsls	r2, r2, #31
 80051f2:	81a3      	strh	r3, [r4, #12]
 80051f4:	d405      	bmi.n	8005202 <setvbuf+0xea>
 80051f6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80051fa:	d102      	bne.n	8005202 <setvbuf+0xea>
 80051fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051fe:	f000 fb05 	bl	800580c <__retarget_lock_release_recursive>
 8005202:	4628      	mov	r0, r5
 8005204:	b003      	add	sp, #12
 8005206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <setvbuf+0x184>)
 800520c:	429c      	cmp	r4, r3
 800520e:	d101      	bne.n	8005214 <setvbuf+0xfc>
 8005210:	68bc      	ldr	r4, [r7, #8]
 8005212:	e793      	b.n	800513c <setvbuf+0x24>
 8005214:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <setvbuf+0x188>)
 8005216:	429c      	cmp	r4, r3
 8005218:	bf08      	it	eq
 800521a:	68fc      	ldreq	r4, [r7, #12]
 800521c:	e78e      	b.n	800513c <setvbuf+0x24>
 800521e:	2e00      	cmp	r6, #0
 8005220:	d0cd      	beq.n	80051be <setvbuf+0xa6>
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	b913      	cbnz	r3, 800522c <setvbuf+0x114>
 8005226:	4638      	mov	r0, r7
 8005228:	f000 f9f4 	bl	8005614 <__sinit>
 800522c:	f1b8 0f01 	cmp.w	r8, #1
 8005230:	bf08      	it	eq
 8005232:	89a3      	ldrheq	r3, [r4, #12]
 8005234:	6026      	str	r6, [r4, #0]
 8005236:	bf04      	itt	eq
 8005238:	f043 0301 	orreq.w	r3, r3, #1
 800523c:	81a3      	strheq	r3, [r4, #12]
 800523e:	89a2      	ldrh	r2, [r4, #12]
 8005240:	f012 0308 	ands.w	r3, r2, #8
 8005244:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005248:	d01c      	beq.n	8005284 <setvbuf+0x16c>
 800524a:	07d3      	lsls	r3, r2, #31
 800524c:	bf41      	itttt	mi
 800524e:	2300      	movmi	r3, #0
 8005250:	426d      	negmi	r5, r5
 8005252:	60a3      	strmi	r3, [r4, #8]
 8005254:	61a5      	strmi	r5, [r4, #24]
 8005256:	bf58      	it	pl
 8005258:	60a5      	strpl	r5, [r4, #8]
 800525a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800525c:	f015 0501 	ands.w	r5, r5, #1
 8005260:	d115      	bne.n	800528e <setvbuf+0x176>
 8005262:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005266:	e7c8      	b.n	80051fa <setvbuf+0xe2>
 8005268:	4648      	mov	r0, r9
 800526a:	f000 fb35 	bl	80058d8 <malloc>
 800526e:	4606      	mov	r6, r0
 8005270:	2800      	cmp	r0, #0
 8005272:	d0ae      	beq.n	80051d2 <setvbuf+0xba>
 8005274:	464d      	mov	r5, r9
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527c:	81a3      	strh	r3, [r4, #12]
 800527e:	e7d0      	b.n	8005222 <setvbuf+0x10a>
 8005280:	2500      	movs	r5, #0
 8005282:	e7a8      	b.n	80051d6 <setvbuf+0xbe>
 8005284:	60a3      	str	r3, [r4, #8]
 8005286:	e7e8      	b.n	800525a <setvbuf+0x142>
 8005288:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800528c:	e7b9      	b.n	8005202 <setvbuf+0xea>
 800528e:	2500      	movs	r5, #0
 8005290:	e7b7      	b.n	8005202 <setvbuf+0xea>
 8005292:	bf00      	nop
 8005294:	2000000c 	.word	0x2000000c
 8005298:	08006a38 	.word	0x08006a38
 800529c:	08006a58 	.word	0x08006a58
 80052a0:	08006a18 	.word	0x08006a18

080052a4 <_strtol_l.constprop.0>:
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052aa:	d001      	beq.n	80052b0 <_strtol_l.constprop.0+0xc>
 80052ac:	2b24      	cmp	r3, #36	; 0x24
 80052ae:	d906      	bls.n	80052be <_strtol_l.constprop.0+0x1a>
 80052b0:	f7ff fec0 	bl	8005034 <__errno>
 80052b4:	2316      	movs	r3, #22
 80052b6:	6003      	str	r3, [r0, #0]
 80052b8:	2000      	movs	r0, #0
 80052ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80053a4 <_strtol_l.constprop.0+0x100>
 80052c2:	460d      	mov	r5, r1
 80052c4:	462e      	mov	r6, r5
 80052c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052ca:	f814 700c 	ldrb.w	r7, [r4, ip]
 80052ce:	f017 0708 	ands.w	r7, r7, #8
 80052d2:	d1f7      	bne.n	80052c4 <_strtol_l.constprop.0+0x20>
 80052d4:	2c2d      	cmp	r4, #45	; 0x2d
 80052d6:	d132      	bne.n	800533e <_strtol_l.constprop.0+0x9a>
 80052d8:	782c      	ldrb	r4, [r5, #0]
 80052da:	2701      	movs	r7, #1
 80052dc:	1cb5      	adds	r5, r6, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d05b      	beq.n	800539a <_strtol_l.constprop.0+0xf6>
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d109      	bne.n	80052fa <_strtol_l.constprop.0+0x56>
 80052e6:	2c30      	cmp	r4, #48	; 0x30
 80052e8:	d107      	bne.n	80052fa <_strtol_l.constprop.0+0x56>
 80052ea:	782c      	ldrb	r4, [r5, #0]
 80052ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80052f0:	2c58      	cmp	r4, #88	; 0x58
 80052f2:	d14d      	bne.n	8005390 <_strtol_l.constprop.0+0xec>
 80052f4:	786c      	ldrb	r4, [r5, #1]
 80052f6:	2310      	movs	r3, #16
 80052f8:	3502      	adds	r5, #2
 80052fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80052fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005302:	f04f 0c00 	mov.w	ip, #0
 8005306:	fbb8 f9f3 	udiv	r9, r8, r3
 800530a:	4666      	mov	r6, ip
 800530c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005310:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005314:	f1be 0f09 	cmp.w	lr, #9
 8005318:	d816      	bhi.n	8005348 <_strtol_l.constprop.0+0xa4>
 800531a:	4674      	mov	r4, lr
 800531c:	42a3      	cmp	r3, r4
 800531e:	dd24      	ble.n	800536a <_strtol_l.constprop.0+0xc6>
 8005320:	f1bc 0f00 	cmp.w	ip, #0
 8005324:	db1e      	blt.n	8005364 <_strtol_l.constprop.0+0xc0>
 8005326:	45b1      	cmp	r9, r6
 8005328:	d31c      	bcc.n	8005364 <_strtol_l.constprop.0+0xc0>
 800532a:	d101      	bne.n	8005330 <_strtol_l.constprop.0+0x8c>
 800532c:	45a2      	cmp	sl, r4
 800532e:	db19      	blt.n	8005364 <_strtol_l.constprop.0+0xc0>
 8005330:	fb06 4603 	mla	r6, r6, r3, r4
 8005334:	f04f 0c01 	mov.w	ip, #1
 8005338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800533c:	e7e8      	b.n	8005310 <_strtol_l.constprop.0+0x6c>
 800533e:	2c2b      	cmp	r4, #43	; 0x2b
 8005340:	bf04      	itt	eq
 8005342:	782c      	ldrbeq	r4, [r5, #0]
 8005344:	1cb5      	addeq	r5, r6, #2
 8005346:	e7ca      	b.n	80052de <_strtol_l.constprop.0+0x3a>
 8005348:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800534c:	f1be 0f19 	cmp.w	lr, #25
 8005350:	d801      	bhi.n	8005356 <_strtol_l.constprop.0+0xb2>
 8005352:	3c37      	subs	r4, #55	; 0x37
 8005354:	e7e2      	b.n	800531c <_strtol_l.constprop.0+0x78>
 8005356:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800535a:	f1be 0f19 	cmp.w	lr, #25
 800535e:	d804      	bhi.n	800536a <_strtol_l.constprop.0+0xc6>
 8005360:	3c57      	subs	r4, #87	; 0x57
 8005362:	e7db      	b.n	800531c <_strtol_l.constprop.0+0x78>
 8005364:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005368:	e7e6      	b.n	8005338 <_strtol_l.constprop.0+0x94>
 800536a:	f1bc 0f00 	cmp.w	ip, #0
 800536e:	da05      	bge.n	800537c <_strtol_l.constprop.0+0xd8>
 8005370:	2322      	movs	r3, #34	; 0x22
 8005372:	6003      	str	r3, [r0, #0]
 8005374:	4646      	mov	r6, r8
 8005376:	b942      	cbnz	r2, 800538a <_strtol_l.constprop.0+0xe6>
 8005378:	4630      	mov	r0, r6
 800537a:	e79e      	b.n	80052ba <_strtol_l.constprop.0+0x16>
 800537c:	b107      	cbz	r7, 8005380 <_strtol_l.constprop.0+0xdc>
 800537e:	4276      	negs	r6, r6
 8005380:	2a00      	cmp	r2, #0
 8005382:	d0f9      	beq.n	8005378 <_strtol_l.constprop.0+0xd4>
 8005384:	f1bc 0f00 	cmp.w	ip, #0
 8005388:	d000      	beq.n	800538c <_strtol_l.constprop.0+0xe8>
 800538a:	1e69      	subs	r1, r5, #1
 800538c:	6011      	str	r1, [r2, #0]
 800538e:	e7f3      	b.n	8005378 <_strtol_l.constprop.0+0xd4>
 8005390:	2430      	movs	r4, #48	; 0x30
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1b1      	bne.n	80052fa <_strtol_l.constprop.0+0x56>
 8005396:	2308      	movs	r3, #8
 8005398:	e7af      	b.n	80052fa <_strtol_l.constprop.0+0x56>
 800539a:	2c30      	cmp	r4, #48	; 0x30
 800539c:	d0a5      	beq.n	80052ea <_strtol_l.constprop.0+0x46>
 800539e:	230a      	movs	r3, #10
 80053a0:	e7ab      	b.n	80052fa <_strtol_l.constprop.0+0x56>
 80053a2:	bf00      	nop
 80053a4:	08006915 	.word	0x08006915

080053a8 <strtol>:
 80053a8:	4613      	mov	r3, r2
 80053aa:	460a      	mov	r2, r1
 80053ac:	4601      	mov	r1, r0
 80053ae:	4802      	ldr	r0, [pc, #8]	; (80053b8 <strtol+0x10>)
 80053b0:	6800      	ldr	r0, [r0, #0]
 80053b2:	f7ff bf77 	b.w	80052a4 <_strtol_l.constprop.0>
 80053b6:	bf00      	nop
 80053b8:	2000000c 	.word	0x2000000c

080053bc <__sflush_r>:
 80053bc:	898a      	ldrh	r2, [r1, #12]
 80053be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c2:	4605      	mov	r5, r0
 80053c4:	0710      	lsls	r0, r2, #28
 80053c6:	460c      	mov	r4, r1
 80053c8:	d458      	bmi.n	800547c <__sflush_r+0xc0>
 80053ca:	684b      	ldr	r3, [r1, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dc05      	bgt.n	80053dc <__sflush_r+0x20>
 80053d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	dc02      	bgt.n	80053dc <__sflush_r+0x20>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053de:	2e00      	cmp	r6, #0
 80053e0:	d0f9      	beq.n	80053d6 <__sflush_r+0x1a>
 80053e2:	2300      	movs	r3, #0
 80053e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053e8:	682f      	ldr	r7, [r5, #0]
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	d032      	beq.n	8005454 <__sflush_r+0x98>
 80053ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	075a      	lsls	r2, r3, #29
 80053f4:	d505      	bpl.n	8005402 <__sflush_r+0x46>
 80053f6:	6863      	ldr	r3, [r4, #4]
 80053f8:	1ac0      	subs	r0, r0, r3
 80053fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053fc:	b10b      	cbz	r3, 8005402 <__sflush_r+0x46>
 80053fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005400:	1ac0      	subs	r0, r0, r3
 8005402:	2300      	movs	r3, #0
 8005404:	4602      	mov	r2, r0
 8005406:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005408:	6a21      	ldr	r1, [r4, #32]
 800540a:	4628      	mov	r0, r5
 800540c:	47b0      	blx	r6
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	d106      	bne.n	8005422 <__sflush_r+0x66>
 8005414:	6829      	ldr	r1, [r5, #0]
 8005416:	291d      	cmp	r1, #29
 8005418:	d82c      	bhi.n	8005474 <__sflush_r+0xb8>
 800541a:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <__sflush_r+0x108>)
 800541c:	40ca      	lsrs	r2, r1
 800541e:	07d6      	lsls	r6, r2, #31
 8005420:	d528      	bpl.n	8005474 <__sflush_r+0xb8>
 8005422:	2200      	movs	r2, #0
 8005424:	6062      	str	r2, [r4, #4]
 8005426:	04d9      	lsls	r1, r3, #19
 8005428:	6922      	ldr	r2, [r4, #16]
 800542a:	6022      	str	r2, [r4, #0]
 800542c:	d504      	bpl.n	8005438 <__sflush_r+0x7c>
 800542e:	1c42      	adds	r2, r0, #1
 8005430:	d101      	bne.n	8005436 <__sflush_r+0x7a>
 8005432:	682b      	ldr	r3, [r5, #0]
 8005434:	b903      	cbnz	r3, 8005438 <__sflush_r+0x7c>
 8005436:	6560      	str	r0, [r4, #84]	; 0x54
 8005438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800543a:	602f      	str	r7, [r5, #0]
 800543c:	2900      	cmp	r1, #0
 800543e:	d0ca      	beq.n	80053d6 <__sflush_r+0x1a>
 8005440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005444:	4299      	cmp	r1, r3
 8005446:	d002      	beq.n	800544e <__sflush_r+0x92>
 8005448:	4628      	mov	r0, r5
 800544a:	f000 fa4d 	bl	80058e8 <_free_r>
 800544e:	2000      	movs	r0, #0
 8005450:	6360      	str	r0, [r4, #52]	; 0x34
 8005452:	e7c1      	b.n	80053d8 <__sflush_r+0x1c>
 8005454:	6a21      	ldr	r1, [r4, #32]
 8005456:	2301      	movs	r3, #1
 8005458:	4628      	mov	r0, r5
 800545a:	47b0      	blx	r6
 800545c:	1c41      	adds	r1, r0, #1
 800545e:	d1c7      	bne.n	80053f0 <__sflush_r+0x34>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0c4      	beq.n	80053f0 <__sflush_r+0x34>
 8005466:	2b1d      	cmp	r3, #29
 8005468:	d001      	beq.n	800546e <__sflush_r+0xb2>
 800546a:	2b16      	cmp	r3, #22
 800546c:	d101      	bne.n	8005472 <__sflush_r+0xb6>
 800546e:	602f      	str	r7, [r5, #0]
 8005470:	e7b1      	b.n	80053d6 <__sflush_r+0x1a>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	e7ad      	b.n	80053d8 <__sflush_r+0x1c>
 800547c:	690f      	ldr	r7, [r1, #16]
 800547e:	2f00      	cmp	r7, #0
 8005480:	d0a9      	beq.n	80053d6 <__sflush_r+0x1a>
 8005482:	0793      	lsls	r3, r2, #30
 8005484:	680e      	ldr	r6, [r1, #0]
 8005486:	bf08      	it	eq
 8005488:	694b      	ldreq	r3, [r1, #20]
 800548a:	600f      	str	r7, [r1, #0]
 800548c:	bf18      	it	ne
 800548e:	2300      	movne	r3, #0
 8005490:	eba6 0807 	sub.w	r8, r6, r7
 8005494:	608b      	str	r3, [r1, #8]
 8005496:	f1b8 0f00 	cmp.w	r8, #0
 800549a:	dd9c      	ble.n	80053d6 <__sflush_r+0x1a>
 800549c:	6a21      	ldr	r1, [r4, #32]
 800549e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054a0:	4643      	mov	r3, r8
 80054a2:	463a      	mov	r2, r7
 80054a4:	4628      	mov	r0, r5
 80054a6:	47b0      	blx	r6
 80054a8:	2800      	cmp	r0, #0
 80054aa:	dc06      	bgt.n	80054ba <__sflush_r+0xfe>
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054b8:	e78e      	b.n	80053d8 <__sflush_r+0x1c>
 80054ba:	4407      	add	r7, r0
 80054bc:	eba8 0800 	sub.w	r8, r8, r0
 80054c0:	e7e9      	b.n	8005496 <__sflush_r+0xda>
 80054c2:	bf00      	nop
 80054c4:	20400001 	.word	0x20400001

080054c8 <_fflush_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	690b      	ldr	r3, [r1, #16]
 80054cc:	4605      	mov	r5, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	b913      	cbnz	r3, 80054d8 <_fflush_r+0x10>
 80054d2:	2500      	movs	r5, #0
 80054d4:	4628      	mov	r0, r5
 80054d6:	bd38      	pop	{r3, r4, r5, pc}
 80054d8:	b118      	cbz	r0, 80054e2 <_fflush_r+0x1a>
 80054da:	6983      	ldr	r3, [r0, #24]
 80054dc:	b90b      	cbnz	r3, 80054e2 <_fflush_r+0x1a>
 80054de:	f000 f899 	bl	8005614 <__sinit>
 80054e2:	4b14      	ldr	r3, [pc, #80]	; (8005534 <_fflush_r+0x6c>)
 80054e4:	429c      	cmp	r4, r3
 80054e6:	d11b      	bne.n	8005520 <_fflush_r+0x58>
 80054e8:	686c      	ldr	r4, [r5, #4]
 80054ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0ef      	beq.n	80054d2 <_fflush_r+0xa>
 80054f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054f4:	07d0      	lsls	r0, r2, #31
 80054f6:	d404      	bmi.n	8005502 <_fflush_r+0x3a>
 80054f8:	0599      	lsls	r1, r3, #22
 80054fa:	d402      	bmi.n	8005502 <_fflush_r+0x3a>
 80054fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054fe:	f000 f984 	bl	800580a <__retarget_lock_acquire_recursive>
 8005502:	4628      	mov	r0, r5
 8005504:	4621      	mov	r1, r4
 8005506:	f7ff ff59 	bl	80053bc <__sflush_r>
 800550a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800550c:	07da      	lsls	r2, r3, #31
 800550e:	4605      	mov	r5, r0
 8005510:	d4e0      	bmi.n	80054d4 <_fflush_r+0xc>
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	059b      	lsls	r3, r3, #22
 8005516:	d4dd      	bmi.n	80054d4 <_fflush_r+0xc>
 8005518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800551a:	f000 f977 	bl	800580c <__retarget_lock_release_recursive>
 800551e:	e7d9      	b.n	80054d4 <_fflush_r+0xc>
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <_fflush_r+0x70>)
 8005522:	429c      	cmp	r4, r3
 8005524:	d101      	bne.n	800552a <_fflush_r+0x62>
 8005526:	68ac      	ldr	r4, [r5, #8]
 8005528:	e7df      	b.n	80054ea <_fflush_r+0x22>
 800552a:	4b04      	ldr	r3, [pc, #16]	; (800553c <_fflush_r+0x74>)
 800552c:	429c      	cmp	r4, r3
 800552e:	bf08      	it	eq
 8005530:	68ec      	ldreq	r4, [r5, #12]
 8005532:	e7da      	b.n	80054ea <_fflush_r+0x22>
 8005534:	08006a38 	.word	0x08006a38
 8005538:	08006a58 	.word	0x08006a58
 800553c:	08006a18 	.word	0x08006a18

08005540 <fflush>:
 8005540:	4601      	mov	r1, r0
 8005542:	b920      	cbnz	r0, 800554e <fflush+0xe>
 8005544:	4b04      	ldr	r3, [pc, #16]	; (8005558 <fflush+0x18>)
 8005546:	4905      	ldr	r1, [pc, #20]	; (800555c <fflush+0x1c>)
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	f000 b8fe 	b.w	800574a <_fwalk_reent>
 800554e:	4b04      	ldr	r3, [pc, #16]	; (8005560 <fflush+0x20>)
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	f7ff bfb9 	b.w	80054c8 <_fflush_r>
 8005556:	bf00      	nop
 8005558:	08006910 	.word	0x08006910
 800555c:	080054c9 	.word	0x080054c9
 8005560:	2000000c 	.word	0x2000000c

08005564 <std>:
 8005564:	2300      	movs	r3, #0
 8005566:	b510      	push	{r4, lr}
 8005568:	4604      	mov	r4, r0
 800556a:	e9c0 3300 	strd	r3, r3, [r0]
 800556e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005572:	6083      	str	r3, [r0, #8]
 8005574:	8181      	strh	r1, [r0, #12]
 8005576:	6643      	str	r3, [r0, #100]	; 0x64
 8005578:	81c2      	strh	r2, [r0, #14]
 800557a:	6183      	str	r3, [r0, #24]
 800557c:	4619      	mov	r1, r3
 800557e:	2208      	movs	r2, #8
 8005580:	305c      	adds	r0, #92	; 0x5c
 8005582:	f7ff fd93 	bl	80050ac <memset>
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <std+0x38>)
 8005588:	6263      	str	r3, [r4, #36]	; 0x24
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <std+0x3c>)
 800558c:	62a3      	str	r3, [r4, #40]	; 0x28
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <std+0x40>)
 8005590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005592:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <std+0x44>)
 8005594:	6224      	str	r4, [r4, #32]
 8005596:	6323      	str	r3, [r4, #48]	; 0x30
 8005598:	bd10      	pop	{r4, pc}
 800559a:	bf00      	nop
 800559c:	0800618d 	.word	0x0800618d
 80055a0:	080061af 	.word	0x080061af
 80055a4:	080061e7 	.word	0x080061e7
 80055a8:	0800620b 	.word	0x0800620b

080055ac <_cleanup_r>:
 80055ac:	4901      	ldr	r1, [pc, #4]	; (80055b4 <_cleanup_r+0x8>)
 80055ae:	f000 b8cc 	b.w	800574a <_fwalk_reent>
 80055b2:	bf00      	nop
 80055b4:	080054c9 	.word	0x080054c9

080055b8 <__sfmoreglue>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	2268      	movs	r2, #104	; 0x68
 80055bc:	1e4d      	subs	r5, r1, #1
 80055be:	4355      	muls	r5, r2
 80055c0:	460e      	mov	r6, r1
 80055c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055c6:	f000 f9fb 	bl	80059c0 <_malloc_r>
 80055ca:	4604      	mov	r4, r0
 80055cc:	b140      	cbz	r0, 80055e0 <__sfmoreglue+0x28>
 80055ce:	2100      	movs	r1, #0
 80055d0:	e9c0 1600 	strd	r1, r6, [r0]
 80055d4:	300c      	adds	r0, #12
 80055d6:	60a0      	str	r0, [r4, #8]
 80055d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055dc:	f7ff fd66 	bl	80050ac <memset>
 80055e0:	4620      	mov	r0, r4
 80055e2:	bd70      	pop	{r4, r5, r6, pc}

080055e4 <__sfp_lock_acquire>:
 80055e4:	4801      	ldr	r0, [pc, #4]	; (80055ec <__sfp_lock_acquire+0x8>)
 80055e6:	f000 b910 	b.w	800580a <__retarget_lock_acquire_recursive>
 80055ea:	bf00      	nop
 80055ec:	20000ae9 	.word	0x20000ae9

080055f0 <__sfp_lock_release>:
 80055f0:	4801      	ldr	r0, [pc, #4]	; (80055f8 <__sfp_lock_release+0x8>)
 80055f2:	f000 b90b 	b.w	800580c <__retarget_lock_release_recursive>
 80055f6:	bf00      	nop
 80055f8:	20000ae9 	.word	0x20000ae9

080055fc <__sinit_lock_acquire>:
 80055fc:	4801      	ldr	r0, [pc, #4]	; (8005604 <__sinit_lock_acquire+0x8>)
 80055fe:	f000 b904 	b.w	800580a <__retarget_lock_acquire_recursive>
 8005602:	bf00      	nop
 8005604:	20000aea 	.word	0x20000aea

08005608 <__sinit_lock_release>:
 8005608:	4801      	ldr	r0, [pc, #4]	; (8005610 <__sinit_lock_release+0x8>)
 800560a:	f000 b8ff 	b.w	800580c <__retarget_lock_release_recursive>
 800560e:	bf00      	nop
 8005610:	20000aea 	.word	0x20000aea

08005614 <__sinit>:
 8005614:	b510      	push	{r4, lr}
 8005616:	4604      	mov	r4, r0
 8005618:	f7ff fff0 	bl	80055fc <__sinit_lock_acquire>
 800561c:	69a3      	ldr	r3, [r4, #24]
 800561e:	b11b      	cbz	r3, 8005628 <__sinit+0x14>
 8005620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005624:	f7ff bff0 	b.w	8005608 <__sinit_lock_release>
 8005628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800562c:	6523      	str	r3, [r4, #80]	; 0x50
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <__sinit+0x68>)
 8005630:	4a13      	ldr	r2, [pc, #76]	; (8005680 <__sinit+0x6c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	62a2      	str	r2, [r4, #40]	; 0x28
 8005636:	42a3      	cmp	r3, r4
 8005638:	bf04      	itt	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	61a3      	streq	r3, [r4, #24]
 800563e:	4620      	mov	r0, r4
 8005640:	f000 f820 	bl	8005684 <__sfp>
 8005644:	6060      	str	r0, [r4, #4]
 8005646:	4620      	mov	r0, r4
 8005648:	f000 f81c 	bl	8005684 <__sfp>
 800564c:	60a0      	str	r0, [r4, #8]
 800564e:	4620      	mov	r0, r4
 8005650:	f000 f818 	bl	8005684 <__sfp>
 8005654:	2200      	movs	r2, #0
 8005656:	60e0      	str	r0, [r4, #12]
 8005658:	2104      	movs	r1, #4
 800565a:	6860      	ldr	r0, [r4, #4]
 800565c:	f7ff ff82 	bl	8005564 <std>
 8005660:	68a0      	ldr	r0, [r4, #8]
 8005662:	2201      	movs	r2, #1
 8005664:	2109      	movs	r1, #9
 8005666:	f7ff ff7d 	bl	8005564 <std>
 800566a:	68e0      	ldr	r0, [r4, #12]
 800566c:	2202      	movs	r2, #2
 800566e:	2112      	movs	r1, #18
 8005670:	f7ff ff78 	bl	8005564 <std>
 8005674:	2301      	movs	r3, #1
 8005676:	61a3      	str	r3, [r4, #24]
 8005678:	e7d2      	b.n	8005620 <__sinit+0xc>
 800567a:	bf00      	nop
 800567c:	08006910 	.word	0x08006910
 8005680:	080055ad 	.word	0x080055ad

08005684 <__sfp>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	4607      	mov	r7, r0
 8005688:	f7ff ffac 	bl	80055e4 <__sfp_lock_acquire>
 800568c:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <__sfp+0x84>)
 800568e:	681e      	ldr	r6, [r3, #0]
 8005690:	69b3      	ldr	r3, [r6, #24]
 8005692:	b913      	cbnz	r3, 800569a <__sfp+0x16>
 8005694:	4630      	mov	r0, r6
 8005696:	f7ff ffbd 	bl	8005614 <__sinit>
 800569a:	3648      	adds	r6, #72	; 0x48
 800569c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	d503      	bpl.n	80056ac <__sfp+0x28>
 80056a4:	6833      	ldr	r3, [r6, #0]
 80056a6:	b30b      	cbz	r3, 80056ec <__sfp+0x68>
 80056a8:	6836      	ldr	r6, [r6, #0]
 80056aa:	e7f7      	b.n	800569c <__sfp+0x18>
 80056ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056b0:	b9d5      	cbnz	r5, 80056e8 <__sfp+0x64>
 80056b2:	4b16      	ldr	r3, [pc, #88]	; (800570c <__sfp+0x88>)
 80056b4:	60e3      	str	r3, [r4, #12]
 80056b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056ba:	6665      	str	r5, [r4, #100]	; 0x64
 80056bc:	f000 f8a4 	bl	8005808 <__retarget_lock_init_recursive>
 80056c0:	f7ff ff96 	bl	80055f0 <__sfp_lock_release>
 80056c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056cc:	6025      	str	r5, [r4, #0]
 80056ce:	61a5      	str	r5, [r4, #24]
 80056d0:	2208      	movs	r2, #8
 80056d2:	4629      	mov	r1, r5
 80056d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056d8:	f7ff fce8 	bl	80050ac <memset>
 80056dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056e4:	4620      	mov	r0, r4
 80056e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e8:	3468      	adds	r4, #104	; 0x68
 80056ea:	e7d9      	b.n	80056a0 <__sfp+0x1c>
 80056ec:	2104      	movs	r1, #4
 80056ee:	4638      	mov	r0, r7
 80056f0:	f7ff ff62 	bl	80055b8 <__sfmoreglue>
 80056f4:	4604      	mov	r4, r0
 80056f6:	6030      	str	r0, [r6, #0]
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d1d5      	bne.n	80056a8 <__sfp+0x24>
 80056fc:	f7ff ff78 	bl	80055f0 <__sfp_lock_release>
 8005700:	230c      	movs	r3, #12
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	e7ee      	b.n	80056e4 <__sfp+0x60>
 8005706:	bf00      	nop
 8005708:	08006910 	.word	0x08006910
 800570c:	ffff0001 	.word	0xffff0001

08005710 <_fwalk>:
 8005710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005714:	460f      	mov	r7, r1
 8005716:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800571a:	2600      	movs	r6, #0
 800571c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8005720:	f1b8 0801 	subs.w	r8, r8, #1
 8005724:	d505      	bpl.n	8005732 <_fwalk+0x22>
 8005726:	6824      	ldr	r4, [r4, #0]
 8005728:	2c00      	cmp	r4, #0
 800572a:	d1f7      	bne.n	800571c <_fwalk+0xc>
 800572c:	4630      	mov	r0, r6
 800572e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005732:	89ab      	ldrh	r3, [r5, #12]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d906      	bls.n	8005746 <_fwalk+0x36>
 8005738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800573c:	3301      	adds	r3, #1
 800573e:	d002      	beq.n	8005746 <_fwalk+0x36>
 8005740:	4628      	mov	r0, r5
 8005742:	47b8      	blx	r7
 8005744:	4306      	orrs	r6, r0
 8005746:	3568      	adds	r5, #104	; 0x68
 8005748:	e7ea      	b.n	8005720 <_fwalk+0x10>

0800574a <_fwalk_reent>:
 800574a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800574e:	4606      	mov	r6, r0
 8005750:	4688      	mov	r8, r1
 8005752:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005756:	2700      	movs	r7, #0
 8005758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800575c:	f1b9 0901 	subs.w	r9, r9, #1
 8005760:	d505      	bpl.n	800576e <_fwalk_reent+0x24>
 8005762:	6824      	ldr	r4, [r4, #0]
 8005764:	2c00      	cmp	r4, #0
 8005766:	d1f7      	bne.n	8005758 <_fwalk_reent+0xe>
 8005768:	4638      	mov	r0, r7
 800576a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800576e:	89ab      	ldrh	r3, [r5, #12]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d907      	bls.n	8005784 <_fwalk_reent+0x3a>
 8005774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005778:	3301      	adds	r3, #1
 800577a:	d003      	beq.n	8005784 <_fwalk_reent+0x3a>
 800577c:	4629      	mov	r1, r5
 800577e:	4630      	mov	r0, r6
 8005780:	47c0      	blx	r8
 8005782:	4307      	orrs	r7, r0
 8005784:	3568      	adds	r5, #104	; 0x68
 8005786:	e7e9      	b.n	800575c <_fwalk_reent+0x12>

08005788 <_getc_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	460c      	mov	r4, r1
 800578c:	4605      	mov	r5, r0
 800578e:	b118      	cbz	r0, 8005798 <_getc_r+0x10>
 8005790:	6983      	ldr	r3, [r0, #24]
 8005792:	b90b      	cbnz	r3, 8005798 <_getc_r+0x10>
 8005794:	f7ff ff3e 	bl	8005614 <__sinit>
 8005798:	4b18      	ldr	r3, [pc, #96]	; (80057fc <_getc_r+0x74>)
 800579a:	429c      	cmp	r4, r3
 800579c:	d11e      	bne.n	80057dc <_getc_r+0x54>
 800579e:	686c      	ldr	r4, [r5, #4]
 80057a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057a2:	07d8      	lsls	r0, r3, #31
 80057a4:	d405      	bmi.n	80057b2 <_getc_r+0x2a>
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	0599      	lsls	r1, r3, #22
 80057aa:	d402      	bmi.n	80057b2 <_getc_r+0x2a>
 80057ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ae:	f000 f82c 	bl	800580a <__retarget_lock_acquire_recursive>
 80057b2:	6863      	ldr	r3, [r4, #4]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	6063      	str	r3, [r4, #4]
 80057ba:	da19      	bge.n	80057f0 <_getc_r+0x68>
 80057bc:	4628      	mov	r0, r5
 80057be:	4621      	mov	r1, r4
 80057c0:	f000 fca8 	bl	8006114 <__srget_r>
 80057c4:	4605      	mov	r5, r0
 80057c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057c8:	07da      	lsls	r2, r3, #31
 80057ca:	d405      	bmi.n	80057d8 <_getc_r+0x50>
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	059b      	lsls	r3, r3, #22
 80057d0:	d402      	bmi.n	80057d8 <_getc_r+0x50>
 80057d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057d4:	f000 f81a 	bl	800580c <__retarget_lock_release_recursive>
 80057d8:	4628      	mov	r0, r5
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	4b08      	ldr	r3, [pc, #32]	; (8005800 <_getc_r+0x78>)
 80057de:	429c      	cmp	r4, r3
 80057e0:	d101      	bne.n	80057e6 <_getc_r+0x5e>
 80057e2:	68ac      	ldr	r4, [r5, #8]
 80057e4:	e7dc      	b.n	80057a0 <_getc_r+0x18>
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <_getc_r+0x7c>)
 80057e8:	429c      	cmp	r4, r3
 80057ea:	bf08      	it	eq
 80057ec:	68ec      	ldreq	r4, [r5, #12]
 80057ee:	e7d7      	b.n	80057a0 <_getc_r+0x18>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	6022      	str	r2, [r4, #0]
 80057f6:	781d      	ldrb	r5, [r3, #0]
 80057f8:	e7e5      	b.n	80057c6 <_getc_r+0x3e>
 80057fa:	bf00      	nop
 80057fc:	08006a38 	.word	0x08006a38
 8005800:	08006a58 	.word	0x08006a58
 8005804:	08006a18 	.word	0x08006a18

08005808 <__retarget_lock_init_recursive>:
 8005808:	4770      	bx	lr

0800580a <__retarget_lock_acquire_recursive>:
 800580a:	4770      	bx	lr

0800580c <__retarget_lock_release_recursive>:
 800580c:	4770      	bx	lr

0800580e <__swhatbuf_r>:
 800580e:	b570      	push	{r4, r5, r6, lr}
 8005810:	460e      	mov	r6, r1
 8005812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005816:	2900      	cmp	r1, #0
 8005818:	b096      	sub	sp, #88	; 0x58
 800581a:	4614      	mov	r4, r2
 800581c:	461d      	mov	r5, r3
 800581e:	da08      	bge.n	8005832 <__swhatbuf_r+0x24>
 8005820:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	602a      	str	r2, [r5, #0]
 8005828:	061a      	lsls	r2, r3, #24
 800582a:	d410      	bmi.n	800584e <__swhatbuf_r+0x40>
 800582c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005830:	e00e      	b.n	8005850 <__swhatbuf_r+0x42>
 8005832:	466a      	mov	r2, sp
 8005834:	f000 fdd0 	bl	80063d8 <_fstat_r>
 8005838:	2800      	cmp	r0, #0
 800583a:	dbf1      	blt.n	8005820 <__swhatbuf_r+0x12>
 800583c:	9a01      	ldr	r2, [sp, #4]
 800583e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005842:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005846:	425a      	negs	r2, r3
 8005848:	415a      	adcs	r2, r3
 800584a:	602a      	str	r2, [r5, #0]
 800584c:	e7ee      	b.n	800582c <__swhatbuf_r+0x1e>
 800584e:	2340      	movs	r3, #64	; 0x40
 8005850:	2000      	movs	r0, #0
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	b016      	add	sp, #88	; 0x58
 8005856:	bd70      	pop	{r4, r5, r6, pc}

08005858 <__smakebuf_r>:
 8005858:	898b      	ldrh	r3, [r1, #12]
 800585a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800585c:	079d      	lsls	r5, r3, #30
 800585e:	4606      	mov	r6, r0
 8005860:	460c      	mov	r4, r1
 8005862:	d507      	bpl.n	8005874 <__smakebuf_r+0x1c>
 8005864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	6123      	str	r3, [r4, #16]
 800586c:	2301      	movs	r3, #1
 800586e:	6163      	str	r3, [r4, #20]
 8005870:	b002      	add	sp, #8
 8005872:	bd70      	pop	{r4, r5, r6, pc}
 8005874:	ab01      	add	r3, sp, #4
 8005876:	466a      	mov	r2, sp
 8005878:	f7ff ffc9 	bl	800580e <__swhatbuf_r>
 800587c:	9900      	ldr	r1, [sp, #0]
 800587e:	4605      	mov	r5, r0
 8005880:	4630      	mov	r0, r6
 8005882:	f000 f89d 	bl	80059c0 <_malloc_r>
 8005886:	b948      	cbnz	r0, 800589c <__smakebuf_r+0x44>
 8005888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800588c:	059a      	lsls	r2, r3, #22
 800588e:	d4ef      	bmi.n	8005870 <__smakebuf_r+0x18>
 8005890:	f023 0303 	bic.w	r3, r3, #3
 8005894:	f043 0302 	orr.w	r3, r3, #2
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	e7e3      	b.n	8005864 <__smakebuf_r+0xc>
 800589c:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <__smakebuf_r+0x7c>)
 800589e:	62b3      	str	r3, [r6, #40]	; 0x28
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	6020      	str	r0, [r4, #0]
 80058a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a8:	81a3      	strh	r3, [r4, #12]
 80058aa:	9b00      	ldr	r3, [sp, #0]
 80058ac:	6163      	str	r3, [r4, #20]
 80058ae:	9b01      	ldr	r3, [sp, #4]
 80058b0:	6120      	str	r0, [r4, #16]
 80058b2:	b15b      	cbz	r3, 80058cc <__smakebuf_r+0x74>
 80058b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058b8:	4630      	mov	r0, r6
 80058ba:	f000 fd9f 	bl	80063fc <_isatty_r>
 80058be:	b128      	cbz	r0, 80058cc <__smakebuf_r+0x74>
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f023 0303 	bic.w	r3, r3, #3
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	81a3      	strh	r3, [r4, #12]
 80058cc:	89a0      	ldrh	r0, [r4, #12]
 80058ce:	4305      	orrs	r5, r0
 80058d0:	81a5      	strh	r5, [r4, #12]
 80058d2:	e7cd      	b.n	8005870 <__smakebuf_r+0x18>
 80058d4:	080055ad 	.word	0x080055ad

080058d8 <malloc>:
 80058d8:	4b02      	ldr	r3, [pc, #8]	; (80058e4 <malloc+0xc>)
 80058da:	4601      	mov	r1, r0
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	f000 b86f 	b.w	80059c0 <_malloc_r>
 80058e2:	bf00      	nop
 80058e4:	2000000c 	.word	0x2000000c

080058e8 <_free_r>:
 80058e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ea:	2900      	cmp	r1, #0
 80058ec:	d044      	beq.n	8005978 <_free_r+0x90>
 80058ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f2:	9001      	str	r0, [sp, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f1a1 0404 	sub.w	r4, r1, #4
 80058fa:	bfb8      	it	lt
 80058fc:	18e4      	addlt	r4, r4, r3
 80058fe:	f000 fd9f 	bl	8006440 <__malloc_lock>
 8005902:	4a1e      	ldr	r2, [pc, #120]	; (800597c <_free_r+0x94>)
 8005904:	9801      	ldr	r0, [sp, #4]
 8005906:	6813      	ldr	r3, [r2, #0]
 8005908:	b933      	cbnz	r3, 8005918 <_free_r+0x30>
 800590a:	6063      	str	r3, [r4, #4]
 800590c:	6014      	str	r4, [r2, #0]
 800590e:	b003      	add	sp, #12
 8005910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005914:	f000 bd9a 	b.w	800644c <__malloc_unlock>
 8005918:	42a3      	cmp	r3, r4
 800591a:	d908      	bls.n	800592e <_free_r+0x46>
 800591c:	6825      	ldr	r5, [r4, #0]
 800591e:	1961      	adds	r1, r4, r5
 8005920:	428b      	cmp	r3, r1
 8005922:	bf01      	itttt	eq
 8005924:	6819      	ldreq	r1, [r3, #0]
 8005926:	685b      	ldreq	r3, [r3, #4]
 8005928:	1949      	addeq	r1, r1, r5
 800592a:	6021      	streq	r1, [r4, #0]
 800592c:	e7ed      	b.n	800590a <_free_r+0x22>
 800592e:	461a      	mov	r2, r3
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	b10b      	cbz	r3, 8005938 <_free_r+0x50>
 8005934:	42a3      	cmp	r3, r4
 8005936:	d9fa      	bls.n	800592e <_free_r+0x46>
 8005938:	6811      	ldr	r1, [r2, #0]
 800593a:	1855      	adds	r5, r2, r1
 800593c:	42a5      	cmp	r5, r4
 800593e:	d10b      	bne.n	8005958 <_free_r+0x70>
 8005940:	6824      	ldr	r4, [r4, #0]
 8005942:	4421      	add	r1, r4
 8005944:	1854      	adds	r4, r2, r1
 8005946:	42a3      	cmp	r3, r4
 8005948:	6011      	str	r1, [r2, #0]
 800594a:	d1e0      	bne.n	800590e <_free_r+0x26>
 800594c:	681c      	ldr	r4, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	6053      	str	r3, [r2, #4]
 8005952:	4421      	add	r1, r4
 8005954:	6011      	str	r1, [r2, #0]
 8005956:	e7da      	b.n	800590e <_free_r+0x26>
 8005958:	d902      	bls.n	8005960 <_free_r+0x78>
 800595a:	230c      	movs	r3, #12
 800595c:	6003      	str	r3, [r0, #0]
 800595e:	e7d6      	b.n	800590e <_free_r+0x26>
 8005960:	6825      	ldr	r5, [r4, #0]
 8005962:	1961      	adds	r1, r4, r5
 8005964:	428b      	cmp	r3, r1
 8005966:	bf04      	itt	eq
 8005968:	6819      	ldreq	r1, [r3, #0]
 800596a:	685b      	ldreq	r3, [r3, #4]
 800596c:	6063      	str	r3, [r4, #4]
 800596e:	bf04      	itt	eq
 8005970:	1949      	addeq	r1, r1, r5
 8005972:	6021      	streq	r1, [r4, #0]
 8005974:	6054      	str	r4, [r2, #4]
 8005976:	e7ca      	b.n	800590e <_free_r+0x26>
 8005978:	b003      	add	sp, #12
 800597a:	bd30      	pop	{r4, r5, pc}
 800597c:	20000aec 	.word	0x20000aec

08005980 <sbrk_aligned>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	4e0e      	ldr	r6, [pc, #56]	; (80059bc <sbrk_aligned+0x3c>)
 8005984:	460c      	mov	r4, r1
 8005986:	6831      	ldr	r1, [r6, #0]
 8005988:	4605      	mov	r5, r0
 800598a:	b911      	cbnz	r1, 8005992 <sbrk_aligned+0x12>
 800598c:	f000 fbee 	bl	800616c <_sbrk_r>
 8005990:	6030      	str	r0, [r6, #0]
 8005992:	4621      	mov	r1, r4
 8005994:	4628      	mov	r0, r5
 8005996:	f000 fbe9 	bl	800616c <_sbrk_r>
 800599a:	1c43      	adds	r3, r0, #1
 800599c:	d00a      	beq.n	80059b4 <sbrk_aligned+0x34>
 800599e:	1cc4      	adds	r4, r0, #3
 80059a0:	f024 0403 	bic.w	r4, r4, #3
 80059a4:	42a0      	cmp	r0, r4
 80059a6:	d007      	beq.n	80059b8 <sbrk_aligned+0x38>
 80059a8:	1a21      	subs	r1, r4, r0
 80059aa:	4628      	mov	r0, r5
 80059ac:	f000 fbde 	bl	800616c <_sbrk_r>
 80059b0:	3001      	adds	r0, #1
 80059b2:	d101      	bne.n	80059b8 <sbrk_aligned+0x38>
 80059b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80059b8:	4620      	mov	r0, r4
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
 80059bc:	20000af0 	.word	0x20000af0

080059c0 <_malloc_r>:
 80059c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c4:	1ccd      	adds	r5, r1, #3
 80059c6:	f025 0503 	bic.w	r5, r5, #3
 80059ca:	3508      	adds	r5, #8
 80059cc:	2d0c      	cmp	r5, #12
 80059ce:	bf38      	it	cc
 80059d0:	250c      	movcc	r5, #12
 80059d2:	2d00      	cmp	r5, #0
 80059d4:	4607      	mov	r7, r0
 80059d6:	db01      	blt.n	80059dc <_malloc_r+0x1c>
 80059d8:	42a9      	cmp	r1, r5
 80059da:	d905      	bls.n	80059e8 <_malloc_r+0x28>
 80059dc:	230c      	movs	r3, #12
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	2600      	movs	r6, #0
 80059e2:	4630      	mov	r0, r6
 80059e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e8:	4e2e      	ldr	r6, [pc, #184]	; (8005aa4 <_malloc_r+0xe4>)
 80059ea:	f000 fd29 	bl	8006440 <__malloc_lock>
 80059ee:	6833      	ldr	r3, [r6, #0]
 80059f0:	461c      	mov	r4, r3
 80059f2:	bb34      	cbnz	r4, 8005a42 <_malloc_r+0x82>
 80059f4:	4629      	mov	r1, r5
 80059f6:	4638      	mov	r0, r7
 80059f8:	f7ff ffc2 	bl	8005980 <sbrk_aligned>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	4604      	mov	r4, r0
 8005a00:	d14d      	bne.n	8005a9e <_malloc_r+0xde>
 8005a02:	6834      	ldr	r4, [r6, #0]
 8005a04:	4626      	mov	r6, r4
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	d140      	bne.n	8005a8c <_malloc_r+0xcc>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	4638      	mov	r0, r7
 8005a10:	eb04 0803 	add.w	r8, r4, r3
 8005a14:	f000 fbaa 	bl	800616c <_sbrk_r>
 8005a18:	4580      	cmp	r8, r0
 8005a1a:	d13a      	bne.n	8005a92 <_malloc_r+0xd2>
 8005a1c:	6821      	ldr	r1, [r4, #0]
 8005a1e:	3503      	adds	r5, #3
 8005a20:	1a6d      	subs	r5, r5, r1
 8005a22:	f025 0503 	bic.w	r5, r5, #3
 8005a26:	3508      	adds	r5, #8
 8005a28:	2d0c      	cmp	r5, #12
 8005a2a:	bf38      	it	cc
 8005a2c:	250c      	movcc	r5, #12
 8005a2e:	4629      	mov	r1, r5
 8005a30:	4638      	mov	r0, r7
 8005a32:	f7ff ffa5 	bl	8005980 <sbrk_aligned>
 8005a36:	3001      	adds	r0, #1
 8005a38:	d02b      	beq.n	8005a92 <_malloc_r+0xd2>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	442b      	add	r3, r5
 8005a3e:	6023      	str	r3, [r4, #0]
 8005a40:	e00e      	b.n	8005a60 <_malloc_r+0xa0>
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	1b52      	subs	r2, r2, r5
 8005a46:	d41e      	bmi.n	8005a86 <_malloc_r+0xc6>
 8005a48:	2a0b      	cmp	r2, #11
 8005a4a:	d916      	bls.n	8005a7a <_malloc_r+0xba>
 8005a4c:	1961      	adds	r1, r4, r5
 8005a4e:	42a3      	cmp	r3, r4
 8005a50:	6025      	str	r5, [r4, #0]
 8005a52:	bf18      	it	ne
 8005a54:	6059      	strne	r1, [r3, #4]
 8005a56:	6863      	ldr	r3, [r4, #4]
 8005a58:	bf08      	it	eq
 8005a5a:	6031      	streq	r1, [r6, #0]
 8005a5c:	5162      	str	r2, [r4, r5]
 8005a5e:	604b      	str	r3, [r1, #4]
 8005a60:	4638      	mov	r0, r7
 8005a62:	f104 060b 	add.w	r6, r4, #11
 8005a66:	f000 fcf1 	bl	800644c <__malloc_unlock>
 8005a6a:	f026 0607 	bic.w	r6, r6, #7
 8005a6e:	1d23      	adds	r3, r4, #4
 8005a70:	1af2      	subs	r2, r6, r3
 8005a72:	d0b6      	beq.n	80059e2 <_malloc_r+0x22>
 8005a74:	1b9b      	subs	r3, r3, r6
 8005a76:	50a3      	str	r3, [r4, r2]
 8005a78:	e7b3      	b.n	80059e2 <_malloc_r+0x22>
 8005a7a:	6862      	ldr	r2, [r4, #4]
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	bf0c      	ite	eq
 8005a80:	6032      	streq	r2, [r6, #0]
 8005a82:	605a      	strne	r2, [r3, #4]
 8005a84:	e7ec      	b.n	8005a60 <_malloc_r+0xa0>
 8005a86:	4623      	mov	r3, r4
 8005a88:	6864      	ldr	r4, [r4, #4]
 8005a8a:	e7b2      	b.n	80059f2 <_malloc_r+0x32>
 8005a8c:	4634      	mov	r4, r6
 8005a8e:	6876      	ldr	r6, [r6, #4]
 8005a90:	e7b9      	b.n	8005a06 <_malloc_r+0x46>
 8005a92:	230c      	movs	r3, #12
 8005a94:	603b      	str	r3, [r7, #0]
 8005a96:	4638      	mov	r0, r7
 8005a98:	f000 fcd8 	bl	800644c <__malloc_unlock>
 8005a9c:	e7a1      	b.n	80059e2 <_malloc_r+0x22>
 8005a9e:	6025      	str	r5, [r4, #0]
 8005aa0:	e7de      	b.n	8005a60 <_malloc_r+0xa0>
 8005aa2:	bf00      	nop
 8005aa4:	20000aec 	.word	0x20000aec

08005aa8 <__sfputc_r>:
 8005aa8:	6893      	ldr	r3, [r2, #8]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	b410      	push	{r4}
 8005ab0:	6093      	str	r3, [r2, #8]
 8005ab2:	da08      	bge.n	8005ac6 <__sfputc_r+0x1e>
 8005ab4:	6994      	ldr	r4, [r2, #24]
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	db01      	blt.n	8005abe <__sfputc_r+0x16>
 8005aba:	290a      	cmp	r1, #10
 8005abc:	d103      	bne.n	8005ac6 <__sfputc_r+0x1e>
 8005abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ac2:	f000 bba7 	b.w	8006214 <__swbuf_r>
 8005ac6:	6813      	ldr	r3, [r2, #0]
 8005ac8:	1c58      	adds	r0, r3, #1
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	7019      	strb	r1, [r3, #0]
 8005ace:	4608      	mov	r0, r1
 8005ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <__sfputs_r>:
 8005ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad8:	4606      	mov	r6, r0
 8005ada:	460f      	mov	r7, r1
 8005adc:	4614      	mov	r4, r2
 8005ade:	18d5      	adds	r5, r2, r3
 8005ae0:	42ac      	cmp	r4, r5
 8005ae2:	d101      	bne.n	8005ae8 <__sfputs_r+0x12>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e007      	b.n	8005af8 <__sfputs_r+0x22>
 8005ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aec:	463a      	mov	r2, r7
 8005aee:	4630      	mov	r0, r6
 8005af0:	f7ff ffda 	bl	8005aa8 <__sfputc_r>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d1f3      	bne.n	8005ae0 <__sfputs_r+0xa>
 8005af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005afc <_vfiprintf_r>:
 8005afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b00:	460d      	mov	r5, r1
 8005b02:	b09d      	sub	sp, #116	; 0x74
 8005b04:	4614      	mov	r4, r2
 8005b06:	4698      	mov	r8, r3
 8005b08:	4606      	mov	r6, r0
 8005b0a:	b118      	cbz	r0, 8005b14 <_vfiprintf_r+0x18>
 8005b0c:	6983      	ldr	r3, [r0, #24]
 8005b0e:	b90b      	cbnz	r3, 8005b14 <_vfiprintf_r+0x18>
 8005b10:	f7ff fd80 	bl	8005614 <__sinit>
 8005b14:	4b89      	ldr	r3, [pc, #548]	; (8005d3c <_vfiprintf_r+0x240>)
 8005b16:	429d      	cmp	r5, r3
 8005b18:	d11b      	bne.n	8005b52 <_vfiprintf_r+0x56>
 8005b1a:	6875      	ldr	r5, [r6, #4]
 8005b1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b1e:	07d9      	lsls	r1, r3, #31
 8005b20:	d405      	bmi.n	8005b2e <_vfiprintf_r+0x32>
 8005b22:	89ab      	ldrh	r3, [r5, #12]
 8005b24:	059a      	lsls	r2, r3, #22
 8005b26:	d402      	bmi.n	8005b2e <_vfiprintf_r+0x32>
 8005b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b2a:	f7ff fe6e 	bl	800580a <__retarget_lock_acquire_recursive>
 8005b2e:	89ab      	ldrh	r3, [r5, #12]
 8005b30:	071b      	lsls	r3, r3, #28
 8005b32:	d501      	bpl.n	8005b38 <_vfiprintf_r+0x3c>
 8005b34:	692b      	ldr	r3, [r5, #16]
 8005b36:	b9eb      	cbnz	r3, 8005b74 <_vfiprintf_r+0x78>
 8005b38:	4629      	mov	r1, r5
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f000 fbce 	bl	80062dc <__swsetup_r>
 8005b40:	b1c0      	cbz	r0, 8005b74 <_vfiprintf_r+0x78>
 8005b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b44:	07dc      	lsls	r4, r3, #31
 8005b46:	d50e      	bpl.n	8005b66 <_vfiprintf_r+0x6a>
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b4c:	b01d      	add	sp, #116	; 0x74
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	4b7b      	ldr	r3, [pc, #492]	; (8005d40 <_vfiprintf_r+0x244>)
 8005b54:	429d      	cmp	r5, r3
 8005b56:	d101      	bne.n	8005b5c <_vfiprintf_r+0x60>
 8005b58:	68b5      	ldr	r5, [r6, #8]
 8005b5a:	e7df      	b.n	8005b1c <_vfiprintf_r+0x20>
 8005b5c:	4b79      	ldr	r3, [pc, #484]	; (8005d44 <_vfiprintf_r+0x248>)
 8005b5e:	429d      	cmp	r5, r3
 8005b60:	bf08      	it	eq
 8005b62:	68f5      	ldreq	r5, [r6, #12]
 8005b64:	e7da      	b.n	8005b1c <_vfiprintf_r+0x20>
 8005b66:	89ab      	ldrh	r3, [r5, #12]
 8005b68:	0598      	lsls	r0, r3, #22
 8005b6a:	d4ed      	bmi.n	8005b48 <_vfiprintf_r+0x4c>
 8005b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b6e:	f7ff fe4d 	bl	800580c <__retarget_lock_release_recursive>
 8005b72:	e7e9      	b.n	8005b48 <_vfiprintf_r+0x4c>
 8005b74:	2300      	movs	r3, #0
 8005b76:	9309      	str	r3, [sp, #36]	; 0x24
 8005b78:	2320      	movs	r3, #32
 8005b7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b82:	2330      	movs	r3, #48	; 0x30
 8005b84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d48 <_vfiprintf_r+0x24c>
 8005b88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b8c:	f04f 0901 	mov.w	r9, #1
 8005b90:	4623      	mov	r3, r4
 8005b92:	469a      	mov	sl, r3
 8005b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b98:	b10a      	cbz	r2, 8005b9e <_vfiprintf_r+0xa2>
 8005b9a:	2a25      	cmp	r2, #37	; 0x25
 8005b9c:	d1f9      	bne.n	8005b92 <_vfiprintf_r+0x96>
 8005b9e:	ebba 0b04 	subs.w	fp, sl, r4
 8005ba2:	d00b      	beq.n	8005bbc <_vfiprintf_r+0xc0>
 8005ba4:	465b      	mov	r3, fp
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4630      	mov	r0, r6
 8005bac:	f7ff ff93 	bl	8005ad6 <__sfputs_r>
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	f000 80aa 	beq.w	8005d0a <_vfiprintf_r+0x20e>
 8005bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bb8:	445a      	add	r2, fp
 8005bba:	9209      	str	r2, [sp, #36]	; 0x24
 8005bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80a2 	beq.w	8005d0a <_vfiprintf_r+0x20e>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd0:	f10a 0a01 	add.w	sl, sl, #1
 8005bd4:	9304      	str	r3, [sp, #16]
 8005bd6:	9307      	str	r3, [sp, #28]
 8005bd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bdc:	931a      	str	r3, [sp, #104]	; 0x68
 8005bde:	4654      	mov	r4, sl
 8005be0:	2205      	movs	r2, #5
 8005be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be6:	4858      	ldr	r0, [pc, #352]	; (8005d48 <_vfiprintf_r+0x24c>)
 8005be8:	f7fa fafa 	bl	80001e0 <memchr>
 8005bec:	9a04      	ldr	r2, [sp, #16]
 8005bee:	b9d8      	cbnz	r0, 8005c28 <_vfiprintf_r+0x12c>
 8005bf0:	06d1      	lsls	r1, r2, #27
 8005bf2:	bf44      	itt	mi
 8005bf4:	2320      	movmi	r3, #32
 8005bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bfa:	0713      	lsls	r3, r2, #28
 8005bfc:	bf44      	itt	mi
 8005bfe:	232b      	movmi	r3, #43	; 0x2b
 8005c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c04:	f89a 3000 	ldrb.w	r3, [sl]
 8005c08:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0a:	d015      	beq.n	8005c38 <_vfiprintf_r+0x13c>
 8005c0c:	9a07      	ldr	r2, [sp, #28]
 8005c0e:	4654      	mov	r4, sl
 8005c10:	2000      	movs	r0, #0
 8005c12:	f04f 0c0a 	mov.w	ip, #10
 8005c16:	4621      	mov	r1, r4
 8005c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c1c:	3b30      	subs	r3, #48	; 0x30
 8005c1e:	2b09      	cmp	r3, #9
 8005c20:	d94e      	bls.n	8005cc0 <_vfiprintf_r+0x1c4>
 8005c22:	b1b0      	cbz	r0, 8005c52 <_vfiprintf_r+0x156>
 8005c24:	9207      	str	r2, [sp, #28]
 8005c26:	e014      	b.n	8005c52 <_vfiprintf_r+0x156>
 8005c28:	eba0 0308 	sub.w	r3, r0, r8
 8005c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c30:	4313      	orrs	r3, r2
 8005c32:	9304      	str	r3, [sp, #16]
 8005c34:	46a2      	mov	sl, r4
 8005c36:	e7d2      	b.n	8005bde <_vfiprintf_r+0xe2>
 8005c38:	9b03      	ldr	r3, [sp, #12]
 8005c3a:	1d19      	adds	r1, r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	9103      	str	r1, [sp, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	bfbb      	ittet	lt
 8005c44:	425b      	neglt	r3, r3
 8005c46:	f042 0202 	orrlt.w	r2, r2, #2
 8005c4a:	9307      	strge	r3, [sp, #28]
 8005c4c:	9307      	strlt	r3, [sp, #28]
 8005c4e:	bfb8      	it	lt
 8005c50:	9204      	strlt	r2, [sp, #16]
 8005c52:	7823      	ldrb	r3, [r4, #0]
 8005c54:	2b2e      	cmp	r3, #46	; 0x2e
 8005c56:	d10c      	bne.n	8005c72 <_vfiprintf_r+0x176>
 8005c58:	7863      	ldrb	r3, [r4, #1]
 8005c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c5c:	d135      	bne.n	8005cca <_vfiprintf_r+0x1ce>
 8005c5e:	9b03      	ldr	r3, [sp, #12]
 8005c60:	1d1a      	adds	r2, r3, #4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	9203      	str	r2, [sp, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bfb8      	it	lt
 8005c6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c6e:	3402      	adds	r4, #2
 8005c70:	9305      	str	r3, [sp, #20]
 8005c72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d58 <_vfiprintf_r+0x25c>
 8005c76:	7821      	ldrb	r1, [r4, #0]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	4650      	mov	r0, sl
 8005c7c:	f7fa fab0 	bl	80001e0 <memchr>
 8005c80:	b140      	cbz	r0, 8005c94 <_vfiprintf_r+0x198>
 8005c82:	2340      	movs	r3, #64	; 0x40
 8005c84:	eba0 000a 	sub.w	r0, r0, sl
 8005c88:	fa03 f000 	lsl.w	r0, r3, r0
 8005c8c:	9b04      	ldr	r3, [sp, #16]
 8005c8e:	4303      	orrs	r3, r0
 8005c90:	3401      	adds	r4, #1
 8005c92:	9304      	str	r3, [sp, #16]
 8005c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c98:	482c      	ldr	r0, [pc, #176]	; (8005d4c <_vfiprintf_r+0x250>)
 8005c9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c9e:	2206      	movs	r2, #6
 8005ca0:	f7fa fa9e 	bl	80001e0 <memchr>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d03f      	beq.n	8005d28 <_vfiprintf_r+0x22c>
 8005ca8:	4b29      	ldr	r3, [pc, #164]	; (8005d50 <_vfiprintf_r+0x254>)
 8005caa:	bb1b      	cbnz	r3, 8005cf4 <_vfiprintf_r+0x1f8>
 8005cac:	9b03      	ldr	r3, [sp, #12]
 8005cae:	3307      	adds	r3, #7
 8005cb0:	f023 0307 	bic.w	r3, r3, #7
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	9303      	str	r3, [sp, #12]
 8005cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cba:	443b      	add	r3, r7
 8005cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbe:	e767      	b.n	8005b90 <_vfiprintf_r+0x94>
 8005cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	e7a5      	b.n	8005c16 <_vfiprintf_r+0x11a>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	3401      	adds	r4, #1
 8005cce:	9305      	str	r3, [sp, #20]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	f04f 0c0a 	mov.w	ip, #10
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cdc:	3a30      	subs	r2, #48	; 0x30
 8005cde:	2a09      	cmp	r2, #9
 8005ce0:	d903      	bls.n	8005cea <_vfiprintf_r+0x1ee>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0c5      	beq.n	8005c72 <_vfiprintf_r+0x176>
 8005ce6:	9105      	str	r1, [sp, #20]
 8005ce8:	e7c3      	b.n	8005c72 <_vfiprintf_r+0x176>
 8005cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cee:	4604      	mov	r4, r0
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e7f0      	b.n	8005cd6 <_vfiprintf_r+0x1da>
 8005cf4:	ab03      	add	r3, sp, #12
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	462a      	mov	r2, r5
 8005cfa:	4b16      	ldr	r3, [pc, #88]	; (8005d54 <_vfiprintf_r+0x258>)
 8005cfc:	a904      	add	r1, sp, #16
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f3af 8000 	nop.w
 8005d04:	4607      	mov	r7, r0
 8005d06:	1c78      	adds	r0, r7, #1
 8005d08:	d1d6      	bne.n	8005cb8 <_vfiprintf_r+0x1bc>
 8005d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d0c:	07d9      	lsls	r1, r3, #31
 8005d0e:	d405      	bmi.n	8005d1c <_vfiprintf_r+0x220>
 8005d10:	89ab      	ldrh	r3, [r5, #12]
 8005d12:	059a      	lsls	r2, r3, #22
 8005d14:	d402      	bmi.n	8005d1c <_vfiprintf_r+0x220>
 8005d16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d18:	f7ff fd78 	bl	800580c <__retarget_lock_release_recursive>
 8005d1c:	89ab      	ldrh	r3, [r5, #12]
 8005d1e:	065b      	lsls	r3, r3, #25
 8005d20:	f53f af12 	bmi.w	8005b48 <_vfiprintf_r+0x4c>
 8005d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d26:	e711      	b.n	8005b4c <_vfiprintf_r+0x50>
 8005d28:	ab03      	add	r3, sp, #12
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	462a      	mov	r2, r5
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <_vfiprintf_r+0x258>)
 8005d30:	a904      	add	r1, sp, #16
 8005d32:	4630      	mov	r0, r6
 8005d34:	f000 f880 	bl	8005e38 <_printf_i>
 8005d38:	e7e4      	b.n	8005d04 <_vfiprintf_r+0x208>
 8005d3a:	bf00      	nop
 8005d3c:	08006a38 	.word	0x08006a38
 8005d40:	08006a58 	.word	0x08006a58
 8005d44:	08006a18 	.word	0x08006a18
 8005d48:	08006a78 	.word	0x08006a78
 8005d4c:	08006a82 	.word	0x08006a82
 8005d50:	00000000 	.word	0x00000000
 8005d54:	08005ad7 	.word	0x08005ad7
 8005d58:	08006a7e 	.word	0x08006a7e

08005d5c <_printf_common>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	4616      	mov	r6, r2
 8005d62:	4699      	mov	r9, r3
 8005d64:	688a      	ldr	r2, [r1, #8]
 8005d66:	690b      	ldr	r3, [r1, #16]
 8005d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bfb8      	it	lt
 8005d70:	4613      	movlt	r3, r2
 8005d72:	6033      	str	r3, [r6, #0]
 8005d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d78:	4607      	mov	r7, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	b10a      	cbz	r2, 8005d82 <_printf_common+0x26>
 8005d7e:	3301      	adds	r3, #1
 8005d80:	6033      	str	r3, [r6, #0]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	0699      	lsls	r1, r3, #26
 8005d86:	bf42      	ittt	mi
 8005d88:	6833      	ldrmi	r3, [r6, #0]
 8005d8a:	3302      	addmi	r3, #2
 8005d8c:	6033      	strmi	r3, [r6, #0]
 8005d8e:	6825      	ldr	r5, [r4, #0]
 8005d90:	f015 0506 	ands.w	r5, r5, #6
 8005d94:	d106      	bne.n	8005da4 <_printf_common+0x48>
 8005d96:	f104 0a19 	add.w	sl, r4, #25
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	6832      	ldr	r2, [r6, #0]
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	42ab      	cmp	r3, r5
 8005da2:	dc26      	bgt.n	8005df2 <_printf_common+0x96>
 8005da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005da8:	1e13      	subs	r3, r2, #0
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	bf18      	it	ne
 8005dae:	2301      	movne	r3, #1
 8005db0:	0692      	lsls	r2, r2, #26
 8005db2:	d42b      	bmi.n	8005e0c <_printf_common+0xb0>
 8005db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005db8:	4649      	mov	r1, r9
 8005dba:	4638      	mov	r0, r7
 8005dbc:	47c0      	blx	r8
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d01e      	beq.n	8005e00 <_printf_common+0xa4>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	68e5      	ldr	r5, [r4, #12]
 8005dc6:	6832      	ldr	r2, [r6, #0]
 8005dc8:	f003 0306 	and.w	r3, r3, #6
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	bf08      	it	eq
 8005dd0:	1aad      	subeq	r5, r5, r2
 8005dd2:	68a3      	ldr	r3, [r4, #8]
 8005dd4:	6922      	ldr	r2, [r4, #16]
 8005dd6:	bf0c      	ite	eq
 8005dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ddc:	2500      	movne	r5, #0
 8005dde:	4293      	cmp	r3, r2
 8005de0:	bfc4      	itt	gt
 8005de2:	1a9b      	subgt	r3, r3, r2
 8005de4:	18ed      	addgt	r5, r5, r3
 8005de6:	2600      	movs	r6, #0
 8005de8:	341a      	adds	r4, #26
 8005dea:	42b5      	cmp	r5, r6
 8005dec:	d11a      	bne.n	8005e24 <_printf_common+0xc8>
 8005dee:	2000      	movs	r0, #0
 8005df0:	e008      	b.n	8005e04 <_printf_common+0xa8>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4652      	mov	r2, sl
 8005df6:	4649      	mov	r1, r9
 8005df8:	4638      	mov	r0, r7
 8005dfa:	47c0      	blx	r8
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d103      	bne.n	8005e08 <_printf_common+0xac>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	3501      	adds	r5, #1
 8005e0a:	e7c6      	b.n	8005d9a <_printf_common+0x3e>
 8005e0c:	18e1      	adds	r1, r4, r3
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	2030      	movs	r0, #48	; 0x30
 8005e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e16:	4422      	add	r2, r4
 8005e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e20:	3302      	adds	r3, #2
 8005e22:	e7c7      	b.n	8005db4 <_printf_common+0x58>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4622      	mov	r2, r4
 8005e28:	4649      	mov	r1, r9
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	47c0      	blx	r8
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d0e6      	beq.n	8005e00 <_printf_common+0xa4>
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7d9      	b.n	8005dea <_printf_common+0x8e>
	...

08005e38 <_printf_i>:
 8005e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	7e0f      	ldrb	r7, [r1, #24]
 8005e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e40:	2f78      	cmp	r7, #120	; 0x78
 8005e42:	4691      	mov	r9, r2
 8005e44:	4680      	mov	r8, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	469a      	mov	sl, r3
 8005e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e4e:	d807      	bhi.n	8005e60 <_printf_i+0x28>
 8005e50:	2f62      	cmp	r7, #98	; 0x62
 8005e52:	d80a      	bhi.n	8005e6a <_printf_i+0x32>
 8005e54:	2f00      	cmp	r7, #0
 8005e56:	f000 80d8 	beq.w	800600a <_printf_i+0x1d2>
 8005e5a:	2f58      	cmp	r7, #88	; 0x58
 8005e5c:	f000 80a3 	beq.w	8005fa6 <_printf_i+0x16e>
 8005e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e68:	e03a      	b.n	8005ee0 <_printf_i+0xa8>
 8005e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e6e:	2b15      	cmp	r3, #21
 8005e70:	d8f6      	bhi.n	8005e60 <_printf_i+0x28>
 8005e72:	a101      	add	r1, pc, #4	; (adr r1, 8005e78 <_printf_i+0x40>)
 8005e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ee5 	.word	0x08005ee5
 8005e80:	08005e61 	.word	0x08005e61
 8005e84:	08005e61 	.word	0x08005e61
 8005e88:	08005e61 	.word	0x08005e61
 8005e8c:	08005e61 	.word	0x08005e61
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e61 	.word	0x08005e61
 8005e98:	08005e61 	.word	0x08005e61
 8005e9c:	08005e61 	.word	0x08005e61
 8005ea0:	08005e61 	.word	0x08005e61
 8005ea4:	08005ff1 	.word	0x08005ff1
 8005ea8:	08005f15 	.word	0x08005f15
 8005eac:	08005fd3 	.word	0x08005fd3
 8005eb0:	08005e61 	.word	0x08005e61
 8005eb4:	08005e61 	.word	0x08005e61
 8005eb8:	08006013 	.word	0x08006013
 8005ebc:	08005e61 	.word	0x08005e61
 8005ec0:	08005f15 	.word	0x08005f15
 8005ec4:	08005e61 	.word	0x08005e61
 8005ec8:	08005e61 	.word	0x08005e61
 8005ecc:	08005fdb 	.word	0x08005fdb
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	602a      	str	r2, [r5, #0]
 8005ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0a3      	b.n	800602c <_printf_i+0x1f4>
 8005ee4:	6820      	ldr	r0, [r4, #0]
 8005ee6:	6829      	ldr	r1, [r5, #0]
 8005ee8:	0606      	lsls	r6, r0, #24
 8005eea:	f101 0304 	add.w	r3, r1, #4
 8005eee:	d50a      	bpl.n	8005f06 <_printf_i+0xce>
 8005ef0:	680e      	ldr	r6, [r1, #0]
 8005ef2:	602b      	str	r3, [r5, #0]
 8005ef4:	2e00      	cmp	r6, #0
 8005ef6:	da03      	bge.n	8005f00 <_printf_i+0xc8>
 8005ef8:	232d      	movs	r3, #45	; 0x2d
 8005efa:	4276      	negs	r6, r6
 8005efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f00:	485e      	ldr	r0, [pc, #376]	; (800607c <_printf_i+0x244>)
 8005f02:	230a      	movs	r3, #10
 8005f04:	e019      	b.n	8005f3a <_printf_i+0x102>
 8005f06:	680e      	ldr	r6, [r1, #0]
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f0e:	bf18      	it	ne
 8005f10:	b236      	sxthne	r6, r6
 8005f12:	e7ef      	b.n	8005ef4 <_printf_i+0xbc>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	6820      	ldr	r0, [r4, #0]
 8005f18:	1d19      	adds	r1, r3, #4
 8005f1a:	6029      	str	r1, [r5, #0]
 8005f1c:	0601      	lsls	r1, r0, #24
 8005f1e:	d501      	bpl.n	8005f24 <_printf_i+0xec>
 8005f20:	681e      	ldr	r6, [r3, #0]
 8005f22:	e002      	b.n	8005f2a <_printf_i+0xf2>
 8005f24:	0646      	lsls	r6, r0, #25
 8005f26:	d5fb      	bpl.n	8005f20 <_printf_i+0xe8>
 8005f28:	881e      	ldrh	r6, [r3, #0]
 8005f2a:	4854      	ldr	r0, [pc, #336]	; (800607c <_printf_i+0x244>)
 8005f2c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f2e:	bf0c      	ite	eq
 8005f30:	2308      	moveq	r3, #8
 8005f32:	230a      	movne	r3, #10
 8005f34:	2100      	movs	r1, #0
 8005f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f3a:	6865      	ldr	r5, [r4, #4]
 8005f3c:	60a5      	str	r5, [r4, #8]
 8005f3e:	2d00      	cmp	r5, #0
 8005f40:	bfa2      	ittt	ge
 8005f42:	6821      	ldrge	r1, [r4, #0]
 8005f44:	f021 0104 	bicge.w	r1, r1, #4
 8005f48:	6021      	strge	r1, [r4, #0]
 8005f4a:	b90e      	cbnz	r6, 8005f50 <_printf_i+0x118>
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	d04d      	beq.n	8005fec <_printf_i+0x1b4>
 8005f50:	4615      	mov	r5, r2
 8005f52:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f56:	fb03 6711 	mls	r7, r3, r1, r6
 8005f5a:	5dc7      	ldrb	r7, [r0, r7]
 8005f5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f60:	4637      	mov	r7, r6
 8005f62:	42bb      	cmp	r3, r7
 8005f64:	460e      	mov	r6, r1
 8005f66:	d9f4      	bls.n	8005f52 <_printf_i+0x11a>
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d10b      	bne.n	8005f84 <_printf_i+0x14c>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	07de      	lsls	r6, r3, #31
 8005f70:	d508      	bpl.n	8005f84 <_printf_i+0x14c>
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	6861      	ldr	r1, [r4, #4]
 8005f76:	4299      	cmp	r1, r3
 8005f78:	bfde      	ittt	le
 8005f7a:	2330      	movle	r3, #48	; 0x30
 8005f7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f84:	1b52      	subs	r2, r2, r5
 8005f86:	6122      	str	r2, [r4, #16]
 8005f88:	f8cd a000 	str.w	sl, [sp]
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	aa03      	add	r2, sp, #12
 8005f90:	4621      	mov	r1, r4
 8005f92:	4640      	mov	r0, r8
 8005f94:	f7ff fee2 	bl	8005d5c <_printf_common>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d14c      	bne.n	8006036 <_printf_i+0x1fe>
 8005f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa0:	b004      	add	sp, #16
 8005fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa6:	4835      	ldr	r0, [pc, #212]	; (800607c <_printf_i+0x244>)
 8005fa8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fac:	6829      	ldr	r1, [r5, #0]
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fb4:	6029      	str	r1, [r5, #0]
 8005fb6:	061d      	lsls	r5, r3, #24
 8005fb8:	d514      	bpl.n	8005fe4 <_printf_i+0x1ac>
 8005fba:	07df      	lsls	r7, r3, #31
 8005fbc:	bf44      	itt	mi
 8005fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc2:	6023      	strmi	r3, [r4, #0]
 8005fc4:	b91e      	cbnz	r6, 8005fce <_printf_i+0x196>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	f023 0320 	bic.w	r3, r3, #32
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	2310      	movs	r3, #16
 8005fd0:	e7b0      	b.n	8005f34 <_printf_i+0xfc>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	f043 0320 	orr.w	r3, r3, #32
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	2378      	movs	r3, #120	; 0x78
 8005fdc:	4828      	ldr	r0, [pc, #160]	; (8006080 <_printf_i+0x248>)
 8005fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fe2:	e7e3      	b.n	8005fac <_printf_i+0x174>
 8005fe4:	0659      	lsls	r1, r3, #25
 8005fe6:	bf48      	it	mi
 8005fe8:	b2b6      	uxthmi	r6, r6
 8005fea:	e7e6      	b.n	8005fba <_printf_i+0x182>
 8005fec:	4615      	mov	r5, r2
 8005fee:	e7bb      	b.n	8005f68 <_printf_i+0x130>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	6826      	ldr	r6, [r4, #0]
 8005ff4:	6961      	ldr	r1, [r4, #20]
 8005ff6:	1d18      	adds	r0, r3, #4
 8005ff8:	6028      	str	r0, [r5, #0]
 8005ffa:	0635      	lsls	r5, r6, #24
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	d501      	bpl.n	8006004 <_printf_i+0x1cc>
 8006000:	6019      	str	r1, [r3, #0]
 8006002:	e002      	b.n	800600a <_printf_i+0x1d2>
 8006004:	0670      	lsls	r0, r6, #25
 8006006:	d5fb      	bpl.n	8006000 <_printf_i+0x1c8>
 8006008:	8019      	strh	r1, [r3, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	4615      	mov	r5, r2
 8006010:	e7ba      	b.n	8005f88 <_printf_i+0x150>
 8006012:	682b      	ldr	r3, [r5, #0]
 8006014:	1d1a      	adds	r2, r3, #4
 8006016:	602a      	str	r2, [r5, #0]
 8006018:	681d      	ldr	r5, [r3, #0]
 800601a:	6862      	ldr	r2, [r4, #4]
 800601c:	2100      	movs	r1, #0
 800601e:	4628      	mov	r0, r5
 8006020:	f7fa f8de 	bl	80001e0 <memchr>
 8006024:	b108      	cbz	r0, 800602a <_printf_i+0x1f2>
 8006026:	1b40      	subs	r0, r0, r5
 8006028:	6060      	str	r0, [r4, #4]
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	6123      	str	r3, [r4, #16]
 800602e:	2300      	movs	r3, #0
 8006030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006034:	e7a8      	b.n	8005f88 <_printf_i+0x150>
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	462a      	mov	r2, r5
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	47d0      	blx	sl
 8006040:	3001      	adds	r0, #1
 8006042:	d0ab      	beq.n	8005f9c <_printf_i+0x164>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	079b      	lsls	r3, r3, #30
 8006048:	d413      	bmi.n	8006072 <_printf_i+0x23a>
 800604a:	68e0      	ldr	r0, [r4, #12]
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	4298      	cmp	r0, r3
 8006050:	bfb8      	it	lt
 8006052:	4618      	movlt	r0, r3
 8006054:	e7a4      	b.n	8005fa0 <_printf_i+0x168>
 8006056:	2301      	movs	r3, #1
 8006058:	4632      	mov	r2, r6
 800605a:	4649      	mov	r1, r9
 800605c:	4640      	mov	r0, r8
 800605e:	47d0      	blx	sl
 8006060:	3001      	adds	r0, #1
 8006062:	d09b      	beq.n	8005f9c <_printf_i+0x164>
 8006064:	3501      	adds	r5, #1
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	9903      	ldr	r1, [sp, #12]
 800606a:	1a5b      	subs	r3, r3, r1
 800606c:	42ab      	cmp	r3, r5
 800606e:	dcf2      	bgt.n	8006056 <_printf_i+0x21e>
 8006070:	e7eb      	b.n	800604a <_printf_i+0x212>
 8006072:	2500      	movs	r5, #0
 8006074:	f104 0619 	add.w	r6, r4, #25
 8006078:	e7f5      	b.n	8006066 <_printf_i+0x22e>
 800607a:	bf00      	nop
 800607c:	08006a89 	.word	0x08006a89
 8006080:	08006a9a 	.word	0x08006a9a

08006084 <_putc_r>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	460d      	mov	r5, r1
 8006088:	4614      	mov	r4, r2
 800608a:	4606      	mov	r6, r0
 800608c:	b118      	cbz	r0, 8006096 <_putc_r+0x12>
 800608e:	6983      	ldr	r3, [r0, #24]
 8006090:	b90b      	cbnz	r3, 8006096 <_putc_r+0x12>
 8006092:	f7ff fabf 	bl	8005614 <__sinit>
 8006096:	4b1c      	ldr	r3, [pc, #112]	; (8006108 <_putc_r+0x84>)
 8006098:	429c      	cmp	r4, r3
 800609a:	d124      	bne.n	80060e6 <_putc_r+0x62>
 800609c:	6874      	ldr	r4, [r6, #4]
 800609e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060a0:	07d8      	lsls	r0, r3, #31
 80060a2:	d405      	bmi.n	80060b0 <_putc_r+0x2c>
 80060a4:	89a3      	ldrh	r3, [r4, #12]
 80060a6:	0599      	lsls	r1, r3, #22
 80060a8:	d402      	bmi.n	80060b0 <_putc_r+0x2c>
 80060aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ac:	f7ff fbad 	bl	800580a <__retarget_lock_acquire_recursive>
 80060b0:	68a3      	ldr	r3, [r4, #8]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	60a3      	str	r3, [r4, #8]
 80060b8:	da05      	bge.n	80060c6 <_putc_r+0x42>
 80060ba:	69a2      	ldr	r2, [r4, #24]
 80060bc:	4293      	cmp	r3, r2
 80060be:	db1c      	blt.n	80060fa <_putc_r+0x76>
 80060c0:	b2eb      	uxtb	r3, r5
 80060c2:	2b0a      	cmp	r3, #10
 80060c4:	d019      	beq.n	80060fa <_putc_r+0x76>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	6022      	str	r2, [r4, #0]
 80060cc:	701d      	strb	r5, [r3, #0]
 80060ce:	b2ed      	uxtb	r5, r5
 80060d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060d2:	07da      	lsls	r2, r3, #31
 80060d4:	d405      	bmi.n	80060e2 <_putc_r+0x5e>
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	059b      	lsls	r3, r3, #22
 80060da:	d402      	bmi.n	80060e2 <_putc_r+0x5e>
 80060dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060de:	f7ff fb95 	bl	800580c <__retarget_lock_release_recursive>
 80060e2:	4628      	mov	r0, r5
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
 80060e6:	4b09      	ldr	r3, [pc, #36]	; (800610c <_putc_r+0x88>)
 80060e8:	429c      	cmp	r4, r3
 80060ea:	d101      	bne.n	80060f0 <_putc_r+0x6c>
 80060ec:	68b4      	ldr	r4, [r6, #8]
 80060ee:	e7d6      	b.n	800609e <_putc_r+0x1a>
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <_putc_r+0x8c>)
 80060f2:	429c      	cmp	r4, r3
 80060f4:	bf08      	it	eq
 80060f6:	68f4      	ldreq	r4, [r6, #12]
 80060f8:	e7d1      	b.n	800609e <_putc_r+0x1a>
 80060fa:	4629      	mov	r1, r5
 80060fc:	4622      	mov	r2, r4
 80060fe:	4630      	mov	r0, r6
 8006100:	f000 f888 	bl	8006214 <__swbuf_r>
 8006104:	4605      	mov	r5, r0
 8006106:	e7e3      	b.n	80060d0 <_putc_r+0x4c>
 8006108:	08006a38 	.word	0x08006a38
 800610c:	08006a58 	.word	0x08006a58
 8006110:	08006a18 	.word	0x08006a18

08006114 <__srget_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	460c      	mov	r4, r1
 8006118:	4605      	mov	r5, r0
 800611a:	b118      	cbz	r0, 8006124 <__srget_r+0x10>
 800611c:	6983      	ldr	r3, [r0, #24]
 800611e:	b90b      	cbnz	r3, 8006124 <__srget_r+0x10>
 8006120:	f7ff fa78 	bl	8005614 <__sinit>
 8006124:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <__srget_r+0x4c>)
 8006126:	429c      	cmp	r4, r3
 8006128:	d10d      	bne.n	8006146 <__srget_r+0x32>
 800612a:	686c      	ldr	r4, [r5, #4]
 800612c:	4621      	mov	r1, r4
 800612e:	4628      	mov	r0, r5
 8006130:	f000 f9ae 	bl	8006490 <__srefill_r>
 8006134:	b988      	cbnz	r0, 800615a <__srget_r+0x46>
 8006136:	6863      	ldr	r3, [r4, #4]
 8006138:	3b01      	subs	r3, #1
 800613a:	6063      	str	r3, [r4, #4]
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	6022      	str	r2, [r4, #0]
 8006142:	7818      	ldrb	r0, [r3, #0]
 8006144:	bd38      	pop	{r3, r4, r5, pc}
 8006146:	4b07      	ldr	r3, [pc, #28]	; (8006164 <__srget_r+0x50>)
 8006148:	429c      	cmp	r4, r3
 800614a:	d101      	bne.n	8006150 <__srget_r+0x3c>
 800614c:	68ac      	ldr	r4, [r5, #8]
 800614e:	e7ed      	b.n	800612c <__srget_r+0x18>
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <__srget_r+0x54>)
 8006152:	429c      	cmp	r4, r3
 8006154:	bf08      	it	eq
 8006156:	68ec      	ldreq	r4, [r5, #12]
 8006158:	e7e8      	b.n	800612c <__srget_r+0x18>
 800615a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800615e:	e7f1      	b.n	8006144 <__srget_r+0x30>
 8006160:	08006a38 	.word	0x08006a38
 8006164:	08006a58 	.word	0x08006a58
 8006168:	08006a18 	.word	0x08006a18

0800616c <_sbrk_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4d06      	ldr	r5, [pc, #24]	; (8006188 <_sbrk_r+0x1c>)
 8006170:	2300      	movs	r3, #0
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	602b      	str	r3, [r5, #0]
 8006178:	f7fb f9e8 	bl	800154c <_sbrk>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_sbrk_r+0x1a>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b103      	cbz	r3, 8006186 <_sbrk_r+0x1a>
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	20000af4 	.word	0x20000af4

0800618c <__sread>:
 800618c:	b510      	push	{r4, lr}
 800618e:	460c      	mov	r4, r1
 8006190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006194:	f000 f960 	bl	8006458 <_read_r>
 8006198:	2800      	cmp	r0, #0
 800619a:	bfab      	itete	ge
 800619c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800619e:	89a3      	ldrhlt	r3, [r4, #12]
 80061a0:	181b      	addge	r3, r3, r0
 80061a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061a6:	bfac      	ite	ge
 80061a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80061aa:	81a3      	strhlt	r3, [r4, #12]
 80061ac:	bd10      	pop	{r4, pc}

080061ae <__swrite>:
 80061ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b2:	461f      	mov	r7, r3
 80061b4:	898b      	ldrh	r3, [r1, #12]
 80061b6:	05db      	lsls	r3, r3, #23
 80061b8:	4605      	mov	r5, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	4616      	mov	r6, r2
 80061be:	d505      	bpl.n	80061cc <__swrite+0x1e>
 80061c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c4:	2302      	movs	r3, #2
 80061c6:	2200      	movs	r2, #0
 80061c8:	f000 f928 	bl	800641c <_lseek_r>
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d6:	81a3      	strh	r3, [r4, #12]
 80061d8:	4632      	mov	r2, r6
 80061da:	463b      	mov	r3, r7
 80061dc:	4628      	mov	r0, r5
 80061de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e2:	f000 b869 	b.w	80062b8 <_write_r>

080061e6 <__sseek>:
 80061e6:	b510      	push	{r4, lr}
 80061e8:	460c      	mov	r4, r1
 80061ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ee:	f000 f915 	bl	800641c <_lseek_r>
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	bf15      	itete	ne
 80061f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80061fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006202:	81a3      	strheq	r3, [r4, #12]
 8006204:	bf18      	it	ne
 8006206:	81a3      	strhne	r3, [r4, #12]
 8006208:	bd10      	pop	{r4, pc}

0800620a <__sclose>:
 800620a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620e:	f000 b8d3 	b.w	80063b8 <_close_r>
	...

08006214 <__swbuf_r>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	460e      	mov	r6, r1
 8006218:	4614      	mov	r4, r2
 800621a:	4605      	mov	r5, r0
 800621c:	b118      	cbz	r0, 8006226 <__swbuf_r+0x12>
 800621e:	6983      	ldr	r3, [r0, #24]
 8006220:	b90b      	cbnz	r3, 8006226 <__swbuf_r+0x12>
 8006222:	f7ff f9f7 	bl	8005614 <__sinit>
 8006226:	4b21      	ldr	r3, [pc, #132]	; (80062ac <__swbuf_r+0x98>)
 8006228:	429c      	cmp	r4, r3
 800622a:	d12b      	bne.n	8006284 <__swbuf_r+0x70>
 800622c:	686c      	ldr	r4, [r5, #4]
 800622e:	69a3      	ldr	r3, [r4, #24]
 8006230:	60a3      	str	r3, [r4, #8]
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	071a      	lsls	r2, r3, #28
 8006236:	d52f      	bpl.n	8006298 <__swbuf_r+0x84>
 8006238:	6923      	ldr	r3, [r4, #16]
 800623a:	b36b      	cbz	r3, 8006298 <__swbuf_r+0x84>
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	6820      	ldr	r0, [r4, #0]
 8006240:	1ac0      	subs	r0, r0, r3
 8006242:	6963      	ldr	r3, [r4, #20]
 8006244:	b2f6      	uxtb	r6, r6
 8006246:	4283      	cmp	r3, r0
 8006248:	4637      	mov	r7, r6
 800624a:	dc04      	bgt.n	8006256 <__swbuf_r+0x42>
 800624c:	4621      	mov	r1, r4
 800624e:	4628      	mov	r0, r5
 8006250:	f7ff f93a 	bl	80054c8 <_fflush_r>
 8006254:	bb30      	cbnz	r0, 80062a4 <__swbuf_r+0x90>
 8006256:	68a3      	ldr	r3, [r4, #8]
 8006258:	3b01      	subs	r3, #1
 800625a:	60a3      	str	r3, [r4, #8]
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	6022      	str	r2, [r4, #0]
 8006262:	701e      	strb	r6, [r3, #0]
 8006264:	6963      	ldr	r3, [r4, #20]
 8006266:	3001      	adds	r0, #1
 8006268:	4283      	cmp	r3, r0
 800626a:	d004      	beq.n	8006276 <__swbuf_r+0x62>
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	07db      	lsls	r3, r3, #31
 8006270:	d506      	bpl.n	8006280 <__swbuf_r+0x6c>
 8006272:	2e0a      	cmp	r6, #10
 8006274:	d104      	bne.n	8006280 <__swbuf_r+0x6c>
 8006276:	4621      	mov	r1, r4
 8006278:	4628      	mov	r0, r5
 800627a:	f7ff f925 	bl	80054c8 <_fflush_r>
 800627e:	b988      	cbnz	r0, 80062a4 <__swbuf_r+0x90>
 8006280:	4638      	mov	r0, r7
 8006282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006284:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <__swbuf_r+0x9c>)
 8006286:	429c      	cmp	r4, r3
 8006288:	d101      	bne.n	800628e <__swbuf_r+0x7a>
 800628a:	68ac      	ldr	r4, [r5, #8]
 800628c:	e7cf      	b.n	800622e <__swbuf_r+0x1a>
 800628e:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <__swbuf_r+0xa0>)
 8006290:	429c      	cmp	r4, r3
 8006292:	bf08      	it	eq
 8006294:	68ec      	ldreq	r4, [r5, #12]
 8006296:	e7ca      	b.n	800622e <__swbuf_r+0x1a>
 8006298:	4621      	mov	r1, r4
 800629a:	4628      	mov	r0, r5
 800629c:	f000 f81e 	bl	80062dc <__swsetup_r>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d0cb      	beq.n	800623c <__swbuf_r+0x28>
 80062a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80062a8:	e7ea      	b.n	8006280 <__swbuf_r+0x6c>
 80062aa:	bf00      	nop
 80062ac:	08006a38 	.word	0x08006a38
 80062b0:	08006a58 	.word	0x08006a58
 80062b4:	08006a18 	.word	0x08006a18

080062b8 <_write_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d07      	ldr	r5, [pc, #28]	; (80062d8 <_write_r+0x20>)
 80062bc:	4604      	mov	r4, r0
 80062be:	4608      	mov	r0, r1
 80062c0:	4611      	mov	r1, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	602a      	str	r2, [r5, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f7fa feda 	bl	8001080 <_write>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_write_r+0x1e>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_write_r+0x1e>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	20000af4 	.word	0x20000af4

080062dc <__swsetup_r>:
 80062dc:	4b32      	ldr	r3, [pc, #200]	; (80063a8 <__swsetup_r+0xcc>)
 80062de:	b570      	push	{r4, r5, r6, lr}
 80062e0:	681d      	ldr	r5, [r3, #0]
 80062e2:	4606      	mov	r6, r0
 80062e4:	460c      	mov	r4, r1
 80062e6:	b125      	cbz	r5, 80062f2 <__swsetup_r+0x16>
 80062e8:	69ab      	ldr	r3, [r5, #24]
 80062ea:	b913      	cbnz	r3, 80062f2 <__swsetup_r+0x16>
 80062ec:	4628      	mov	r0, r5
 80062ee:	f7ff f991 	bl	8005614 <__sinit>
 80062f2:	4b2e      	ldr	r3, [pc, #184]	; (80063ac <__swsetup_r+0xd0>)
 80062f4:	429c      	cmp	r4, r3
 80062f6:	d10f      	bne.n	8006318 <__swsetup_r+0x3c>
 80062f8:	686c      	ldr	r4, [r5, #4]
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006300:	0719      	lsls	r1, r3, #28
 8006302:	d42c      	bmi.n	800635e <__swsetup_r+0x82>
 8006304:	06dd      	lsls	r5, r3, #27
 8006306:	d411      	bmi.n	800632c <__swsetup_r+0x50>
 8006308:	2309      	movs	r3, #9
 800630a:	6033      	str	r3, [r6, #0]
 800630c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006310:	81a3      	strh	r3, [r4, #12]
 8006312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006316:	e03e      	b.n	8006396 <__swsetup_r+0xba>
 8006318:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <__swsetup_r+0xd4>)
 800631a:	429c      	cmp	r4, r3
 800631c:	d101      	bne.n	8006322 <__swsetup_r+0x46>
 800631e:	68ac      	ldr	r4, [r5, #8]
 8006320:	e7eb      	b.n	80062fa <__swsetup_r+0x1e>
 8006322:	4b24      	ldr	r3, [pc, #144]	; (80063b4 <__swsetup_r+0xd8>)
 8006324:	429c      	cmp	r4, r3
 8006326:	bf08      	it	eq
 8006328:	68ec      	ldreq	r4, [r5, #12]
 800632a:	e7e6      	b.n	80062fa <__swsetup_r+0x1e>
 800632c:	0758      	lsls	r0, r3, #29
 800632e:	d512      	bpl.n	8006356 <__swsetup_r+0x7a>
 8006330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006332:	b141      	cbz	r1, 8006346 <__swsetup_r+0x6a>
 8006334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006338:	4299      	cmp	r1, r3
 800633a:	d002      	beq.n	8006342 <__swsetup_r+0x66>
 800633c:	4630      	mov	r0, r6
 800633e:	f7ff fad3 	bl	80058e8 <_free_r>
 8006342:	2300      	movs	r3, #0
 8006344:	6363      	str	r3, [r4, #52]	; 0x34
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800634c:	81a3      	strh	r3, [r4, #12]
 800634e:	2300      	movs	r3, #0
 8006350:	6063      	str	r3, [r4, #4]
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	89a3      	ldrh	r3, [r4, #12]
 8006358:	f043 0308 	orr.w	r3, r3, #8
 800635c:	81a3      	strh	r3, [r4, #12]
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	b94b      	cbnz	r3, 8006376 <__swsetup_r+0x9a>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636c:	d003      	beq.n	8006376 <__swsetup_r+0x9a>
 800636e:	4621      	mov	r1, r4
 8006370:	4630      	mov	r0, r6
 8006372:	f7ff fa71 	bl	8005858 <__smakebuf_r>
 8006376:	89a0      	ldrh	r0, [r4, #12]
 8006378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800637c:	f010 0301 	ands.w	r3, r0, #1
 8006380:	d00a      	beq.n	8006398 <__swsetup_r+0xbc>
 8006382:	2300      	movs	r3, #0
 8006384:	60a3      	str	r3, [r4, #8]
 8006386:	6963      	ldr	r3, [r4, #20]
 8006388:	425b      	negs	r3, r3
 800638a:	61a3      	str	r3, [r4, #24]
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	b943      	cbnz	r3, 80063a2 <__swsetup_r+0xc6>
 8006390:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006394:	d1ba      	bne.n	800630c <__swsetup_r+0x30>
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	0781      	lsls	r1, r0, #30
 800639a:	bf58      	it	pl
 800639c:	6963      	ldrpl	r3, [r4, #20]
 800639e:	60a3      	str	r3, [r4, #8]
 80063a0:	e7f4      	b.n	800638c <__swsetup_r+0xb0>
 80063a2:	2000      	movs	r0, #0
 80063a4:	e7f7      	b.n	8006396 <__swsetup_r+0xba>
 80063a6:	bf00      	nop
 80063a8:	2000000c 	.word	0x2000000c
 80063ac:	08006a38 	.word	0x08006a38
 80063b0:	08006a58 	.word	0x08006a58
 80063b4:	08006a18 	.word	0x08006a18

080063b8 <_close_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d06      	ldr	r5, [pc, #24]	; (80063d4 <_close_r+0x1c>)
 80063bc:	2300      	movs	r3, #0
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	602b      	str	r3, [r5, #0]
 80063c4:	f7fb f88e 	bl	80014e4 <_close>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_close_r+0x1a>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_close_r+0x1a>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	20000af4 	.word	0x20000af4

080063d8 <_fstat_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4d07      	ldr	r5, [pc, #28]	; (80063f8 <_fstat_r+0x20>)
 80063dc:	2300      	movs	r3, #0
 80063de:	4604      	mov	r4, r0
 80063e0:	4608      	mov	r0, r1
 80063e2:	4611      	mov	r1, r2
 80063e4:	602b      	str	r3, [r5, #0]
 80063e6:	f7fb f889 	bl	80014fc <_fstat>
 80063ea:	1c43      	adds	r3, r0, #1
 80063ec:	d102      	bne.n	80063f4 <_fstat_r+0x1c>
 80063ee:	682b      	ldr	r3, [r5, #0]
 80063f0:	b103      	cbz	r3, 80063f4 <_fstat_r+0x1c>
 80063f2:	6023      	str	r3, [r4, #0]
 80063f4:	bd38      	pop	{r3, r4, r5, pc}
 80063f6:	bf00      	nop
 80063f8:	20000af4 	.word	0x20000af4

080063fc <_isatty_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d06      	ldr	r5, [pc, #24]	; (8006418 <_isatty_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f7fb f888 	bl	800151c <_isatty>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_isatty_r+0x1a>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_isatty_r+0x1a>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20000af4 	.word	0x20000af4

0800641c <_lseek_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d07      	ldr	r5, [pc, #28]	; (800643c <_lseek_r+0x20>)
 8006420:	4604      	mov	r4, r0
 8006422:	4608      	mov	r0, r1
 8006424:	4611      	mov	r1, r2
 8006426:	2200      	movs	r2, #0
 8006428:	602a      	str	r2, [r5, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	f7fb f881 	bl	8001532 <_lseek>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_lseek_r+0x1e>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	b103      	cbz	r3, 800643a <_lseek_r+0x1e>
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	20000af4 	.word	0x20000af4

08006440 <__malloc_lock>:
 8006440:	4801      	ldr	r0, [pc, #4]	; (8006448 <__malloc_lock+0x8>)
 8006442:	f7ff b9e2 	b.w	800580a <__retarget_lock_acquire_recursive>
 8006446:	bf00      	nop
 8006448:	20000ae8 	.word	0x20000ae8

0800644c <__malloc_unlock>:
 800644c:	4801      	ldr	r0, [pc, #4]	; (8006454 <__malloc_unlock+0x8>)
 800644e:	f7ff b9dd 	b.w	800580c <__retarget_lock_release_recursive>
 8006452:	bf00      	nop
 8006454:	20000ae8 	.word	0x20000ae8

08006458 <_read_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d07      	ldr	r5, [pc, #28]	; (8006478 <_read_r+0x20>)
 800645c:	4604      	mov	r4, r0
 800645e:	4608      	mov	r0, r1
 8006460:	4611      	mov	r1, r2
 8006462:	2200      	movs	r2, #0
 8006464:	602a      	str	r2, [r5, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	f7fa fde4 	bl	8001034 <_read>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_read_r+0x1e>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_read_r+0x1e>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20000af4 	.word	0x20000af4

0800647c <lflush>:
 800647c:	8983      	ldrh	r3, [r0, #12]
 800647e:	f003 0309 	and.w	r3, r3, #9
 8006482:	2b09      	cmp	r3, #9
 8006484:	d101      	bne.n	800648a <lflush+0xe>
 8006486:	f7ff b85b 	b.w	8005540 <fflush>
 800648a:	2000      	movs	r0, #0
 800648c:	4770      	bx	lr
	...

08006490 <__srefill_r>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	460c      	mov	r4, r1
 8006494:	4605      	mov	r5, r0
 8006496:	b118      	cbz	r0, 80064a0 <__srefill_r+0x10>
 8006498:	6983      	ldr	r3, [r0, #24]
 800649a:	b90b      	cbnz	r3, 80064a0 <__srefill_r+0x10>
 800649c:	f7ff f8ba 	bl	8005614 <__sinit>
 80064a0:	4b3b      	ldr	r3, [pc, #236]	; (8006590 <__srefill_r+0x100>)
 80064a2:	429c      	cmp	r4, r3
 80064a4:	d10a      	bne.n	80064bc <__srefill_r+0x2c>
 80064a6:	686c      	ldr	r4, [r5, #4]
 80064a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064ac:	2300      	movs	r3, #0
 80064ae:	6063      	str	r3, [r4, #4]
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	069e      	lsls	r6, r3, #26
 80064b4:	d50c      	bpl.n	80064d0 <__srefill_r+0x40>
 80064b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064ba:	e066      	b.n	800658a <__srefill_r+0xfa>
 80064bc:	4b35      	ldr	r3, [pc, #212]	; (8006594 <__srefill_r+0x104>)
 80064be:	429c      	cmp	r4, r3
 80064c0:	d101      	bne.n	80064c6 <__srefill_r+0x36>
 80064c2:	68ac      	ldr	r4, [r5, #8]
 80064c4:	e7f0      	b.n	80064a8 <__srefill_r+0x18>
 80064c6:	4b34      	ldr	r3, [pc, #208]	; (8006598 <__srefill_r+0x108>)
 80064c8:	429c      	cmp	r4, r3
 80064ca:	bf08      	it	eq
 80064cc:	68ec      	ldreq	r4, [r5, #12]
 80064ce:	e7eb      	b.n	80064a8 <__srefill_r+0x18>
 80064d0:	0758      	lsls	r0, r3, #29
 80064d2:	d448      	bmi.n	8006566 <__srefill_r+0xd6>
 80064d4:	06d9      	lsls	r1, r3, #27
 80064d6:	d405      	bmi.n	80064e4 <__srefill_r+0x54>
 80064d8:	2309      	movs	r3, #9
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	e7e8      	b.n	80064b6 <__srefill_r+0x26>
 80064e4:	071a      	lsls	r2, r3, #28
 80064e6:	d50b      	bpl.n	8006500 <__srefill_r+0x70>
 80064e8:	4621      	mov	r1, r4
 80064ea:	4628      	mov	r0, r5
 80064ec:	f7fe ffec 	bl	80054c8 <_fflush_r>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d1e0      	bne.n	80064b6 <__srefill_r+0x26>
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	60a0      	str	r0, [r4, #8]
 80064f8:	f023 0308 	bic.w	r3, r3, #8
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	61a0      	str	r0, [r4, #24]
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f043 0304 	orr.w	r3, r3, #4
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	b91b      	cbnz	r3, 8006514 <__srefill_r+0x84>
 800650c:	4621      	mov	r1, r4
 800650e:	4628      	mov	r0, r5
 8006510:	f7ff f9a2 	bl	8005858 <__smakebuf_r>
 8006514:	89a6      	ldrh	r6, [r4, #12]
 8006516:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800651a:	07b3      	lsls	r3, r6, #30
 800651c:	d00f      	beq.n	800653e <__srefill_r+0xae>
 800651e:	2301      	movs	r3, #1
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	4b1e      	ldr	r3, [pc, #120]	; (800659c <__srefill_r+0x10c>)
 8006524:	491e      	ldr	r1, [pc, #120]	; (80065a0 <__srefill_r+0x110>)
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	f006 0609 	and.w	r6, r6, #9
 800652c:	f7ff f8f0 	bl	8005710 <_fwalk>
 8006530:	2e09      	cmp	r6, #9
 8006532:	81a7      	strh	r7, [r4, #12]
 8006534:	d103      	bne.n	800653e <__srefill_r+0xae>
 8006536:	4621      	mov	r1, r4
 8006538:	4628      	mov	r0, r5
 800653a:	f7fe ff3f 	bl	80053bc <__sflush_r>
 800653e:	6922      	ldr	r2, [r4, #16]
 8006540:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006542:	6963      	ldr	r3, [r4, #20]
 8006544:	6a21      	ldr	r1, [r4, #32]
 8006546:	6022      	str	r2, [r4, #0]
 8006548:	4628      	mov	r0, r5
 800654a:	47b0      	blx	r6
 800654c:	2800      	cmp	r0, #0
 800654e:	6060      	str	r0, [r4, #4]
 8006550:	dc1c      	bgt.n	800658c <__srefill_r+0xfc>
 8006552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006556:	bf17      	itett	ne
 8006558:	2200      	movne	r2, #0
 800655a:	f043 0320 	orreq.w	r3, r3, #32
 800655e:	6062      	strne	r2, [r4, #4]
 8006560:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006564:	e7bc      	b.n	80064e0 <__srefill_r+0x50>
 8006566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006568:	2900      	cmp	r1, #0
 800656a:	d0cd      	beq.n	8006508 <__srefill_r+0x78>
 800656c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006570:	4299      	cmp	r1, r3
 8006572:	d002      	beq.n	800657a <__srefill_r+0xea>
 8006574:	4628      	mov	r0, r5
 8006576:	f7ff f9b7 	bl	80058e8 <_free_r>
 800657a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800657c:	6063      	str	r3, [r4, #4]
 800657e:	2000      	movs	r0, #0
 8006580:	6360      	str	r0, [r4, #52]	; 0x34
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0c0      	beq.n	8006508 <__srefill_r+0x78>
 8006586:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800658c:	2000      	movs	r0, #0
 800658e:	e7fc      	b.n	800658a <__srefill_r+0xfa>
 8006590:	08006a38 	.word	0x08006a38
 8006594:	08006a58 	.word	0x08006a58
 8006598:	08006a18 	.word	0x08006a18
 800659c:	08006910 	.word	0x08006910
 80065a0:	0800647d 	.word	0x0800647d

080065a4 <_init>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr

080065b0 <_fini>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	bf00      	nop
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr
